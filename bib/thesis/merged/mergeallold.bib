% bibliography.bib
% Encoding: UTF-8

@InProceedings{Caracciolo2015,
  author    = {Andrea Caracciolo and Mircea Lungu and Oscar Nierstrasz},
  booktitle = {Proceedings of the 12th Working IEEE/IFIP Conference on Software Architecture (WICSA)},
  title     = {A Unified Approach to Architecture Conformance Checking},
  year      = {2015},
  month     = {may},
  pages     = {41-50},
  publisher = {ACM Press},
  abstract  = {Software erosion can be controlled by periodically checking for consistency between the de facto architecture and its theoretical counterpart. Studies show that this process is often not automated and that developers still rely heavily on manual reviews, despite the availability of a large number of tools. This is partially due to the high cost involved in setting up and maintaining tool-specific and incompatible test specifications that replicate otherwise documented invariants. To reduce this cost, our approach consists in unifying the functionality provided by existing tools under the umbrella of a common business-readable DSL. By using a declarative language, we are able to write tool-agnostic rules that are simple enough to be understood by untrained stakeholders and, at the same time, can be interpreted as a rigorous specification for checking architecture conformance.},
  keywords  = {rank3},
  ranking   = {rank3},
}

@Article{Terra2015,
  author   = {Terra, Ricardo and Valente, Marco Tulio and Czarnecki, Krzysztof and Bigonha, Roberto S.},
  journal  = {Software: Practice and Experience},
  title    = {A Recommendation System for Repairing Violations Detected by Static Architecture Conformance Checking},
  year     = {2015},
  issn     = {1097-024X},
  number   = {3},
  pages    = {315--342},
  volume   = {45},
  abstract = {This paper describes a recommendation system that provides refactoring guidelines for maintainers when tackling architectural erosion. The paper formalizes 32 refactoring recommendations to repair violations raised by static architecture conformance checking approaches; it describes a tool—called ArchFix—that triggers the proposed recommendations; and it evaluates the application of this tool in two industrial‐strength systems. For the first system—a 21 KLOC open‐source strategic management system—our approach has indicated correct refactoring recommendations for 31 out of 41 violations detected as the result of an architecture conformance process. For the second system—a 728 KLOC customer care system used by a major telecommunication company—our approach has triggered correct recommendations for 624 out of 787 violations, as asserted by the system's architect. Moreover, the architects have scored 82% of these recommendations as having moderate or major complexity.},
  keywords = {rank3},
  ranking  = {rank3},
}

@InBook{Filho2017,
  author    = {Filho, Juarez L. M. and Rocha, Lincoln and Andrade, Rossana and Britto, Ricardo},
  editor    = {Lopes, Ant{\'o}nia and de Lemos, Rog{\'e}rio},
  pages     = {67--83},
  publisher = {Springer International Publishing},
  title     = {Preventing Erosion in Exception Handling Design Using Static-Architecture Conformance Checking},
  year      = {2017},
  address   = {Cham},
  isbn      = {978-3-319-65831-5},
  booktitle = {Software Architecture: 11th European Conference, ECSA 2017, Canterbury, UK, September 11-15, 2017, Proceedings},
  doi       = {10.1007/978-3-319-65831-5_5},
  keywords  = {rank3},
  ranking   = {rank3},
}

@Book{Kerievsky2004,
 author = {Kerievsky, Joshua},
 title = {Refactoring to Patterns},
 year = {2004},
 isbn = {0321213351},
 publisher = {Pearson Higher Education}
} 

@Article{Chidamber1994,
  author     = {Chidamber, S. R. and Kemerer, C. F.},
  journal    = {IEEE Trans. Softw. Eng.},
  title      = {A Metrics Suite for Object Oriented Design},
  year       = {1994},
  issn       = {0098-5589},
  month      = {jun},
  number     = {6},
  pages      = {476--493},
  volume     = {20},
  abstract   = {Given the central role that software development plays in the delivery and application of information technology, managers are increasingly focusing on process improvement in the software development area. This demand has spurred the provision of a number of new and/or improved approaches to software development, with perhaps the most prominent being object-orientation (OO). In addition, the focus on process improvement has increased the demand for software measures, or metrics with which to manage the process. The need for such metrics is particularly acute when an organization is adopting a new technology for which established practices have yet to be developed. This research addresses these needs through the development and implementation of a new suite of metrics for OO design. Metrics developed in previous research, while contributing to the field's understanding of software development processes, have generally been subject to serious criticisms, including the lack of a theoretical base. Following Wand and Weber (1989), the theoretical base chosen for the metrics was the ontology of Bunge (1977). Six design metrics are developed, and then analytically evaluated against Weyuker's (1988) proposed set of measurement principles. An automated data collection tool was then developed and implemented to collect an empirical sample of these metrics at two field sites in order to demonstrate their feasibility and suggest ways in which managers may use these metrics for process improvement.},
  doi        = {10.1109/32.295895},
  issue_date = {June 1994},
  numpages   = {18},
  publisher  = {IEEE Press},
}

@Article{Conchuir2009,
  author    = {Conch\'{u}ir, E. and {\AA}gerfalk, P. J. and Holmstrom, H. and Fitzgerald, B.},
  journal   = {Communications of the ACM},
  title     = {Global Software Development: Where Are the Benefits?},
  year      = {2009},
  month     = {aug},
  number    = {8},
  pages     = {127--131},
  volume    = {52},
  abstract  = {Global Software Development (GSD) is increasingly becoming the normal practice in the software industry, readily evidenced by U.S. estimates that the value of the offshore software development market has increased 25-fold over the past 10 years, to the extent that one-quarter of U.S. spending on application development, integration and management services is expected to go off-shore according to recent predictions. There are many potential benefits that can arise from GSD. The most frequently cited one is that of reduced development costs due to the salary savings possible. Also, GSD can lead to reduced development duration due to greater time zone effectiveness as companies practice the so-called 'follow-the-sun' software development model. GSD also affords new opportunities for cross-site modularization of development work, potential access to a larger and better-skilled developer pool, and the possibility of greater innovation, learning and transfer of best practices. Finally, GSD can facilitate closer proximity to markets and customers.
However, GSD also introduces a number of challenges in relation to communication, coordination and control of the development process. These arise due to the distances involved in three dimensions -- geographical, temporal, and socio-cultural (See Figure 1). As a consequence, much research and practice has focused on trying to find ways to overcome the GSD challenges identified in Figure 1. In the literature to date, the potential benefits of GSD are usually just mentioned very briefly, if they are mentioned at all, and the realization of these benefits seems to be more or less taken for granted. The primary focus instead is on how the problems inherent in GSD might be addressed. Here, we reverse this trend and focus instead on the benefits and the extent to which they are actually being realized in practice in three global companies practicing GSD.},
  acmid     = {1536648},
  address   = {New York, NY, USA},
  numpages  = {5},
  publisher = {ACM},
}

@InProceedings{Ramasubbu2011,
  author    = {Ramasubbu, N. and Cataldo, M. and Balan, R. K. and Herbsleb, J. D.},
  booktitle = {Proceedings of the 33rd International Conference on Software Engineering - ICSE'11},
  title     = {Configuring Global Software Teams: A Multi-company Analysis of Project Productivity, Quality, and Profits},
  year      = {2011},
  pages     = {261--270},
  abstract  = {In this paper, we examined the impact of project-level configurational choices of globally distributed software teams on project productivity, quality, and profits. Our analysis used data from 362 projects of four different firms. These projects spanned a wide range of programming languages, application domain, process choices, and development sites spread over 15 countries and 5 continents. Our analysis revealed fundamental tradeoffs in choosing configurational choices that are optimized for productivity, quality, and/or profits. In particular, achieving higher levels of productivity and quality require diametrically opposed configurational choices. In addition, creating imbalances in the expertise and personnel distribution of project teams significantly helps increase profit margins. However, a profit-oriented imbalance could also significantly affect productivity and/or quality outcomes. Analyzing these complex tradeoffs, we provide actionable managerial insights that can help software firms and their clients choose configurations that achieve desired project outcomes in globally distributed software development.},
  keywords  = {empirical analysis, globally distributed software development, quality management, software engineering economics, rank2},
  location  = {Waikiki, Honolulu, HI, USA},
  ranking   = {rank2},
}

@InProceedings{Espinosa2007,
  author    = {Espinosa, J. A. and Nan, N. and Carmel, E.},
  booktitle = {Second IEEE International Conference on Global Software Engineering - ICGSE'07.},
  title     = {Do Gradations of Time Zone Separation Make a Difference in Performance? A First Laboratory Study},
  year      = {2007},
  month     = {Aug},
  pages     = {12-22},
  abstract  = {We often hear that global software engineering teams are affected by time differences. While there is considerable research on the difficulties of distance, culture and other dimensions, there has been little research that isolated the impact of just time differences. The research question that guides us is whether there are gradual differences across time zones that impact team performance. In this study we conducted a laboratory experiment with 42 dyadic teams. The teams were randomly assigned into 4 time zone overlap conditions: full overlap, 2/3 overlap, 1/3 overlap and no overlap. Using a fictional map task, we found that participants' perceptions of process are unrelated to actual objective performance measures of speed and accuracy. Consistent with our expectations, we found that a small time separation has no effect on accuracy, but that more time separation has a significant effect on accuracy. Also consistent with our expectations, we found that a small amount of time separation has a significant effect on production speed. However, contrary to our expectations, we found that further increases in partial overlap have less significant effects on speed, and when there is no overlap speed actually increases, albeit not significantly - a "U-shaped" effect.},
  keywords  = {rank3},
  ranking   = {rank3},
}

@Article{Herbsleb2003,
  author   = {Herbsleb, J. D. and Mockus, A.},
  journal  = {IEEE Transactions on Software Engineering},
  title    = {An empirical study of speed and communication in globally distributed software development},
  year     = {2003},
  month    = {June},
  number   = {6},
  pages    = {481-494},
  volume   = {29},
  abstract = {Global software development is rapidly becoming the norm for technology companies. Previous qualitative research suggests that distributed development may increase development cycle time for individual work items (modification requests). We use both data from the source code change management system and survey data to model the extent of delay in a distributed software development organization and explore several possible mechanisms for this delay. One key finding is that distributed work items appear to take about two and one-half times as long to complete as similar items where all the work is colocated. The data strongly suggest a mechanism for the delay, i.e., that distributed work items involve more people than comparable same-site work items, and the number of people involved is strongly related to the calendar time to complete a work item. We replicate the analysis of change data in a different organization with a different product and different sites and confirm our main findings. We also report survey results showing differences between same-site and distributed social networks, testing several hypotheses about characteristics of distributed social networks that may be related to delay. We discuss implications of our findings for practices and collaboration technology that have the potential for dramatically speeding distributed software development.},
  keywords = {rank3},
  ranking  = {rank3},
}

@Article{Bavani2012,
  author   = {R. Bavani},
  journal  = {IEEE Software},
  title    = {Distributed Agile, Agile Testing, and Technical Debt},
  year     = {2012},
  issn     = {0740-7459},
  month    = {Nov},
  number   = {6},
  pages    = {28-33},
  volume   = {29},
  abstract = {Agile teams create business value by responding to changing business environments and delivering working software at regular intervals. While doing so, they make design tradeoffs to satisfy business needs such as meeting a release schedule. Technical debt is the result of such decisions or tradeoffs. When this happens, agile teams must pay off the accumulated debt by improving designs during subsequent iterations in order to improve maintainability. This must happen in a systematic way so that technical debt does not swell up and damage the project. Accomplishing this is one of the major challenges in distributed agile projects. The scope of technical debt in software projects is spread across all areas including architecture, design, code, and test scripts.},
  doi      = {10.1109/MS.2012.155},
  keywords = {Ethics;Interviews;Investments;Software maintenance;Software measurements;Software quality;agile;agile software development;agile testing;distributed agile;technical debt},
}

@InProceedings{Cunningham1992,
  author    = {Cunningham, Ward},
  booktitle = {Addendum to the Proceedings on Object-oriented Programming Systems, Languages, and Applications (Addendum)},
  title     = {The WyCash Portfolio Management System},
  year      = {1992},
  address   = {New York, NY, USA},
  pages     = {29--30},
  publisher = {ACM},
  series    = {OOPSLA '92},
  acmid     = {157715},
  doi       = {10.1145/157709.157715},
  isbn      = {0-89791-610-7},
  keywords  = {rank4},
  location  = {Vancouver, British Columbia, Canada},
  numpages  = {2},
  ranking   = {rank4},
}

@InProceedings{Holvitie2014,
  author       = {Holvitie, Johannes and Leppanen, Ville and Hyrynsalmi, Sami},
  booktitle    = {2014 Sixth International Workshop on Managing Technical Debt},
  title        = {Technical debt and the effect of agile software development practices on it-an industry practitioner survey},
  year         = {2014},
  organization = {IEEE},
  pages        = {35--42},
  abstract     = {A major reason for the popularity of agile and lean software methods is their capability to function in resource scarce and requirement erratic environments. Both of these characteristics cause accumulation of technical debt, something that is the end result of either intentional or unintentional decisions. The ability of these methods to function with technical debt indicates that they contain components with inherent technical debt management capabilities. This study conducts a survey on industry practitioners to discover what is their level of technical debt knowledge, how does technical debt manifest in their projects and which of the applied components of agile software development -- both processes and practices -- are sensitive to technical debt. This paper contributes to the technical debt discussion by showing differences in assumed and indicated technical debt knowledge. Furthermore, components closest to implementation and its maintenance are perceived to have the most positive effects on technical debt management. Finally, the most encountered instances of technical debt are caused by architectural inadequacies, they are internal legacy, and increase in size as a result of continued implementation.},
  keywords     = {rank3},
  ranking      = {rank3},
}

@InProceedings{Ebert2016,
  author       = {Ebert, Christof and Kuhrmann, Marco and Prikladnicki, Rafael},
  booktitle    = {2016 IEEE 11th International Conference on Global Software Engineering (ICGSE)},
  title        = {Global software engineering: Evolution and trends},
  year         = {2016},
  organization = {IEEE},
  pages        = {144--153},
  abstract     = {Professional software products and IT systems and services today are developed mostly by globally distributed teams, projects, and companies. Successfully orchestrating Global Software Engineering (GSE) has become the major success factor both for organizations and practitioners. Yet, more than a half of all distributed projects does not achieve the intended objectives and is canceled. This paper summarizes experiences from academia and industry in a way to facilitate knowledge and technology transfer. It is based on an evaluation of 10 years of research, and industry collaboration and experience reported at the IEEE International Conference on Software Engineering (ICGSE) series. The outcomes of our analysis show GSE as a field highly attached to industry and, thus, a considerable share of ICGSE papers address the transfer of Software Engineering concepts and solutions to the global stage. We found collaboration and teams, processes and organization, sourcing and supplier management, and success factors to be the topics gaining the most interest of researchers and practitioners. Beyond the analysis of the past conferences, we also look at current trends in GSE to motivate further research and industrial collaboration.},
}

@Book{Ebert2012,
  author    = {Ebert, Christof},
  publisher = {Wiley Online Library},
  title     = {Global Software and IT},
  year      = {2012},
}

@Article{Ebert2015,
  author    = {Ebert, Christof and Kuhrmann, Marco and Prikladnicki, Rafael},
  journal   = {IEEE Software},
  title     = {Global software engineering: An industry perspective},
  year      = {2015},
  number    = {1},
  pages     = {105--108},
  volume    = {33},
  abstract  = {Abstract:
Professional software products and IT systems and services today are developed mostly by globally distributed teams, projects, and companies. This issue's column summarizes experiences and guidance from industry to facilitate knowledge and technology transfer. It's based on industry feedback from the annual IEEE International Conference on Global Software Engineering.},
  publisher = {IEEE},
}

@InProceedings{Aoyama1995,
  author       = {Aoyama, Mikio},
  booktitle    = {Proceedings 1995 Asia Pacific Software Engineering Conference},
  title        = {Management of distributed concurrent development for large scale software systems},
  year         = {1995},
  organization = {IEEE},
  pages        = {158--167},
}

@Article{Alves2016,
  author    = {Alves, Nicolli SR and Mendes, Thiago S and de Mendon{\c{c}}a, Manoel G and Sp{\'\i}nola, Rodrigo O and Shull, Forrest and Seaman, Carolyn},
  journal   = {Information and Software Technology},
  title     = {Identification and management of technical debt: A systematic mapping study},
  year      = {2016},
  pages     = {100--121},
  volume    = {70},
  abstract  = {Context: The technical debt metaphor describes the effect of immature artifacts on software maintenance that bring a short-term benefit to the project in terms of increased productivity and lower cost, but that may have to be paid off with interest later. Much research has been performed to propose mechanisms to identify debt and decide the most appropriate moment to pay it off. It is important to investigate the current state of the art in order to provide both researchers and practitioners with information that enables further research activities as well as technical debt management in practice.
Objective: This paper has the following goals: to characterize the types of technical debt, identify indica- tors that can be used to find technical debt, identify management strategies, understand the maturity level of each proposal, and identify what visualization techniques have been proposed to support technical debt identification and management activities.
Method: A systematic mapping study was performed based on a set of three research questions. In total, 100 studies, dated from 2010 to 2014, were evaluated.
Results: We proposed an initial taxonomy of technical debt types, created a list of indicators that have been proposed to identify technical debt, identified the existing management strategies, and analyzed the current state of art on technical debt, identifying topics where new research efforts can be invested.
Conclusion: The results of this mapping study can help to identify points that still require further investigation in technical debt research.},
  keywords  = {rank4},
  publisher = {Elsevier},
  ranking   = {rank4},
}

@Article{Usman2018,
  author    = {Usman, Muhammad and Britto, Ricardo and Damm, Lars-Ola and Borstler, Jurgen},
  journal   = {Information and Software technology},
  title     = {Effort estimation in large-scale software development: An industrial case study},
  year      = {2018},
  pages     = {21--40},
  volume    = {99},
  abstract  = {Context: Software projects frequently incur schedule and budget overruns. Planning and estimation are particularly challenging in large and globally distributed agile projects. While software engineering researchers have been investigating effort estimation for many years to help practitioners to improve their estimation processes, there is little empirical research about effort estimation in large-scale distributed projects involving agile teams.

Objective: The objective of this paper is three-fold: i) To identify how effort estimation is carried out in large-scale distributed agile projects; ii) to analyze the accuracy of the effort estimation processes in large-scale distributed agile projects; and iii) to identify and investigate the factors that impact the accuracy of effort estimates in large-scale distributed agile projects.

Method: We performed an exploratory longitudinal case study. The data collection was operationalized through archival research and semi-structured interviews.

Results: The main findings of the studied case are: 1) A two-stage estimation process, with re-estimation at the analysis stage, improves the accuracy of the effort estimates; 2) underestimation is the dominant trend; 3) less mature teams incur larger effort overruns; 4) requirements with larger size/scope incur larger effort overruns; 5) requirements developed in multi-site settings incur larger effort overruns as compared to requirements developed in a co-located setting; 6) requirements priorities impact the accuracy of the effort estimates.

Conclusion: A two-stage effort estimation process can improve effort estimation accuracy and seems to address some of the challenges in large-scale agile software development. To improve effort estimates one needs to consider team maturity, distribution as well as requirements size and priorities.},
  keywords  = {rank3},
  publisher = {Elsevier},
  ranking   = {rank3},
}

@InProceedings{Casey2006,
  author    = {Casey, Valentine and Richardson, Ita},
  booktitle = {Proceedings of the 2006 International Workshop on Global Software Development for the Practitioner},
  title     = {Uncovering the Reality Within Virtual Software Teams},
  year      = {2006},
  address   = {New York, NY, USA},
  pages     = {66--72},
  publisher = {ACM},
  series    = {GSD '06},
  abstract  = {To support software development globalisation, organisations are increasingly implementing virtual team strategies. However, these teams have to work within the confines of the factors which distance introduces, thus not always allowing effective coordination, visibility, communication and cooperation to take place. The successful implementation and management of such teams must be done differently to those at single-site locations. To establish what factors significantly affect the implementation of virtual teams, the authors carried out qualitative research in two organisations in Ireland. Results from this research demonstrate that many factors are reality for those involved in global software development. In this paper we present five of these factors and discuss the impact these had on the virtual teams. These five are: use of communication tools, project management, process engineering, technical ability and knowledge transfer and motivational issues. If these are not explicitly addressed by management it can lead to serious problems.},
  acmid     = {1138523},
  isbn      = {1-59593-404-9},
  keywords  = {GSD, communication tools, global software development, knowledge transfer, motivational issues, process re-engineering, project management, technical ability, virtual teams},
  location  = {Shanghai, China},
  numpages  = {7},
}

@InProceedings{Kazman2015,
  author    = {Rick Kazman and Yuanfang Cai and Ran Mo and Qiong Feng and Lu Xiao and Serge Haziyev and Volodymyr Fedak and Andriy Shapochka},
  booktitle = {2015 {IEEE}/{ACM} 37th {IEEE} International Conference on Software Engineering},
  title     = {A Case Study in Locating the Architectural Roots of Technical Debt},
  year      = {2015},
  month     = {may},
  publisher = {{IEEE}},
  abstract  = {Our recent research has shown that, in large-scale software systems, defective files seldom exist alone. They are usually architecturally connected, and their architectural structures exhibit significant design flaws which propagate bugginess among files. We call these flawed structures the architecture roots, a type of technical debt that incurs high maintenance penalties. Removing the architecture roots of bugginess requires refactoring, but the benefits of refactoring have historically been difficult for architects to quantify or justify. In this paper, we present a case study of identifying and quantifying such architecture debts in a large-scale industrial software project. Our approach is to model and analyze software architecture as a set of design rule spaces (DRSpaces). Using data extracted from the project's development artifacts, we were able to identify the files implicated in architecture flaws and suggest refactorings based on removing these flaws. Then we built economic models of the before and (predicted) after states, which gave the organization confidence that doing the refactorings made business sense, in terms of a handsome return on investment.},
  doi       = {10.1109/icse.2015.146},
  keywords  = {rank4},
  ranking   = {rank4},
}

@Article{Heikkila2017,
  author      = {Heikkila, V.T. and Paasivaara, M. and Lasssenius, C. and Damian, D. and Engblom, C.},
  journal     = {Empirical Software Engineering},
  title       = {Managing the requirements flow from strategy to release in large-scale agile development: a case study at Ericsson},
  year        = {2017},
  issn        = {13823256},
  note        = {cited By 1},
  number      = {6},
  pages       = {2892-2936},
  volume      = {22},
  abstract    = {In a large organization, informal communication and simple backlogs are not sufficient for the management of requirements and development work. Many large organizations are struggling to successfully adopt agile methods, but there is still little scientific knowledge on requirements management in large-scale agile development organizations. We present an in-depth study of an Ericsson telecommunications node development organization which employs a large scale agile method to develop telecommunications system software. We describe how the requirements flow from strategy to release, and related benefits and problems. Data was collected by 43 interviews, which were analyzed qualitatively. The requirements management was done in three different processes, each of which had a different process model, purpose and planning horizon. The release project management process was plan-driven, feature development process was continuous and implementation management process was agile. The perceived benefits included reduced development lead time, increased flexibility, increased planning efficiency, increased developer motivation and improved communication effectiveness. The recognized problems included difficulties in balancing planning effort, overcommitment, insufficient understanding of the development team autonomy, defining the product owner role, balancing team specialization, organizing system-level work and growing technical debt. The study indicates that agile development methods can be successfully employed in organizations where the higher level planning processes are not agile. Combining agile methods with a flexible feature development process can bring many benefits, but large-scale software development seems to require specialist roles and significant coordination effort. © 2016, The Author(s).},
  affiliation = {Aalto University, PO Box 15400, Aalto, Finland; University of Victoria, PO Box 1700, STN CSC, Victoria, BC, Canada; Oy LM Ericsson AB, Kirkkonummi, Finland},
  coden       = {ESENF},
  doi         = {10.1007/s10664-016-9491-z},
  keywords    = {Agile manufacturing systems; Project management; Requirements engineering; Societies and institutions; Software engineering, Agile development organization; Agile software development; Communication effectiveness; Implementation managements; Large project; Project management process; Requirements management; Scrum, Software design, rank4},
  language    = {English},
  publisher   = {Springer New York LLC},
  ranking     = {rank4},
  source      = {Scopus},
}

@InProceedings{Falessi2013,
  author    = {Falessi, Davide and Shaw, Michele A. and Shull, Forrest and Mullen, Kathleen and Stein, Mark},
  booktitle = {Proceedings of the 4th International Workshop on Managing Technical Debt},
  title     = {Practical Considerations, Challenges, and Requirements of Tool-support for Managing Technical Debt},
  year      = {2013},
  address   = {Piscataway, NJ, USA},
  pages     = {16--19},
  publisher = {IEEE Press},
  series    = {MTD '13},
  abstract  = {Developing a software product with a high level of quality that also meets budget and schedule is the main goal of any organization. This usually implies making tradeoffs among conflicting aspects like number of features to implement, user perceived quality, time-to-market, and the ability of the company to maintain and improve the system in a feasible way in the future (aka, managing Technical Debt (TD)). In this paper we present a fresh perspective on TD from a CMMI Maturity Level 5 company. Examples, practical considerations, and challenges in dealing with TD are presented along with ten requirements of a tool for managing TD.},
  acmid     = {2663300},
  isbn      = {978-1-4673-6443-0},
  keywords  = {CMMI, decision-making, technical debt, rank4},
  location  = {San Francisco, California},
  numpages  = {4},
  ranking   = {rank4},
}

@Article{Harter2000,
  author    = {Harter, Donald E. and Krishnan, Mayuram S. and Slaughter, Sandra A.},
  journal   = {Manage. Sci.},
  title     = {Effects of Process Maturity on Quality, Cycle Time, and Effort in Software Product Development},
  year      = {2000},
  issn      = {0025-1909},
  month     = {apr},
  number    = {4},
  pages     = {451--466},
  volume    = {46},
  abstract  = {The information technology (IT) industry is characterized by rapid innovation and intense competition. To survive, IT firms must develop high quality software products on time and at low cost. A key issue is whether high levels of quality can be achieved without adversely impacting cycle time and effort. Conventional beliefs hold that processes to improve software quality can be implemented only at the expense of longer cycle times and greater development effort. However, an alternate view is that quality improvement, faster cycle time, and effort reduction can be simultaneously attained by reducing defects and rework. In this study, we empirically investigate the relationship between process maturity, quality, cycle time, and effort for the development of 30 software products by a major IT firm. We find that higher levels of process maturity as assessed by the Software Engineering Institute's Capability Maturity Model™ are associated with higher product quality, but also with increases in development effort. However, our findings indicate that the reductions in cycle time and effort due to improved quality outweigh the increases from achieving higher levels of process maturity. Thus, the net effect of process maturity is reduced cycle time and development effort.},
  acmid     = {970247},
  address   = {Institute for Operations Research and the Management Sciences (INFORMS), Linthicum, Maryland, USA},
  doi       = {10.1287/mnsc.46.4.451.12056},
  keywords  = {Capability maturity model, Software costs, Software cycle time, Software economics, Software process improvement, Software productivity, Software quality, rank2},
  numpages  = {16},
  publisher = {INFORMS},
  ranking   = {rank2},
}

@Article{YliHuumo2016,
  author      = {Yli-Huumo, J. and Maglyas, A. and Smolander, K.},
  journal     = {Journal of Systems and Software},
  title       = {How do software development teams manage technical debt? An empirical study},
  year        = {2016},
  issn        = {01641212},
  note        = {cited By 6},
  pages       = {195-218},
  volume      = {120},
  abstract    = {Technical debt (TD) is a metaphor for taking shortcuts or workarounds in technical decisions to gain short-term benefit in time-to-market and earlier software release. In this study, one large software development organization is investigated to gather empirical evidence related to the concept of technical debt management (TDM). We used the exploratory case study method to collect and analyze empirical data in the case organization by interviewing a total of 25 persons in eight software development teams. We were able to identify teams where the current strategy for TDM was only to fix TD when necessary, when it started to cause too much trouble for development. We also identified teams where the management had a systematic strategy to identify, measure and monitor TD during the development process. It seems that TDM can be associated with a similar maturity concept as software development in general. Development teams may raise their maturity by increasing their awareness and applying more advanced processes, techniques and tools in TDM. TDM is an essential part of sustainable software development, and companies have to find right approaches to deal with TD to produce healthy software that can be developed and maintained in the future. © 2016 The Authors},
  affiliation = {Lappeenranta University of Technology, School of Business and Management, Department of Innovation and Software, PO Box 20, Skinnarilankatu 34, Lappeenranta, Finland; Aalto University, School of Science, Department of Computer Science, P.O.Box 15400, Aalto, Finland},
  coden       = {JSSOD},
  doi         = {10.1016/j.jss.2016.05.018},
  keywords    = {Human resource management; Planning; Software engineering, Development process; Exploratory case studies; Software development organizations; Software development teams; Sustainable softwares; Technical debts; Technical decision; Techniques and tools, Software design, rank5},
  language    = {English},
  publisher   = {Elsevier Inc.},
  ranking     = {rank5},
  source      = {Scopus},
}

@Article{Rios2018,
  author    = {Nicolli Rios and Manoel Gomes de Mendon{\c{c}}a Neto and Rodrigo Oliveira Sp{\'{\i}}nola},
  journal   = {Information and Software Technology},
  title     = {A tertiary study on technical debt: Types, management strategies, research trends, and base information for practitioners},
  year      = {2018},
  month     = {oct},
  pages     = {117--145},
  volume    = {102},
  abstract  = {Context
The concept of technical debt (TD) contextualizes problems faced during software evolution considering the tasks that are not carried out adequately during its development. Currently, it is common to associate any impediment related to the software product and its development process to the definition of TD. This can bring confusion and ambiguity in the use of the term. Besides, due to the increasing amount of work in the area, it is difficult to have a comprehensive view of the plethora of proposals on TD management.

Objective
This paper intends to investigate the current state of research on TD by identifying what research topics have been considered, organizing research directions and practical knowledge that has already been defined, identifying the known types of TD, and organizing what activities, strategies and tools have been proposed to support the management of TD.

Method
A tertiary study was performed based on a set of five research questions. In total, 13 secondary studies, dated from 2012 to March 2018, were evaluated.

Results
The results of this tertiary study are beneficial for both practitioners and researchers. We evolved a taxonomy of TD types, identified a list of situations in which debt items can be found in software projects, and organized a map representing the state of the art of activities, strategies and tools to support TD management. Besides, we also summarized some research directions and practical knowledge, and identified the research topics that have been more considered in secondary studies.

Conclusion
This tertiary study revisited the TD landscape. Its results can help to identify points that still require further investigation in TD research.},
  doi       = {10.1016/j.infsof.2018.05.010},
  groups    = {armandosoaressousa:4},
  keywords  = {rank5},
  publisher = {Elsevier {BV}},
  ranking   = {rank5},
}

@InProceedings{Alzaghoul2014,
  author    = {E. Alzaghoul and R. Bahsoon},
  booktitle = {2014 23rd Australian Software Engineering Conference},
  title     = {Evaluating Technical Debt in Cloud-Based Architectures Using Real Options},
  year      = {2014},
  month     = {April},
  pages     = {1-10},
  abstract  = {A Cloud-based Service-Oriented Architecture (CBSOA) is typically composed of web services, which are offered off the cloud marketplace. CB-SOA can improve its utility and add value to its composition by switching among its constituent services. We look at the option to defer the decision of substitution under uncertainty. We exploit Binomial Options to the formulation. We quantify the time-value of the architecture decisions of switching web services and technical debt they can imply on the structure. As CB-SOA are market-sensitive, dynamic and volatile, the decision of deferral tends to be sensitive to these dynamics. Henceforth, the structural complexity of a CB-SOAcan change over time and so the technical debt as its constituent web services are modified, replaced, upgraded, etc. The method builds on Design Structure Matrix (DSM) and introduces time and complexity aware propagation cost metrics to assess the value of deferral decisions relative to changes in the structure. Architects of CB-SOA can use our method to assess the time value of deferring the decisions to switch web services relative to complexity, technical debt and value creation. We demonstrate the applicability of the method using an illustrative example.},
  doi       = {10.1109/ASWEC.2014.27},
  issn      = {1530-0803},
}

@Conference{Ampatzoglou2016,
  author    = {Ampatzoglou, A. and Ampatzoglou, A. and Chatzigeorgiou, A. and Avgeriou, P. and Abrahamsson, P. and Martini, A. and Zdun, U. and Systa, K.},
  booktitle = {2016 IEEE 8th International Workshop on Managing Technical Debt (MTD)},
  title     = {The Perception of Technical Debt in the Embedded Systems Domain: An Industrial Case Study},
  year      = {2016},
  month     = {Oct},
  note      = {cited By 2},
  pages     = {9-16},
  publisher = {Institute of Electrical and Electronics Engineers Inc.},
  abstract  = {Technical Debt Management (TDM) has drawn the attention of software industries during the last years, including embedded systems. However, we currently lack an overview of how practitioners from this application domain perceive technical debt. To this end, we conducted a multiple case study in the embedded systems industry, to investigate: (a) the expected life-time of components that have TD, (b) the most frequently occurring types of TD in them, and (c) the significance of TD against run-time quality attributes. The case study was performed on seven embedded systems industries (telecommunications, printing, smart manufacturing, sensors, etc.) from five countries (Greece, Netherlands, Sweden, Austria, and Finland). The results of the case study suggest that: (a) maintainability is more seriously considered when the expected lifetime of components is larger than ten years, (b) the most frequent types of debt are test, architectural, and code debt, and (c) in embedded systems the run-time qualities are prioritized compared to design-time qualities that are usually associated with TD. The obtained results can be useful for both researchers and practitioners: the former can focus their research on the most industrially-relevant aspects of TD, whereas the latter can be informed about the most common types of TD and how to focus their TDM processes. © 2016 IEEE.},
  doi       = {10.1109/MTD.2016.8},
  groups    = {armandosoaressousa:6},
  isbn      = {9781509038541},
  journal   = {Proceedings - 2016 IEEE 8th International Workshop on Managing Technical Debt, MTD 2016},
  keywords  = {rank3},
  language  = {English},
  ranking   = {rank3},
}

@InProceedings{Das2007,
  author    = {Das, Sumita and Lutters, Wayne G. and Seaman, Carolyn B.},
  booktitle = {Proceedings of the 2007 Symposium on Computer Human Interaction for the Management of Information Technology},
  title     = {Understanding Documentation Value in Software Maintenance},
  year      = {2007},
  address   = {New York, NY, USA},
  publisher = {ACM},
  series    = {CHIMIT '07},
  abstract  = {This study examines effective documentation use in software maintenance. Interviews with software maintainers, with diverse levels of experience, revealed three themes: reliance on source code, characteristics of useful documents, and the interplay between people in the maintenance environment and documentation. All of these findings improve our understanding of the role of documentation in maintenance. This awareness has practical import - project managers can fund the most useful forms of documentation and maintainers can improve their ability to locate and reuse this information.},
  acmid     = {1234790},
  articleno = {2},
  isbn      = {978-1-59593-635-6},
  keywords  = {documentation, software maintenance},
  location  = {Cambridge, Massachusetts},
}

@ARTICLE {Guo2016,
    author                  = {Guo, Y. and Spinola, R.O. and Seaman, C.},
    title                   = {Exploring the costs of technical debt management – a case study},
    journal                 = {Empirical Software Engineering},
    year                    = {2016},
    volume                  = {21},
    number                  = {1},
    pages                   = {159-182},
    note                    = {cited By 7},
    issn                    = {13823256},
    abstract                = {Technical debt is a metaphor for delayed software maintenance tasks. Incurring technical debt may bring short-term benefits to a project, but such benefits are often achieved at the cost of extra work in future, analogous to paying interest on the debt. Currently technical debt is managed implicitly, if at all. However, on large systems, it is too easy to lose track of delayed tasks or to misunderstand their impact. Therefore, we have proposed a new approach to managing technical debt, which we believe to be helpful for software managers to make informed decisions. In this study we explored the costs of the new approach by tracking the technical debt management activities in an on-going software project. The results from the study provided insights into the impact of technical debt management on software projects. In particular, we found that there is a significant start-up cost when beginning to track and monitor technical debt, but the cost of ongoing management soon declines to very reasonable levels. © 2014, Springer Science+Business Media New York.},
    affiliation             = {Department of Information Systems, University of Maryland Baltimore County, Baltimore, MD, United States; Department of Systems and Computing, University of Salvador, Salvador, Bahia, Brazil; Fraunhofer Project Center for Software and System Engineering at Federal University of Bahia, Salvador, Bahia, Brazil},
    coden                   = {ESENF},
    doi                     = {10.1007/s10664-014-9351-7},
    keywords                = {Decision making, Informed decision; Management activities; New approaches; Software managers; Software project; Software-maintenance tasks; Start-up costs; Technical debts, Costs, rank4},
    language                = {English},
    publisher               = {Springer New York LLC},
    source                  = {Scopus}
}

@InCollection{YliHuumo2016a,
  author    = {Jesse Yli-Huumo and Andrey Maglyas and Kari Smolander and Johan Haller and Hannu Törnroos},
  booktitle = {Product-Focused Software Process Improvement},
  publisher = {Springer International Publishing},
  title     = {Developing Processes to Increase Technical Debt Visibility and Manageability: An Action Research Study in Industry},
  year      = {2016},
  pages     = {368--378},
  abstract  = {The knowledge about technical debt and its management has increased in recent years. The interest of academia and industry has generated many viewpoints on technical debt. Technical debt management consists of technical and organizational aspects, which make it a challenge in software development. To increase technical debt visibility and manageability, new processes must be developed and thoroughly empirically tested for their applicability. In this paper, we use the action research methodology to design processes for identification, documentation, and prioritization of technical debt. Our partner in this research is a large Nordic IT company Tieto, currently in a need for new ways to improve their technical debt management. The results include a set of processes and templates that were successfully used to identify and document technical debt. The identified technical debt items were later prioritized based on evaluation by Tieto employees. Tieto was able to create a prioritized technical debt backlog, which is now used for reduction activities to create a healthy and sustainable product for the future.},
  doi       = {10.1007/978-3-319-49094-6_24},
  keywords  = {rank3},
  ranking   = {rank3},
}

@InProceedings{Klinger2011,
  author    = {Klinger, Tim and Tarr, Peri and Wagstrom, Patrick and Williams, Clay},
  booktitle = {Proceedings of the 2Nd Workshop on Managing Technical Debt},
  title     = {An Enterprise Perspective on Technical Debt},
  year      = {2011},
  address   = {New York, NY, USA},
  pages     = {35--38},
  publisher = {ACM},
  series    = {MTD '11},
  abstract  = {Technical debt is a term that has been used to describe the increased cost of changing or maintaining a system due to expedient shortcuts taken during its development. Much of the research on technical debt has focused on decisions made by project architects and individual developers who choose to trade off short-term gain for a longer-term cost. However, in the context of enterprise software development, such a model may be too narrow. We explore the premise that technical debt within the enterprise should be viewed as a tool similar to financial leverage, allowing the organization to incur debt to pursue options that it couldn't otherwise afford. We test this premise by interviewing a set of experienced architects to understand how decisions to acquire technical debt are made within an enterprise, and to what extent the acquisition of technical debt provides leverage. We find that in many cases, the decision to acquire technical debt is not made by technical architects, but rather by non-technical stakeholders who cause the project to acquire new technical debt or discover existing technical debt that wasn't previously visible. We conclude with some preliminary observations and recommendations for organizations to better manage technical debt in the presence of some enterprise-scale circumstances.},
  acmid     = {1985371},
  doi       = {10.1145/1985362.1985371},
  isbn      = {978-1-4503-0586-0},
  keywords  = {extended stakeholders, leverage, technical debt, rank5},
  location  = {Waikiki, Honolulu, HI, USA},
  numpages  = {4},
  ranking   = {rank5},
}

@INPROCEEDINGS {Codabux2013,
    author    = {Codabux, Zadia and Williams, Byron},
    title     = {Managing Technical Debt: An Industrial Case Study},
    booktitle = {Proceedings of the 4th International Workshop on Managing Technical Debt},
    year      = {2013},
    series    = {MTD '13},
    pages     = {8--15},
    address   = {Piscataway, NJ, USA},
    month     = {May},
    publisher = {IEEE Press},
    abstract  = {Technical debt is the consequence of trade-offs made during software development to ensure speedy releases. The research community lacks rigorously evaluated guidelines to help practitioners characterize, manage and prioritize debt. This paper describes a study conducted with an industrial partner during their implementation of Agile development practices for a large software development division within the company. The report contains our initial findings based on ethnographic observations and semi-structured interviews. The goal is to identify the best practices regarding managing technical debt so that the researchers and the practitioners can further evaluate these practices to extend their knowledge of the technical debt metaphor. We determined that the developers considered their own taxonomy of technical debt based on the type of work they were assigned and their personal understanding of the term. Despite management's high-level categories, the developers mostly considered design debt, testing debt and defect debt. In addition to developers having their own taxonomy, assigning dedicated teams for technical debt reduction and allowing other teams about 20% of time per sprint for debt reduction are good initiatives towards lowering technical debt. While technical debt has become a well-regarded concept in the Agile community, further empirical evaluation is needed to assess how to properly apply the concept for various development organizations.},
    acmid     = {2663299},
    doi       = {10.1109/MTD.2013.6608672},
    isbn      = {978-1-4673-6443-0},
    keywords  = {agile methods, industrial case study, scrum, semi-structure interviews, technical debt, rank5},
    location  = {San Francisco, California},
    numpages  = {8}
}

@InProceedings{FernandezSanchez2017,
  author    = {Carlos Fernandez-Sanchez and Hector Humanes and Juan Garbajosa and Jessica Diaz},
  booktitle = {2017 43rd Euromicro Conference on Software Engineering and Advanced Applications ({SEAA})},
  title     = {An Open Tool for Assisting in Technical Debt Management},
  year      = {2017},
  month     = {aug},
  publisher = {IEEE},
  abstract  = {Technical debt monitoring is one of the activities that have to be performed in technical debt management. To do that, there are different techniques that can be used to estimate technical debt and different tools that implement those different techniques. This paper presents TEDMA Tool, a tool for monitoring technical debt over the software evolution and that it is open to integrate third party tools. TEDMA is based on the analysis of source code repositories and is useful for researching using empirical data extracted from software projects. Currently, it is been used to analyze big projects in the execution of several case studies. The expected evolution of TEDMA will make the tool useful for software development industry.},
  keywords  = {rank4},
  ranking   = {rank4},
}

@Article{Mendes2019,
  author    = {Mendes, Thiago S and Gomes, Felipe GS and Gon{\c{c}}alves, David P and Mendon{\c{c}}a, Manoel G and Novais, Renato L and Sp{\'\i}nola, Rodrigo O},
  journal   = {Journal of the Brazilian Computer Society},
  title     = {VisminerTD: a tool for automatic identification and interactive monitoring of the evolution of technical debt items},
  year      = {2019},
  number    = {1},
  pages     = {2},
  volume    = {25},
  abstract  = {Technical debt (TD) contextualizes problems faced during software evolution considering the tasks that are not carried out adequately during software development. Software TD is a type of debt that brings a short-term benefit, but which may have to be paid with interest later on in the software development life cycle. Its presence brings risks to the project and can reduce its quality. It is worthwhile to have automatic mechanisms to monitor it, as TD monitoring requires the analysis of large amounts of complex data. Therefore, the combination of software metrics and code comment analysis, in the identification, and information visualization techniques, in monitoring, present themselves as a promising strategy to manage TD. This work presents VisminerTD, a tool that allows the automatic identification and interactive monitoring of the evolution of TD items by combining software metrics, code comment analysis, and information visualization. To evaluate its applicability, a feasibility study was carried out considering JUnit 4 and Apache Ant software projects. The results indicated that VisminerTD can support software development teams in monitoring TD items. In addition, a second case study was performed to assess the feasibility of the proposed tool regarding its usefulness, ease of use, and self-predicted future use. The results provided positive evidence on the use of the proposed tool, indicating (i) that it can be useful in supporting TD Identification and TD monitoring activities and (ii) that it can bring gains in terms of comprehensiveness and efficacy when evaluating the desirable time to identify and monitor different types of debt. Given the current scenario characterized by limited options of tools that combine different information to support automatic identification and monitoring of the evolution of TD items in software projects, VisminerTD can approximate the state-of-the-art and the state-of-the-practice in the TD area, contributing to a wider dissemination of the concept.},
  keywords  = {rank2},
  publisher = {Springer},
  ranking   = {rank2},
}

@Article{ClayShafer2010,
  author  = {Clay Shafer, Andrew},
  journal = {Cutter IT Journal},
  title   = {Infrastructure Debt: Revisiting the Foundation},
  year    = {2010},
  number  = {10},
  pages   = {36},
  volume  = {23},
}

@InProceedings{Besker2017,
  author    = {T. Besker and A. Martini and J. Bosch},
  booktitle = {2017 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
  title     = {The Pricey Bill of Technical Debt: When and by Whom will it be Paid?},
  year      = {2017},
  month     = {Sept},
  pages     = {13-23},
  abstract  = {Software companies need to support continuous and fast delivery of customer value both in short and a long-term perspective. However, this can be hindered by evolution limitations and high maintenance efforts due to internal software quality issues by what is described as Technical Debt. Although significant theoretical work has been undertaken to describe the negative effects of Technical Debt, these studies tend to have a weak empirical basis and often lack quantitative data. The aim of this study is to estimate wasted time, caused by the Technical Debt interest during the software life-cycle. This study also investigates how practitioners perceive and estimate the impact of the negative consequences due to Technical Debt during the software development process. This paper reports the results of both an online web-survey provided quantitative data from 258 participants and follow-up interviews with 32 industrial software practitioners. The importance and originality of this study contributes and provides novel insights into the research on Technical Debt by quantifying the perceived interest and the negative effects it has on the software development life-cycle. The findings show that on average, 36 percent of all development time is estimated to be wasted due to Technical Debt; Complex Architectural Design and Requirement Technical Debt generates most negative effect; and that most time is wasted on understanding and/or measuring the Technical Debt. Moreover, the analysis of the professional roles and the age of the software system in the survey revealed that different roles are affected differently and that the consequences of Technical Debt are also influenced by the age of the software system.},
  doi       = {10.1109/ICSME.2017.42},
  groups    = {armandosoaressousa:6},
  keywords  = {rank3},
  ranking   = {rank3},
}

@InProceedings{Digkas2018,
  author    = {Georgios Digkas and Mircea Lungu and Paris Avgeriou and Alexander Chatzigeorgiou and Apostolos Ampatzoglou},
  booktitle = {2018 {IEEE} 25th International Conference on Software Analysis, Evolution and Reengineering ({SANER})},
  title     = {How do developers fix issues and pay back technical debt in the Apache ecosystem?},
  year      = {2018},
  month     = {mar},
  publisher = {{IEEE}},
  abstract  = {During software evolution technical debt (TD) follows a constant ebb and flow, being incurred and paid back, sometimes in the same day and sometimes ten years later. There have been several studies in the literature investigating how technical debt in source code accumulates during time and the consequences of this accumulation for software maintenance. However, to the best of our knowledge there are no large scale studies that focus on the types of issues that are fixed and the amount of TD that is paid back during software evolution. In this paper we present the results of a case study, in which we analyzed the evolution of fifty-seven Java open-source software projects by the Apache Software Foundation at the temporal granularity level of weekly snapshots. In particular, we focus on the amount of technical debt that is paid back and the types of issues that are fixed. The findings reveal that a small subset of all issue types is responsible for the largest percentage of TD repayment and thus, targeting particular violations the development team can achieve higher benefits.},
  comment   = {repayment},
  doi       = {10.1109/saner.2018.8330205},
  groups    = {armandosoaressousa:4},
  keywords  = {rank5},
  ranking   = {rank5},
}

@Book{Campbell2013,
  author    = {Campbell, G and Papapetrou, Patroklos P},
  publisher = {Manning Publications Co.},
  title     = {SonarQube in action},
  year      = {2013},
}

@Article{Britto2016,
  author    = {Britto, Ricardo and Smite, Darja and Damm, Lars-Ola},
  journal   = {IEEE Software},
  title     = {Software architects in large-scale distributed projects: An Ericsson case study},
  year      = {2016},
  number    = {6},
  pages     = {48--55},
  volume    = {33},
  abstract  = {Software architects are key assets for successful development projects. However, not much research has investigated the challenges they face in large-scale distributed projects. So, researchers investigated how architects at Ericsson were organized, their roles and responsibilities, and the effort they spent guarding and governing a large-scale legacy product developed by teams at multiple locations. Despite recent trends such as microservices and agile development, Ericsson had to follow a more centralized approach to deal with the challenges of scale, distribution, and monolithic architecture of a legacy software product. So, the architectural decisions were centralized to a team of architects. The team extensively used code reviews to not only check the code's state but also reveal defects that could turn into maintainability problems. The study results also suggest that the effort architects spend designing architecture, guarding its integrity and evolvability, and mentoring development teams is directly related to team maturity. In addition, significant investment is needed whenever new teams and locations are onboarded.},
  keywords  = {rank4},
  publisher = {IEEE},
  ranking   = {rank4},
}

@InProceedings{Avritzer2015,
  author       = {Avritzer, Alberto and Beecham, Sarah and Britto, Ricardo and Kroll, Josiane and Menasche, Daniel Sadoc and Noll, John and Paasivaara, Maria},
  booktitle    = {Global Software Engineering (ICGSE), 2015 IEEE 10th International Conference on},
  title        = {Extending survivability models for global software development with media synchronicity theory},
  year         = {2015},
  organization = {IEEE},
  pages        = {23--32},
  abstract     = {In this paper we propose a new framework to assess
survivability of software projects accounting for media capability
details as introduced in Media Synchronicity Theory (MST).
Specifically, we add to our global engineering framework the
assessment of the impact of inadequate conveyance and convergence available in the communication infrastructure selected to
be used by the project, on the system ability to recover from
project disasters. We propose an analytical model to assess how
the project recovers from project disasters related to process
and communication failures. Our model is based on media
synchronicity theory to account for how information exchange
impacts recovery. Then, using the proposed model we evaluate
how different interventions impact communication effectiveness.
Finally, we parameterize and instantiate the proposed survivability model based on a data gathering campaign comprising thirty
surveys collected from senior global software development experts
at ICGSE’2014 and GSD’2015.},
}

@InProceedings{Britto2016a,
  author       = {Britto, Ricardo and {\v{S}}mite, Darja and Damm, Lars-Ola},
  booktitle    = {Proceedings of the 10th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement},
  title        = {Experiences from measuring learning and performance in large-scale distributed software development},
  year         = {2016},
  organization = {ACM},
  pages        = {17},
  abstract     = {Background: Developers and development teams in large-scale software development are often required to learn continuously. Organizations also face the need to train and support new developers and teams on-boarded in ongoing projects. Although learning is associated with performance improvements, experience shows that training and learning does not always result in a better performance or significant improvements might take too long.

Aims: In this paper, we report our experiences from establishing an approach to measure learning results and associated performance impact for developers and teams in Ericsson.

Method: Experiences reported herein are a part of an exploratory case study of an on-going large-scale distributed project in Ericsson. The data collected for our measurements included archival data and expert knowledge acquired through both unstructured and semi-structured interviews. While performing the measurements, we faced a number of challenges, documented in the form of lessons learned.

Results: We aggregated our experience in eight lessons learned related to collection, preparation and analysis of data for further measurement of learning potential and performance in large-scale distributed software development.

Conclusions: Measuring learning and performance is a challenging task. Major problems were related to data inconsistencies caused by, among other factors, distributed nature of the project. We believe that the documented experiences shared herein can help other researchers and practitioners to perform similar measurements and overcome the challenges of large-scale distributed software projects, as well as proactively address these challenges when establishing project measurement programs.},
}

@Article{Mayring2014,
  author    = {Mayring, Philipp},
  title     = {Qualitative content analysis: theoretical foundation, basic procedures and software solution},
  year      = {2014},
  publisher = {AUT},
}

@Article{Cavanagh1997,
  author   = {Cavanagh, Stephen},
  journal  = {Nurse researcher},
  title    = {Content analysis: concepts, methods and applications.},
  year     = {1997},
  number   = {3},
  pages    = {5--16},
  volume   = {4},
  keywords = {rank3},
  ranking  = {rank3},
}

@Article{Elo2008,
  author    = {Elo, Satu and Kyngas, Helvi},
  journal   = {Journal of advanced nursing},
  title     = {The qualitative content analysis process},
  year      = {2008},
  number    = {1},
  pages     = {107--115},
  volume    = {62},
  abstract  = {Aim. This paper is a description of inductive and deductive content analysis.

Background. Content analysis is a method that may be used with either qualitative or quantitative data and in an inductive or deductive way. Qualitative content analysis is commonly used in nursing studies but little has been published on the analysis process and many research books generally only provide a short description of this method.

Discussion. When using content analysis, the aim was to build a model to describe the phenomenon in a conceptual form. Both inductive and deductive analysis processes are represented as three main phases: preparation, organizing and reporting. The preparation phase is similar in both approaches. The concepts are derived from the data in inductive content analysis. Deductive content analysis is used when the structure of analysis is operationalized on the basis of previous knowledge.

Conclusion. Inductive content analysis is used in cases where there are no previous studies dealing with the phenomenon or when it is fragmented. A deductive approach is useful if the general aim was to test a previous theory in a different situation or to compare categories at different time periods.},
  keywords  = {rank3},
  publisher = {Wiley Online Library},
  ranking   = {rank3},
}

@Book{Runeson2012,
  author    = {Runeson, P. and Host, M. and Rainer, A. and Regnell, B.},
  publisher = {John Wiley Sons},
  title     = {Case Study Research in Software Engineering: Guidelines and Examples},
  year      = {2012},
  isbn      = {978-1118104354},
  keywords  = {rank2},
  ranking   = {rank2},
}

@Book{Trochim2015,
  author    = {Trochim, W. and Donnelly, J. P. and Arora, K.},
  publisher = {Cengage},
  title     = {Research Methods: The Essential Knowledge Base},
  year      = {2015},
  isbn      = {978-1133954774},
  keywords  = {rank3},
  ranking   = {rank3},
}

@Article{Chatterjee1986,
  author    = {Chatterjee, Samprit and Hadi, Ali S},
  journal   = {Statistical Science},
  title     = {Influential observations, high leverage points, and outliers in linear regression},
  year      = {1986},
  pages     = {379--393},
  publisher = {JSTOR},
}

@Book{Fox2015,
  author    = {Fox, John},
  publisher = {Sage Publications},
  title     = {Applied regression analysis and generalized linear models},
  year      = {2015},
}

@Article{Koenker1982,
  author    = {Koenker, Roger and Bassett Jr, Gilbert},
  journal   = {Econometrica: Journal of the Econometric Society},
  title     = {Robust tests for heteroscedasticity based on regression quantiles},
  year      = {1982},
  pages     = {43--61},
  publisher = {JSTOR},
}

@Article{Alin2010,
  author    = {Alin, Aylin},
  journal   = {Wiley Interdisciplinary Reviews: Computational Statistics},
  title     = {Multicollinearity},
  year      = {2010},
  number    = {3},
  pages     = {370--374},
  volume    = {2},
  publisher = {Wiley Online Library},
}

@Article{Carmel2001,
  author    = {Carmel, E. and Agarwal, R.},
  journal   = {IEEE Software},
  title     = {Tactical Approaches for Alleviating Distance in Global Software Development},
  year      = {2001},
  number    = {2},
  pages     = {22--29},
  volume    = {18},
  abstract  = {To overcome the problem of distance in global software development, various managers are experimenting and quickly adjusting their tactical approaches. We discuss some emerging approaches and explain their motivations from conceptual and practical perspectives. The most intuitive approach for alleviating distance is to apply communication technologies, but this is not our focus. Rather, we examine tactics that go beyond communication technologies, tactics aimed at reducing intensive collaboration, national and organizational cultural differences, and temporal distance.},
  acmid     = {626245},
  address   = {Los Alamitos, CA, USA},
  numpages  = {8},
  publisher = {IEEE Computer Society Press},
}

@InProceedings{Tamburri2013,
  author       = {Tamburri, Damian A and Kruchten, Philippe and Lago, Patricia and van Vliet, Hans},
  booktitle    = {2013 6th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE)},
  title        = {What is social debt in software engineering?},
  year         = {2013},
  organization = {IEEE},
  pages        = {93--96},
  abstract     = {“Social debt” in software engineering informally refers to unforeseen project cost connected to a “suboptimal” development community. The causes of suboptimal development communities can be many, ranging from global distance to organisational barriers to wrong or uninformed socio-technical decisions (i.e., decisions that influence both social and technical aspects of software development). Much like technical debt, social debt impacts heavily on software development success. We argue that, to ensure quality software engineering, practitioners should be provided with mechanisms to detect and manage the social debt connected to their development communities. This paper defines and elaborates on social debt, pointing out relevant research paths. We illustrate social debt by comparison with technical debt and discuss common real-life scenarios that exhibit “sub-optimal” development communities.},
  keywords     = {rank3},
  ranking      = {rank3},
}

@InCollection{Seaman2011,
  author    = {Seaman, Carolyn and Guo, Yuepu},
  booktitle = {Advances in Computers},
  publisher = {Elsevier},
  title     = {Measuring and monitoring technical debt},
  year      = {2011},
  pages     = {25--46},
  volume    = {82},
  abstract  = {Technical debt is a metaphor for immature, incomplete, or inadequate artifacts in the software development lifecycle that cause higher costs and lower quality in the long run. These artifacts remaining in a system affect subsequent development and maintenance activities, and so can be seen as a type of debt that the system developers owe the system. Incurring technical debt may speed up software development in the short run, but such benefit is achieved at the cost of extra work in the future, as if paying interest on the debt. In this sense, the technical debt metaphor characterizes the relationship between the short-term benefits of delay- ing certain software maintenance tasks or doing them quickly and less carefully, and the long-term cost of those delays. However, managing technical debt is more complicated than managing financial debt because of the uncertainty involved. In this chapter, the authors review the main issues associated with technical debt, and propose a technical debt management framework and a research plan for validation. The objective of our research agenda is to develop and validate a comprehensive technical debt theory that formalizes the relationship between the cost and benefit sides of the concept. Further, we propose to use the theory to propose mechanisms (processes and tools) for measuring and managing technical debt in software product maintenance. The theory and management mechanisms are intended ultimately to contribute to the improved quality of software and facilitate decision making in software maintenance.},
  keywords  = {rank3},
  ranking   = {rank3},
}

@Article{Lehtola2006,
  author    = {Lehtola, Laura and Kauppinen, Marjo},
  journal   = {Software Process: Improvement and Practice},
  title     = {Suitability of requirements prioritization methods for market-driven software product development},
  year      = {2006},
  number    = {1},
  pages     = {7--19},
  volume    = {11},
  abstract  = {In a company producing off‐the‐shelf software for mass markets, the future development steps of the products cannot be negotiated with one or few customers. The decisions concerning the priorities of the requirements must be made within the company, the developer bearing all the financial risks included. This means that finding the right priorities for the requirements is important. However, requirements prioritization is recognized as a difficult activity in software product development. The literature offers methods for requirements prioritization, but many authors report that practices in companies are mostly informal. In this study, we evaluated two requirements prioritization methods in industrial product development projects. In the first case, the users of the system evaluated the pair‐wise comparison technique for prioritizing user needs. In the second case, practitioners evaluated Wiegers' method for change requests. In addition, we interviewed 11 practitioners from 6 companies about their current requirements prioritization practices and the models that they use as a basis of their prioritization decisions. Our findings indicate that prioritization methods may have limited ability to support decision‐making in a complex area like requirements prioritization in market‐driven product development. In addition, there are practical difficulties in the usage of methods, and therefore, prioritization results should be taken more as being indicative than as an ultimate truth. Copyright © 2006 John Wiley & Sons, Ltd.},
  keywords  = {rank2},
  publisher = {Wiley Online Library},
  ranking   = {rank2},
}

@InProceedings{Davis2013,
  author       = {Davis, Noopur},
  booktitle    = {Agile Conference (AGILE), 2013},
  title        = {Driving quality improvement and reducing technical debt with the definition of done},
  year         = {2013},
  organization = {IEEE},
  pages        = {164--168},
  abstract     = {This paper describes our experiences in using the Scrum concept of Definition of Done to drive quality improvements and reduce technical debt. We also describe how the Definition of Done can be a vehicle to implement standards, use checklists, and introduce compliance measures in the Agile development process.},
}

@Article{Lim2012,
  author    = {Lim, Erin and Taksande, Nitin and Seaman, Carolyn},
  journal   = {IEEE software},
  title     = {A balancing act: what software practitioners have to say about technical debt},
  year      = {2012},
  number    = {6},
  pages     = {22--27},
  volume    = {29},
  abstract  = {An interview study involving 35 practitioners from a variety of domains aimed to characterize technical debt at the ground level to find out how software practitioners perceive it. The study also aimed to understand the context in which technical debt occurs, including its causes, symptoms, and effects. In addition, the study focused on how practitioners currently deal with technical debt. This analysis paints a picture of a large, complex balancing act of various short- and long-term concerns. The Web Extra gives the interview questions used by Erin Lim, Nitin Taksande, and Carolyn Seaman.},
  publisher = {IEEE},
}

@Article{Kruchten2012,
  author    = {Kruchten, Philippe and Nord, Robert L and Ozkaya, Ipek},
  journal   = {Ieee software},
  title     = {Technical debt: From metaphor to theory and practice},
  year      = {2012},
  number    = {6},
  pages     = {18--21},
  volume    = {29},
  abstract  = {The meTaphor of technical debt in software development was introduced two decades ago by Ward Cunningham1 to explain to nontechnical product stakeholders the need for what we call now “refactoring.” It has been refined and expanded since, notably by Steve McConnell in his taxonomy,2 Martin Fowler with his four quadrants,3 and Jim Highsmith and his colleagues from the Cutter Consortium with their model. of the impact of technical debt on the total cost of ownership. From the original description—“not quite right code which we postpone making it right”1—various people have used the metaphor of technical “debt” to describe many other kinds of debts or ills of software development, encom- passing broadly anything that stands in the way of deploying, selling, or evolv- ing a software system or anything that adds to the friction from which soft- ware development endeavors suffer: test debt, people debt, architectural debt, requirement debt, documenta- tion debt, or just an amorphous, all- encompassing software debt.5 Conse- quently, the concept of technical debt. in software development has become somewhat diluted lately. Is a new re- quirement, function, or feature not yet implemented “requirement debt”? Do we call postponing the development of a new function “planning debt”? The metaphor is losing some of its strength.},
  keywords  = {rank4},
  publisher = {IEEE},
  ranking   = {rank4},
}

@InProceedings{Guo2011,
  author       = {Guo, Yuepu and Seaman, Carolyn},
  booktitle    = {Proceedings of the 2nd Workshop on Managing Technical Debt},
  title        = {A portfolio approach to technical debt management},
  year         = {2011},
  organization = {ACM},
  pages        = {31--34},
  abstract     = {Technical debt describes the effect of immature software artifacts on software maintenance - the potential of extra effort required in future as if paying interest for the incurred debt. The uncertainty of interest payment further complicates the problem of what debt should be incurred or repaid and when. To help software managers make informed decisions, a portfolio approach is proposed in this paper. The approach leverages the portfolio management theory in the finance domain to determine the optimal collection of technical debt items that should be incurred or held. We expect this approach could provide a new perspective for technical debt management.},
  keywords     = {rank3},
  ranking      = {rank3},
}

@InProceedings{Besker2019,
  author       = {Besker, Terese and Martini, Antonio and Bosch, Jan},
  booktitle    = {2019 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  title        = {Technical debt triage in backlog management},
  year         = {2019},
  organization = {IEEE},
  pages        = {13--22},
  abstract     = {Remediation of technical debt through regular refactoring initiatives is considered vital for the software system's long and healthy life. However, since today's software companies face increasing pressure to deliver customer value continuously, the balance between spending developer time, effort, and resources on implementing new features or spending it on refactoring of technical debt becomes vital. The goal of this study is to explore how the prioritization of technical debt is carried out by practitioners within today's software industry. This study also investigates what factors influence the prioritization process and its related challenges. This paper reports the results of surveying 17 software practitioners, together with follow-up interviews with them. Our results show that there is no uniform way of prioritizing technical debt and that it is commonly done reactively without applying any explicit strategies. Often, technical debt issues are managed and prioritized in a shadow backlog, separate from the official sprint backlog. This study was also able to identify several different challenges related to prioritizing technical debt, such as the lack of quantitative information about the technical debt items and that the refactoring of technical debt issues competes with the implementation of customer requirements.},
  keywords     = {rank4},
  ranking      = {rank4},
}

@Article{Kitchenham2007,
  author    = {Kitchenham, Barbara and Charters, Stuart},
  title     = {Guidelines for performing systematic literature reviews in software engineering},
  year      = {2007},
  keywords  = {rank3},
  publisher = {Citeseer},
  ranking   = {rank3},
}

@InProceedings{Petersen2008,
  author    = {Petersen, Kai and Feldt, Robert and Mujtaba, Shahid and Mattsson, Michael},
  booktitle = {12th International Conference on Evaluation and Assessment in Software Engineering (EASE) 12},
  title     = {Systematic mapping studies in software engineering},
  year      = {2008},
  pages     = {1--10},
  abstract  = {BACKGROUND: A software engineering systematic map is a defined method to build a classification scheme and structure a software engineering field of interest. The analysis of results focuses on frequencies of publications for categories within the scheme. Thereby, the coverage of the research field can be determined. Different facets of the scheme can also be combined to answer more specific research questions.

OBJECTIVE: We describe how to conduct a systematic mapping study in software engineering and provide guidelines. We also compare systematic maps and systematic reviews to clarify how to chose between them. This comparison leads to a set of guidelines for systematic maps.

METHOD: We have defined a systematic mapping process and applied it to complete a systematic mapping study. Furthermore, we compare systematic maps with systematic reviews by systematically analyzing existing systematic reviews.

RESULTS: We describe a process for software engineering systematic mapping studies and compare it to systematic reviews. Based on this, guidelines for conducting systematic maps are defined.

CONCLUSIONS: Systematic maps and reviews are different in terms of goals, breadth, validity issues and implications. Thus, they should be used complementarily and require different methods (e.g., for analysis).},
  keywords  = {rank4},
  ranking   = {rank4},
}

@Article{Perry1992,
  author    = {Perry, Dewayne E and Wolf, Alexander L},
  journal   = {ACM SIGSOFT Software engineering notes},
  title     = {Foundations for the study of software architecture},
  year      = {1992},
  number    = {4},
  pages     = {40--52},
  volume    = {17},
  abstract  = {The purpose of this paper is to build the foundation for software architecture. We first develop an intuition for software architecture by appealing to several well-established architectural disciplines. On the basis of this intuition, we present a model of software architecture that consists of three components: elements, form, and rationale. Elements are either processing, data, or connecting elements. Form is defined in terms of the properties of, and the relationships among, the elements --- that is, the constraints on the elements. The rationale provides the underlying basis for the architecture in terms of the system constraints, which most often derive from the system requirements. We discuss the components of the model in the context of both architectures and architectural styles and present an extended example to illustrate some important architecture and style considerations. We conclude by presenting some of the benefits of our approach to software architecture, summarizing our contributions, and relating our approach to other current work.},
  keywords  = {rank5},
  publisher = {ACM New York, NY, USA},
  ranking   = {rank5},
}

@Book{Taylor2009,
  author    = {Taylor, Richard N and Medvidovic, Nenad and Dashofy, Eric},
  publisher = {John Wiley \& Sons},
  title     = {Software architecture: foundations, theory, and practice},
  year      = {2009},
  abstract  = {Software architecture has become a centerpiece subject for software engineers, both researchers and practitioners alike. At the heart of every software system is its software architecture, i.e., "the set of principal design decisions about the system". Architecture permeates all major facets of a software system, for principal design decisions may potentially be made at any time during a system's lifetime, and potentially by any stakeholder. Such decisions encompass structural concerns, such as the system's high-level building blocks -components, connectors, and configurations; the system's deployment; the system's non-functional properties; and the system's evolution patterns, including runtime adaptation. Software architectures found particularly useful for families of systems - product lines - are often codified into architectural patterns, architectural styles, and reusable, parameterized reference architectures. This tutorial affords the participant an extensive treatment of the field of software architecture, its foundation, principles, and elements, including those mentioned above. Additionally, the tutorial introduces the participants to the state-of-the-art as well as the state-of-the-practice in software architecture, and looks at emerging and likely future trends in this field. The discussion is illustrated with numerous real-world examples. One example given prominent treatment is the architecture of the World Wide Web and its underlying architectural style, REpresentational State Transfer (REST).},
  keywords  = {rank4},
  ranking   = {rank4},
}

@Article{Besker2018,
  author    = {Besker, Terese and Martini, Antonio and Bosch, Jan},
  journal   = {Journal of Systems and Software},
  title     = {Managing architectural technical debt: A unified model and systematic literature review},
  year      = {2018},
  pages     = {1--16},
  volume    = {135},
  abstract  = {Large Software Companies need to support the continuous and fast delivery of customer value in both the short and long term. However, this can be impeded if the evolution and maintenance of existing systems is hampered by what has been recently termed Technical Debt (TD). Specifically, Architectural TD has re- ceived increased attention in the last few years due to its significant impact on system success and, left unchecked, it can cause expensive repercussions. It is therefore important to understand the underlying factors of architectural TD. With this as background, there is a need for a descriptive model to illustrate and explain different architectural TD issues. The aim of this study is to synthesize and compile research efforts with the goal of creating new knowledge with a specific interest in the architectural TD field. The contribution of this paper is the presentation of a novel descriptive model, providing a comprehensive interpretation of the architectural TD phenomenon. This model categorizes the main characteristics of architectural TD and reveals their relations. The results show that, by using this model, different stake- holders could increase the system’s success rate, and lower the rate of negative consequences, by raising awareness about architectural TD.},
  keywords  = {rank5},
  publisher = {Elsevier},
  ranking   = {rank5},
}

@InProceedings{Martini2015,
  author       = {Martini, Antonio and Bosch, Jan},
  booktitle    = {2015 12th Working IEEE/IFIP Conference on Software Architecture},
  title        = {The danger of architectural technical debt: Contagious debt and vicious circles},
  year         = {2015},
  organization = {IEEE},
  pages        = {1--10},
  abstract     = {A known problem in large software companies is to balance the prioritization of short-term with long-term viability. Specifically, architecture violations (Architecture Technical Debt) taken to deliver fast might hinder future feature development. However, some technical debt requires more interest to be paid than other. We have investigated which Technical Debt items generate more effort and how this effort is manifested during software development. We conducted a multiple-case embedded case study comprehending 7 sites at 5 large international software companies. We found that some Technical Debt items are contagious, causing other parts of the system to be contaminated with the same problem, which may lead to non-linear growth of interest. We also identify another socio-technical phenomenon, for which a combination of weak awareness of debt, time pressure and refactoring creates Vicious Circles of events during the development. Such phenomena need to be identified and stopped before the development is led to a crisis point. Finally, this paper presents a taxonomy of the most dangerous items identified during the qualitative investigation and a model of their effects that can be used for prioritization, for further investigation and as a quality model for extracting more precise and context-specific metrics.},
  keywords     = {rank4},
  ranking      = {rank4},
}

@Article{Li2015a,
  author    = {Li, Zengyang and Avgeriou, Paris and Liang, Peng},
  journal   = {Journal of Systems and Software},
  title     = {A systematic mapping study on technical debt and its management},
  year      = {2015},
  pages     = {193--220},
  volume    = {101},
  abstract  = {Context
Technical debt (TD) is a metaphor reflecting technical compromises that can yield short-term benefit but may hurt the long-term health of a software system.

Objective
This work aims at collecting studies on TD and TD management (TDM), and making a classification and thematic analysis on these studies, to obtain a comprehensive understanding on the TD concept and an overview on the current state of research on TDM.

Method
A systematic mapping study was performed to identify and analyze research on TD and its management, covering publications between 1992 and 2013.

Results
Ninety-four studies were finally selected. TD was classified into 10 types, 8 TDM activities were identified, and 29 tools for TDM were collected.

Conclusions
The term “debt” has been used in different ways by different people, which leads to ambiguous interpretation of the term. Code-related TD and its management have gained the most attention. There is a need for more empirical studies with high-quality evidence on the whole TDM process and on the application of specific TDM approaches in industrial settings. Moreover, dedicated TDM tools are needed for managing various types of TD in the whole TDM process.},
  keywords  = {rank5},
  publisher = {Elsevier},
  ranking   = {rank5},
}

@InProceedings{Nord2012,
  author       = {Nord, Robert L and Ozkaya, Ipek and Kruchten, Philippe and Gonzalez-Rojas, Marco},
  booktitle    = {2012 Joint Working IEEE/IFIP Conference on Software Architecture and European Conference on Software Architecture},
  title        = {In search of a metric for managing architectural technical debt},
  year         = {2012},
  organization = {IEEE},
  pages        = {91--100},
  abstract     = {Practices designed to expedite the delivery of stakeholder value can paradoxically lead to unexpected rework costs that ultimately degrade the flow of value over time. This is especially observable when features are developed based on immediate value, while dependencies that may slow down future development efforts are neglected. The technical debt metaphor conceptualizes this tradeoff between short-term and long-term value: taking shortcuts to optimize the delivery of features in the short term incurs debt, analogous to financial debt, that must be paid off later to optimize long-term success. In this paper, we describe taking an architecture-focused and measurement-based approach to develop a metric that assists in strategically managing technical debt. Such an approach can be used to optimize the cost of development over time while continuing to deliver value to the customer. We demonstrate our approach by describing its application to an ongoing system development effort.},
  keywords     = {rank5},
  ranking      = {rank5},
}

@Book{Fleiss2013,
  author    = {Fleiss, Joseph L and Levin, Bruce and Paik, Myunghee Cho},
  publisher = {john wiley \& sons},
  title     = {Statistical methods for rates and proportions},
  year      = {2013},
}

@InProceedings{Verdecchia2018,
  author       = {Verdecchia, Roberto and Malavolta, Ivano and Lago, Patricia},
  booktitle    = {2018 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  title        = {Architectural technical debt identification: The research landscape},
  year         = {2018},
  organization = {IEEE},
  pages        = {11--20},
  abstract     = {Architectural Technical Debt (ATD) regards sub-optimal design decisions that bring short-term benefits to the cost of long-term gradual deterioration of the quality of the architecture of a software system. The identification of ATD strongly in uences the technical and economic sustainability of software systems and is attracting growing interest in the scientific community. During the years several approaches for ATD identification have been conceived, each of them addressing ATD from diferent perspectives and with heterogeneous characteristics. In this paper we apply the systematic mapping study methodology for identifying, classifying, and evaluating the state of the art on ATD identification from the following three perspectives: publication trends, characteristics, and potential for industrial adoption. Specically, starting from a set of 509 potentially relevant studies, we systematically selected 47 primary studies and analyzed them according to a rigorously-de ned classification framework. The analysis of the obtained results supports both researchers and practitioners by providing (i) an assessment of current research trends and gaps in ATD identification, (ii) a solid foundation for understanding existing (and future) research on ATD identification, and (iii) a rigorous evaluation of its potential for industrial adoption.},
  keywords     = {rank5},
  ranking      = {rank5},
}

@Article{Usman2017,
  author    = {Usman, Muhammad and Britto, Ricardo and B{\"o}rstler, J{\"u}rgen and Mendes, Emilia},
  journal   = {Information and Software Technology},
  title     = {Taxonomies in software engineering: A systematic mapping study and a revised taxonomy development method},
  year      = {2017},
  pages     = {43--59},
  volume    = {85},
  abstract  = {Context: Software Engineering (SE) is an evolving discipline with new subareas being continuously developed and added. To structure and better understand the SE body of knowledge, taxonomies have been proposed in all SE knowledge areas.

Objective: The objective of this paper is to characterize the state-of-the-art research on SE taxonomies.

Method: A systematic mapping study was conducted, based on 270 primary studies.

Results: An increasing number of SE taxonomies have been published since 2000 in a broad range of venues, including the top SE journals and conferences. The majority of taxonomies can be grouped into the following SWEBOK knowledge areas: construction (19.55%), design (19.55%), requirements (15.50%) and maintenance (11.81%). Illustration (45.76%) is the most frequently used approach for taxonomy validation. Hierarchy (53.14%) and faceted analysis (39.48%) are the most frequently used classification structures. Most taxonomies rely on qualitative procedures to classify subject matter instances, but in most cases (86.53%) these procedures are not described in sufficient detail. The majority of the taxonomies (97%) target unique subject matters and many taxonomy-papers are cited frequently. Most SE taxonomies are designed in an ad-hoc way. To address this issue, we have revised an existing method for developing taxonomies in a more systematic way.

Conclusion: There is a strong interest in taxonomies in SE, but few taxonomies are extended or revised. Taxonomy design decisions regarding the used classification structures, procedures and descriptive bases are usually not well described and motivated.},
  publisher = {Elsevier},
}

@Article{Pai2004,
  author   = {Pai, Madhukar and McCulloch, Michael and Gorman, Jennifer D and Pai, Nitika and Enanoria, Wayne and Kennedy, Gail and Tharyan, Prathap and Colford, Jr JM},
  journal  = {The National medical journal of India},
  title    = {Systematic reviews and meta-analyses: an illustrated, step-by-step guide.},
  year     = {2004},
  number   = {2},
  pages    = {86--95},
  volume   = {17},
  abstract = {Systematic reviews and meta-analyses synthesize data from existing primary research, and well-conducted reviews offer clinicians a practical solution to the problem of staying current in their fields of interest. A whole generation of secondary journals, pre-appraised evidence libraries and periodically updated electronic texts are now available to clinicians. However, not all systematic reviews are of high quality, and it is important to be able to critically assess their validity and applicability. This article is an illustrated guide for conducting systematic reviews. A clear understanding of the process will provide clinicians with the tools to judiciously appraise reviews and interpret them. We hope that it will enable clinicians to conduct systematic reviews, generate high-quality evidence, and contribute to the evidence-based medicine movement.},
  keywords = {rank3},
  ranking  = {rank3},
}

@Article{Wieringa2006,
  author    = {Wieringa, Roel and Maiden, Neil and Mead, Nancy and Rolland, Colette},
  journal   = {Requirements engineering},
  title     = {Requirements engineering paper classification and evaluation criteria: a proposal and a discussion},
  year      = {2006},
  number    = {1},
  pages     = {102--107},
  volume    = {11},
  abstract  = {In recent years, members of the steering committee of the IEEE Requirements Engineering (RE) Conference have discussed paper classification and evaluation criteria for RE papers. The immediate trigger for this discussion was our concern about differences in opinion that sometimes arise in program committees about the criteria to be used in evaluating papers. If program committee members do not all use the same criteria, or if they use criteria different from those used by authors, then papers might be rejected or accepted for the wrong reasons. Surely not all papers should be evaluated according to the same criteria. Some papers describe new techniques but do not report on empirical research; others describe new conceptual frameworks for investigating certain RE problems; others report on industrial experience with existing RE techniques. Other kinds of papers can also be easily recognized. All of these types of papers should be evaluated according to different criteria. But we are far from a consensus about what classes of paper we should distinguish, and what the criteria are for each of these classes.

We see a variety of evaluation criteria in journals too. At one extreme is the set of nine genres used by IEEE Software [15], all of which have different evaluation criteria. At the other extreme is the single paper class recognized by the Requirements Engineering Journal, which has the following evaluation criteria: originality, utility, technical contribution, and relation to previous work. Apparently, the only paper class recognized by the Requirements Engineering Journal is a paper describing an original and useful solution technique. This corresponds to the “how to” genre of IEEE Software. This leaves authors and reviewers for the Requirements Engineering Journal in the dark about how other classes of papers should be judged, such as experience reports, empirical studies, or tutorials, none of which describe an original technique. This might lead to the use, by reviewers, of evaluation criteria unknown to authors, or even to the use of mutually inconsistent evaluation criteria by different reviewers of the same submission.

The calls for papers of successive RE conferences, in which some of us acted as program chair, show an evolution of paper classification and evaluation schemes. Each scheme was based on the experience of the previous chair, and we tried to pass on our experience to the next chair. We also discussed our ideas with other members of the Steering Committee of the RE conferences, and with RE researchers outside the Steering Committee. This short note presents the outcome of those discussions in the form of a proposal for paper classification and a set of evaluation criteria for different paper classes. We hope to include more people in the discussion and thereby further improve the classification and evaluation scheme.

In Section 2, we sketch the rationale for our classification. Section 3 presents the classification, and Section 4 concludes with a discussion of background ideas and related work.},
  keywords  = {rank3},
  publisher = {Springer},
  ranking   = {rank3},
}

@InProceedings{Martini2016,
  author       = {Martini, Antonio and Bosch, Jan},
  booktitle    = {2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C)},
  title        = {An empirically developed method to aid decisions on architectural technical debt refactoring: AnaConDebt},
  year         = {2016},
  organization = {IEEE},
  pages        = {31--40},
  abstract     = {Architectural Technical Debt is regarded as sub-optimal architectural solutions that need to be refactored in order to avoid the payment of a costly interest in the future. However, decisions on if and when to refactor architecture are extremely important and difficult to take, since changing software at the architectural level is quite expensive. Therefore it is important, for software organizations, to have methods and tools that aid architects and managers to understand if Architecture Technical Debt will generate a costly and growing interest to be paid or not. Current knowledge, especially empirically developed and evaluated, is quite scarce. In this paper we developed and evaluated a method, AnaConDebt, by analyzing, together with several practitioners, 12 existing cases of Architecture Debt in 6 companies. The method has been refined several times in order to be useful and effective in practice. We also report the evaluation of the method with a final case, for which we present anonymized results and subsequent refactoring decisions. The method consists of several components that need to be analyzed, combining the theoretical Technical Debt framework and the practical experience of the practitioners, in order to identify the key factors involved in the growth of interest. The output of the method shows summarized indicators that visualizes the factors in a useful way for the stakeholders. This analysis aids the practitioners in deciding on if and when to refactor Architectural Technical Debt items. The method has been evaluated and has been proven useful to support the architects into systematically analyze and decide upon a case.},
  keywords     = {rank5},
  ranking      = {rank5},
}

@InProceedings{Brown2010,
  author    = {Brown, Nanette and Cai, Yuanfang and Guo, Yuepu and Kazman, Rick and Kim, Miryung and Kruchten, Philippe and Lim, Erin and MacCormack, Alan and Nord, Robert and Ozkaya, Ipek and others},
  booktitle = {Proceedings of the FSE/SDP workshop on Future of software engineering research},
  title     = {Managing technical debt in software-reliant systems},
  year      = {2010},
  pages     = {47--52},
  abstract  = {Delivering increasingly complex software-reliant systems demands better ways to manage the long-term effects of short- term expedients. The technical debt metaphor is gaining significant traction in the agile development community as a way to understand and communicate such issues. The idea is that developers sometimes accept compromises in a system in one dimension (e.g., modularity) to meet an urgent demand in some other dimension (e.g., a deadline), and that such compromises incur a “debt”: on which “interest” has to be paid and which the “principal” should be repaid at some point for the long-term health of the project. We argue that the software engineering research community has an opportunity to study and improve this concept. We can offer software engineers a foundation for managing such trade-offs based on models of their economic impacts. Therefore, we propose managing technical debt as a part of the future research agenda for the software engineering field.},
  keywords  = {rank4},
  ranking   = {rank4},
}

@InCollection{Li2014,
  author    = {Li, Zengyang and Liang, Peng and Avgeriou, Paris},
  booktitle = {Economics-Driven Software Architecture},
  publisher = {Elsevier},
  title     = {Architectural debt management in value-oriented architecting},
  year      = {2014},
  pages     = {183--204},
  abstract  = {Architectural technical debt (ATD) may be incurred when making architecture decisions. In most cases, ATD is not effectively managed in the architecting process: It is not made explicit, and architecture decision making does not consider the ATD incurred by the different design options. This chapter proposes a conceptual model of ATD and an architectural technical debt management process applying this ATD conceptual model in order to facilitate decision making in a value-oriented perspective of architecting. We also demonstrate how ATD management can be employed in architectural synthesis and evaluation in a case study. The contribution of this work provides a controllable and predictable balance between the value and cost of architecture design in the long term.},
  keywords  = {rank5},
  ranking   = {rank5},
}

@Article{Tom2013,
  author    = {Tom, Edith and Aurum, Ayb{\"u}Ke and Vidgen, Richard},
  journal   = {Journal of Systems and Software},
  title     = {An exploration of technical debt},
  year      = {2013},
  number    = {6},
  pages     = {1498--1516},
  volume    = {86},
  abstract  = {Context
Whilst technical debt is considered to be detrimental to the long term success of software development, it appears to be poorly understood in academic literature. The absence of a clear definition and model for technical debt exacerbates the challenge of its identification and adequate management, thus preventing the realisation of technical debt's utility as a conceptual and technical communication device.

Objective
To make a critical examination of technical debt and consolidate understanding of the nature of technical debt and its implications for software development.

Method
An exploratory case study technique that involves multivocal literature review, supplemented by interviews with software practitioners and academics to establish the boundaries of the technical debt phenomenon.

Result
A key outcome of this research is the creation of a theoretical framework that provides a holistic view of technical debt comprising a set of technical debts dimensions, attributes, precedents and outcomes, as well as the phenomenon itself and a taxonomy that describes and encompasses different forms of the technical debt phenomenon.

Conclusion
The proposed framework provides a useful approach to understanding the overall phenomenon of technical debt for practical purposes. Future research should incorporate empirical studies to validate heuristics and techniques that will assist practitioners in their management of technical debt.},
  keywords  = {rank4},
  publisher = {Elsevier},
  ranking   = {rank4},
}

@Article{Curtis2012,
  author    = {Curtis, Bill and Sappidi, Jay and Szynkarski, Alexandra},
  journal   = {IEEE software},
  title     = {Estimating the principal of an application's technical debt},
  year      = {2012},
  number    = {6},
  pages     = {34--42},
  volume    = {29},
  abstract  = {This article characterizes technical debt across 700 business applications, comprising 357 MLOC. These applications were analyzed against more than 1,200 rules of good architectural and coding practice. The authors present a formula with adjustable parameters for estimating the principal of technical debt from structural quality data.},
  keywords  = {rank5},
  publisher = {IEEE},
  ranking   = {rank5},
}

@InProceedings{Potdar2014,
  author       = {Potdar, Aniket and Shihab, Emad},
  booktitle    = {2014 IEEE International Conference on Software Maintenance and Evolution},
  title        = {An exploratory study on self-admitted technical debt},
  year         = {2014},
  organization = {IEEE},
  pages        = {91--100},
  abstract     = {Throughout a software development life cycle, developers knowingly commit code that is either incomplete, requires rework, produces errors, or is a temporary workaround. Such incomplete or temporary workarounds are commonly referred to as 'technical debt'. Our experience indicates that self-admitted technical debt is common in software projects and may negatively impact software maintenance, however, to date very little is known about them. Therefore, in this paper, we use source-code comments in four large open source software projects-Eclipse, Chromium OS, Apache HTTP Server, and ArgoUML to identify self-admitted technical debt. Using the identified technical debt, we study 1) the amount of self-admitted technical debt found in these projects, 2) why this self-admitted technical debt was introduced into the software projects and 3) how likely is the self-admitted technical debt to be removed after their introduction. We find that the amount of self-admitted technical debt exists in 2.4%-31% of the files. Furthermore, we find that developers with higher experience tend to introduce most of the self-admitted technical debt and that time pressures and complexity of the code do not correlate with the amount of self-admitted technical debt. Lastly, although self-admitted technical debt is meant to be addressed or removed in the future, only between 26.3%-63.5% of self-admitted technical debt gets removed from projects after introduction.},
  keywords     = {rank3},
  ranking      = {rank3},
}

% Architectural Smells

@Article{Sharma2020,
  author    = {Sharma, Tushar and Singh, Paramvir and Spinellis, Diomidis},
  journal   = {Empirical Software Engineering},
  title     = {An empirical investigation on the relationship between design and architecture smells},
  year      = {2020},
  number    = {5},
  pages     = {4020--4068},
  volume    = {25},
  abstract  = {Context:
Architecture of a software system represents the key design decisions and therefore its quality plays an important role to keep the software maintainable. Code smells are indicators of quality issues in a software system and are classified based on their granularity, scope, and impact. Despite a plethora of existing work on smells, a detailed exploration of architecture smells, their characteristics, and their relationships with smells in other granularities is missing.

Objective:
The paper aims to study architecture smells characteristics, investigate correlation, collocation, and causation relationships between architecture and design smells.

Method:
We implement smell detection support for seven architecture smells. We mine 3 073 open-source repositories containing more than 118 million lines of C# code and empirically investigate the relationships between seven architecture and 19 design smells.

Results:
We find that smell density does not depend on repository size. Cumulatively, architecture smells are highly correlated with design smells. Our collocation analysis finds that the majority of design and architecture smell pairs do not exhibit collocation. Finally, our causality analysis reveals that design smells cause architecture smells.},
  publisher = {Springer},
}

% Comformance checking

@InProceedings{Knodel2006,
  author       = {Knodel, Jens and Lindvall, Mikael and Muthig, Dirk and Naab, Matthias},
  booktitle    = {Conference on Software Maintenance and Reengineering (CSMR'06)},
  title        = {Static evaluation of software architectures},
  year         = {2006},
  organization = {IEEE},
  pages        = {10--pp},
  abstract     = {The software architecture is one of the most crucial artifacts within the lifecycle of a software system. Decisions made at the architectural level directly enable, facilitate, hamper, or interfere with the achievement of business goals, functional and quality requirements. Architecture evaluations play an important role in the development and evolution of software systems since they determine how adequate the architecture is for its intended usage. This paper summarizes our practical experience with using architecture evaluations and gives an overview on when and how static architecture evaluations contribute to architecture development. We identify ten distinct purposes and needs for static architecture evaluations and illustrate them using a set of industrial and academic case studies. In particular, we show how subsequent steps in architecture development are influenced by the results from architecture evaluations},
  keywords     = {rank4},
  ranking      = {rank4},
}

@Article{Brooks1974,
  author   = {Brooks, Frederick P},
  journal  = {Datamation},
  title    = {The mythical man-month},
  year     = {1974},
  number   = {12},
  pages    = {44--52},
  volume   = {20},
  abstract = {The more complex is a problem, it does not always put more people to help solve the problem.},
  keywords = {rank3},
  ranking  = {rank3},
}

@Book{Kruchten2019,
  author    = {Kruchten, Philippe and Nord, Robert and Ozkaya, Ipek},
  publisher = {Addison-Wesley Professional},
  title     = {Managing Technical Debt: Reducing Friction in Software Development},
  year      = {2019},
  keywords  = {rank5},
  ranking   = {rank5},
}

@InProceedings{Eliasson2015,
  author       = {Eliasson, Ulf and Martini, Antonio and Kaufmann, Robert and Odeh, Sam},
  booktitle    = {2015 IEEE 7th International Workshop on Managing Technical Debt (MTD)},
  title        = {Identifying and visualizing Architectural Debt and its efficiency interest in the automotive domain: A case study},
  year         = {2015},
  organization = {IEEE},
  pages        = {33--40},
  abstract     = {Architectural Technical Debt has recently received the attention of the scientific community, as a suitable metaphor for describing sub-optimal architectural solutions having short- term benefits but causing a long-term negative impact. We study such phenomenon in the context of Volvo Car Group, where the development of modern cars includes complex systems with mechanical components, electronics and software working together in a complicated network to perform an increasing number of functions and meet the demands of many customers. This puts high requirements on having an architecture and design that can handle these demands. Therefore, it is of utmost importance to manage Architecture Technical Debt, in order to make sure that the advantages of sub-optimal solutions do not lead to the payment of a large interest. We conducted a case study at Volvo Car Group and we discovered that architectural violations in the detailed design had an impact on the efficiency of the communication between components, which is an essential quality in cars and other embedded systems. Such interest is not studied in literature, which usually focuses on the maintainability aspects of Technical Debt. To explore how this Architectural Technical Debt and its interest could be communicated to stakeholders, we developed a visual tool. We found that not only was the Architectural Debt highly interesting for the architects and other stakeholders at VCG, but the proposed visualization was useful in increasing the awareness of the impact that Architectural Technical Debt had on efficiency.},
  keywords     = {rank4},
  ranking      = {rank4},
}

@InProceedings{Xiao2014,
  author    = {Xiao, Lu and Cai, Yuanfang and Kazman, Rick},
  booktitle = {Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
  title     = {Titan: A toolset that connects software architecture with quality analysis},
  year      = {2014},
  pages     = {763--766},
  abstract  = {In this tool demo, we will illustrate our tool---Titan---that supports a new architecture model: design rule spaces (DRSpaces). We will show how Titan can capture both architecture and evolutionary structure and help to bridge the gap between architecture and defect prediction. We will demo how to use our toolset to capture hundreds of buggy files into just a few architecturally related groups, and to reveal architecture issues that contribute to the error-proneness and change-proneness of these groups. Our tool has been used to analyze dozens of large-scale industrial projects, and has demonstrated its ability to provide valuable direction on which parts of the architecture are problematic, and on why, when, and how to refactor. The video demo of Titan can be found at https://art.cs.drexel.edu/~lx52/titan.mp4},
  keywords  = {rank4},
  ranking   = {rank4},
}

@InProceedings{Hassan2008,
  author       = {Hassan, Ahmed E},
  booktitle    = {2008 Frontiers of Software Maintenance},
  title        = {The road ahead for mining software repositories},
  year         = {2008},
  organization = {IEEE},
  pages        = {48--57},
  abstract     = {Source control repositories, bug repositories, archived communications, deployment logs, and code repositories are examples of software repositories that are commonly available for most software projects. The mining software repositories (MSR) field analyzes and cross-links the rich data available in these repositories to uncover interesting and actionable information about software systems. By transforming these repositories from static record-keeping ones into active repositories, we can guide decision processes in modern software projects. For example, data in source control repositories, traditionally used to archive code, could be linked with data in bug repositories to help practitioners propagate complex changes and to warn them about risky code based on prior changes and bugs. In this paper, we present a brief history of the MSR field and discuss several recent achievements and results of using MSR techniques to support software research and practice. We then discuss the various opportunities and challenges that lie in the road ahead for this important and emerging field.},
  keywords     = {rank3},
  ranking      = {rank3},
}

@InProceedings{Robles2010,
  author       = {Robles, Gregorio},
  booktitle    = {2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010)},
  title        = {Replicating msr: A study of the potential replicability of papers published in the mining software repositories proceedings},
  year         = {2010},
  organization = {IEEE},
  pages        = {171--180},
  abstract     = {This paper is the result of reviewing all papers published in the proceedings of the former International Workshop on Mining Software Repositories (MSR) (2004-2006) and now Working Conference on MSR (2007-2009). We have analyzed the papers that contained any experimental analysis of software projects for their potentiality of being replicated. In this regard, three main issues have been addressed: i) the public availability of the data used as case study, ii) the public availability of the processed dataset used by researchers and iii) the public availability of the tools and scripts. A total number of 171 papers have been analyzed from the six workshops/working conferences up to date. Results show that MSR authors use in general publicly available data sources, mainly from free software repositories, but that the amount of publicly available processed datasets is very low. Regarding tools and scripts, for a majority of papers we have not been able to find any tool, even for papers where the authors explicitly state that they have built one. Lessons learned from the experience of reviewing the whole MSR literature and some potential solutions to lower the barriers of replicability are finally presented and discussed.},
}

@InProceedings{Zhang2014,
  author    = {Zhang, Feng and Mockus, Audris and Keivanloo, Iman and Zou, Ying},
  booktitle = {Proceedings of the 11th Working Conference on Mining Software Repositories},
  title     = {Towards building a universal defect prediction model},
  year      = {2014},
  pages     = {182--191},
  abstract  = {To predict files with defects, a suitable prediction model must be built for a software project from either itself (within-project) or other projects (cross-project). A universal defect prediction model that is built from the entire set of diverse projects would relieve the need for building models for an individual project. A universal model could also be interpreted as a basic relationship between software metrics and defects. However, the variations in the distribution of predictors pose a formidable obstacle to build a universal model. Such variations exist among projects with different context factors (e.g., size and programming language). To overcome this challenge, we propose context-aware rank transformations for predictors. We cluster projects based on the similarity of the distribution of 26 predictors, and derive the rank transformations using quantiles of predictors for a cluster. We then fit the universal model on the transformed data of 1,398 open source projects hosted on SourceForge and GoogleCode. Adding context factors to the universal model improves the predictive power. The universal model obtains prediction performance comparable to the within-project models and yields similar results when applied on five external projects (one Apache and four Eclipse projects). These results suggest that a universal defect prediction model may be an achievable goal.},
}

@InProceedings{Steidl2014,
  author    = {Steidl, Daniela and Hummel, Benjamin and Juergens, Elmar},
  booktitle = {Proceedings of the 11th Working Conference on Mining Software Repositories},
  title     = {Incremental origin analysis of source code files},
  year      = {2014},
  pages     = {42--51},
}

@InProceedings{Gil2012,
  author       = {Gil, Joseph and Goldstein, Maayan and Moshkovich, Dany},
  booktitle    = {2012 9th IEEE Working Conference on Mining Software Repositories (MSR)},
  title        = {An empirical investigation of changes in some software properties over time},
  year         = {2012},
  organization = {IEEE},
  pages        = {227--236},
  abstract     = {Software metrics are easy to define, but not so easy to justify. It is hard to prove that a metric is valid, i.e., that measured numerical values imply anything on the vaguely defined, yet crucial software properties such as complexity and maintainability. This paper employs statistical analysis and tests to check some plausible assumptions on the behavior of software and metrics measured for this software in retrospective on its versions evolution history. Among those are the reliability assumption implicit in the application of any code metric, and the assumption that the magnitude of change, i.e., increase or decrease of its size, in a software artifact is correlated with changes to its version number. Putting a suite of 36 metrics to the trial, we confirm most of the assumptions on a large repository of software artifacts. Surprisingly, we show that a substantial portion of the reliability of some metrics can be observed even in random changes to architecture. Another surprising result is that Boolean-valued metrics tend to flip their values more often in minor software version increments than in major increments.},
}

@InProceedings{Hemmati2013,
  author       = {Hemmati, Hadi and Nadi, Sarah and Baysal, Olga and Kononenko, Oleksii and Wang, Wei and Holmes, Reid and Godfrey, Michael W},
  booktitle    = {2013 10th Working Conference on Mining Software Repositories (MSR)},
  title        = {The msr cookbook: Mining a decade of research},
  year         = {2013},
  organization = {IEEE},
  pages        = {343--352},
  abstract     = {The Mining Software Repositories (MSR) research community has grown significantly since the first MSR workshop was held in 2004. As the community continues to broaden its scope and deepens its expertise, it is worthwhile to reflect on the best practices that our community has developed over the past decade of research. We identify these best practices by surveying past MSR conferences and workshops. To that end, we review all 117 full papers published in the MSR proceedings between 2004 and 2012. We extract 268 comments from these papers, and categorize them using a grounded theory methodology. From this evaluation, four high-level themes were identified: data acquisition and preparation, synthesis, analysis, and sharing/replication. Within each theme we identify several common recommendations, and also examine how these recommendations have evolved over the past decade. In an effort to make this survey a living artifact, we also provide a public forum that contains the extracted recommendations in the hopes that the MSR community can engage in a continuing discussion on our evolving best practices.},
  keywords     = {rank3},
  ranking      = {rank3},
}

@inproceedings{lehman1996laws,
  title={Laws of software evolution revisited},
  author={Lehman, Manny M},
  booktitle={European Workshop on Software Process Technology},
  pages={108--124},
  year={1996},
  organization={Springer}
}

@article{allman2012managing,
  title={Managing technical debt},
  author={Allman, Eric},
  journal={Communications of the ACM},
  volume={55},
  number={5},
  pages={50--55},
  year={2012},
  publisher={ACM New York, NY, USA}
}

@article{minku2016data,
  title={Data mining for software engineering and humans in the loop},
  author={Minku, Leandro L and Mendes, Emilia and Turhan, Burak},
  journal={Progress in Artificial Intelligence},
  volume={5},
  number={4},
  pages={307--314},
  year={2016},
  publisher={Springer}
}

@inproceedings{van2011using,
  title={Using code analysis tools for architectural conformance checking},
  author={Van Eyck, Jo and Bouck{\'e}, Nelis and Helleboogh, Alexander and Holvoet, Tom},
  booktitle={Proceedings of the 6th International Workshop on SHAring and Reusing Architectural Knowledge},
  pages={53--54},
  year={2011}
}

@book{bass2003software,
  title={Software architecture in practice},
  author={Bass, Len and Clements, Paul and Kazman, Rick},
  year={2003},
  publisher={Addison-Wesley Professional}
}

@inproceedings{gurgel2014blending,
  title={Blending and reusing rules for architectural degradation prevention},
  author={Gurgel, Alessandro and Macia, Isela and Garcia, Alessandro and von Staa, Arndt and Mezini, Mira and Eichberg, Michael and Mitschke, Ralf},
  booktitle={Proceedings of the 13th international conference on Modularity},
  pages={61--72},
  year={2014}
}

@inproceedings{medvidovic2010software,
  title={Software architecture: foundations, theory, and practice},
  author={Medvidovic, Nenad and Taylor, Richard N},
  booktitle={2010 ACM/IEEE 32nd International Conference on Software Engineering},
  volume={2},
  pages={471--472},
  year={2010},
  organization={IEEE}
}

@inproceedings{juarez2017preventing,
  title={Preventing erosion in exception handling design using static-architecture conformance checking},
  author={Juarez Filho, LM and Rocha, Lincoln and Andrade, Rossana and Britto, Ricardo},
  booktitle={European Conference on Software Architecture},
  pages={67--83},
  year={2017},
  organization={Springer}
}

@article{maccormack2016technical,
  title={Technical debt and system architecture: The impact of coupling on defect-related activity},
  author={MacCormack, Alan and Sturtevant, Daniel J},
  journal={Journal of Systems and Software},
  volume={120},
  pages={170--182},
  year={2016},
  publisher={Elsevier}
}

@article{witten2005practical,
  title={Practical machine learning tools and techniques},
  author={Witten, Ian H and Frank, Eibe and Hall, Mark A and Pal, Christopher J},
  journal={Morgan Kaufmann},
  volume={578},
  pages={1},
  year={2005},
}

@phdthesis{anichecontext,
  title={Context-based code quality assessment},
  author={Aniche, Maur{\'\i}cio Finavaro},
  year={2016},
  school={Universidade de S{\~a}o Paulo}
}

@article{maffort2016mining,
  title={Mining architectural violations from version history},
  author={Maffort, Cristiano and Valente, Marco Tulio and Terra, Ricardo and Bigonha, Mariza and Anquetil, Nicolas and Hora, Andr{\'e}},
  journal={Empirical Software Engineering},
  volume={21},
  number={3},
  pages={854--895},
  year={2016},
  publisher={Springer}
}

@article{basili1996validation,
  title={A validation of object-oriented design metrics as quality indicators},
  author={Basili, Victor R and Briand, Lionel C. and Melo, Walc{\'e}lio L},
  journal={IEEE Transactions on software engineering},
  volume={22},
  number={10},
  pages={751--761},
  year={1996},
  publisher={IEEE}
}

@article{lees2010theoretical,
  title={Theoretical maximum capacity as benchmark for empty vehicle redistribution in personal rapid transit},
  author={Lees-Miller, John and Hammersley, John and Wilson, R},
  journal={Transportation Research Record: Journal of the Transportation Research Board},
  number={2146},
  pages={76--83},
  year={2010},
  publisher={Transportation Research Board of the National Academies}
}

@article{besker2018managing,
  title={Managing architectural technical debt: A unified model and systematic literature review},
  author={Besker, Terese and Martini, Antonio and Bosch, Jan},
  journal={Journal of Systems and Software},
  volume={135},
  pages={1--16},
  year={2018},
  publisher={Elsevier}
}

@article{li2015systematic,
  title={A systematic mapping study on technical debt and its management},
  author={Li, Zengyang and Avgeriou, Paris and Liang, Peng},
  journal={Journal of Systems and Software},
  volume={101},
  pages={193--220},
  year={2015},
  publisher={Elsevier}
}

@inproceedings{martini2016empirically,
  title={An empirically developed method to aid decisions on architectural technical debt refactoring: AnaConDebt},
  author={Martini, Antonio and Bosch, Jan},
  booktitle={2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C)},
  pages={31--40},
  year={2016},
  organization={IEEE}
}

@incollection{li2014architectural,
  title={Architectural debt management in value-oriented architecting},
  author={Li, Zengyang and Liang, Peng and Avgeriou, Paris},
  booktitle={Economics-Driven Software Architecture},
  pages={183--204},
  year={2014},
  publisher={Elsevier}
}

@article{michael2010transformation,
  title={Transformation patterns for curing the human causes of technical debt},
  author={Michael Golden, Jonathon},
  journal={Cutter IT Journal},
  volume={23},
  number={10},
  pages={30},
  year={2010}
}

@article{ampatzoglou2015financial,
  title={The financial aspect of managing technical debt: A systematic literature review},
  author={Ampatzoglou, Areti and Ampatzoglou, Apostolos and Chatzigeorgiou, Alexander and Avgeriou, Paris},
  journal={Information and Software Technology},
  volume={64},
  pages={52--73},
  year={2015},
  publisher={Elsevier}
}

@inproceedings{xiao2016identifying,
  title={Identifying and quantifying architectural debt},
  author={Xiao, Lu and Cai, Yuanfang and Kazman, Rick and Mo, Ran and Feng, Qiong},
  booktitle={2016 IEEE/ACM 38th International Conference on Software Engineering (ICSE)},
  pages={488--498},
  year={2016},
  organization={IEEE}
}

@book{wohlin2012experimentation,
  title={Experimentation in software engineering},
  author={Wohlin, Claes and Runeson, Per and Host, Martin and Ohlsson, Magnus C and Regnell, Bjorn and Wesslen, Anders},
  year={2012},
  publisher={Springer Science \& Business Media}
}
@Comment{jabref-meta: databaseType:bibtex;}

% end bibliography.bib

% gsatd.bib

@inproceedings{verdecchia2020architectural,
  title={Architectural technical debt: A grounded theory},
  author={Verdecchia, Roberto and Kruchten, Philippe and Lago, Patricia},
  booktitle={European Conference on Software Architecture},
  pages={202--219},
  year={2020},
  organization={Springer}
}
@article{besker2018managing,
  title={Managing architectural technical debt: A unified model and systematic literature review},
  author={Besker, Terese and Martini, Antonio and Bosch, Jan},
  journal={Journal of Systems and Software},
  volume={135},
  pages={1--16},
  year={2018},
  publisher={Elsevier}
}
@inproceedings{martini2015danger,
  title={The danger of architectural technical debt: Contagious debt and vicious circles},
  author={Martini, Antonio and Bosch, Jan},
  booktitle={2015 12th Working IEEE/IFIP Conference on Software Architecture},
  pages={1--10},
  year={2015},
  organization={IEEE}
}
@inproceedings{verdecchia2018architectural,
  title={Architectural technical debt identification: The research landscape},
  author={Verdecchia, Roberto and Malavolta, Ivano and Lago, Patricia},
  booktitle={2018 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  pages={11--20},
  year={2018},
  organization={IEEE}
}
@article{martini2017interest,
  title={On the interest of architectural technical debt: Uncovering the contagious debt phenomenon},
  author={Martini, Antonio and Bosch, Jan},
  journal={Journal of Software: Evolution and Process},
  volume={29},
  number={10},
  pages={e1877},
  year={2017},
  publisher={Wiley Online Library}
}
@article{martini2015investigating,
  title={Investigating Architectural Technical Debt accumulation and refactoring over time: A multiple-case study},
  author={Martini, Antonio and Bosch, Jan and Chaudron, Michel},
  journal={Information and Software Technology},
  volume={67},
  pages={237--253},
  year={2015},
  publisher={Elsevier}
}
@inproceedings{li2014empirical,
  title={An empirical investigation of modularity metrics for indicating architectural technical debt},
  author={Li, Zengyang and Liang, Peng and Avgeriou, Paris and Guelfi, Nicolas and Ampatzoglou, Apostolos},
  booktitle={Proceedings of the 10th international ACM Sigsoft conference on Quality of software architectures},
  pages={119--128},
  year={2014}
}@inproceedings{li2015architectural,
  title={Architectural technical debt identification based on architecture decisions and change scenarios},
  author={Li, Zengyang and Liang, Peng and Avgeriou, Paris},
  booktitle={2015 12th Working IEEE/IFIP Conference on Software Architecture},
  pages={65--74},
  year={2015},
  organization={IEEE}
}
@article{verdecchia2021building,
  title={Building and evaluating a theory of architectural technical debt in software-intensive systems},
  author={Verdecchia, Roberto and Kruchten, Philippe and Lago, Patricia and Malavolta, Ivano},
  journal={Journal of Systems and Software},
  volume={176},
  pages={110925},
  year={2021},
  publisher={Elsevier}
}
@inproceedings{martini2016empirically,
  title={An empirically developed method to aid decisions on architectural technical debt refactoring: AnaConDebt},
  author={Martini, Antonio and Bosch, Jan},
  booktitle={2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C)},
  pages={31--40},
  year={2016},
  organization={IEEE}
}
@article{martini2018semi,
  title={A semi-automated framework for the identification and estimation of architectural technical debt: A comparative case-study on the modularization of a software component},
  author={Martini, Antonio and Sikander, Erik and Madlani, Niel},
  journal={Information and Software Technology},
  volume={93},
  pages={264--279},
  year={2018},
  publisher={Elsevier}
}
@inproceedings{verdecchia2020atdx,
  title={ATDx: Building an Architectural Technical Debt Index.},
  author={Verdecchia, Roberto and Lago, Patricia and Malavolta, Ivano and Ozkaya, Ipek},
  booktitle={ENASE},
  pages={531--539},
  year={2020}
}
@incollection{li2016architecture,
  title={Architecture viewpoints for documenting architectural technical debt},
  author={Li, Zengyang and Liang, Peng and Avgeriou, Paris},
  booktitle={Software Quality Assurance},
  pages={85--132},
  year={2016},
  publisher={Elsevier}
}
@inproceedings{verdecchia2018identifying,
  title={Identifying architectural technical debt in android applications through automated compliance checking},
  author={Verdecchia, Roberto},
  booktitle={2018 IEEE/ACM 5th International Conference on Mobile Software Engineering and Systems (MOBILESoft)},
  pages={35--36},
  year={2018},
  organization={IEEE}
}
@article{de2021identifying,
  title={Identifying architectural technical debt, principal, and interest in microservices: A multiple-case study},
  author={de Toledo, Saulo S and Martini, Antonio and Sj{\o}berg, Dag IK},
  journal={Journal of Systems and Software},
  volume={177},
  pages={110968},
  year={2021},
  publisher={Elsevier}
}
@inproceedings{besker2017impact,
  title={Impact of architectural technical debt on daily software development work—a survey of software practitioners},
  author={Besker, Terese and Martini, Antonio and Bosch, Jan},
  booktitle={2017 43rd Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
  pages={278--287},
  year={2017},
  organization={IEEE}
}
@inproceedings{borowa2021influence,
  title={The Influence of Cognitive Biases on Architectural Technical Debt},
  author={Borowa, Klara and Zalewski, Andrzej and Kijas, Szymon},
  booktitle={2021 IEEE 18th International Conference on Software Architecture (ICSA)},
  pages={115--125},
  year={2021},
  organization={IEEE}
}
@inproceedings{perez2019proposed,
  title={A proposed model-driven approach to manage architectural technical debt life cycle},
  author={P{\'e}rez, Boris and Correal, Dar{\'\i}o and Astudillo, Hern{\'a}n},
  booktitle={2019 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  pages={73--77},
  year={2019},
  organization={IEEE}
}
@inproceedings{vogel2015applicability,
  title={Applicability of technical debt as a concept to understand obstacles for evolution of automated production systems},
  author={Vogel-Heuser, Birgit and R{\"o}sch, Susanne},
  booktitle={2015 IEEE International Conference on Systems, Man, and Cybernetics},
  pages={127--132},
  year={2015},
  organization={IEEE}
}
@techreport{ozkaya2012strategic,
  title={Strategic management of architectural technical debt},
  author={Ozkaya, Ipek},
  year={2012},
  institution={CARNEGIE-MELLON UNIV PITTSBURGH PA SOFTWARE ENGINEERING INST}
}
@inproceedings{martini2014architecture,
  title={Architecture technical debt: Understanding causes and a qualitative model},
  author={Martini, Antonio and Bosch, Jan and Chaudron, Michel},
  booktitle={2014 40th EUROMICRO Conference on Software Engineering and Advanced Applications},
  pages={85--92},
  year={2014},
  organization={IEEE}
}
@article{martini2019architectural,
  title={Architectural technical debt in embedded systems},
  author={Martini, Antonio and Bosch, Jan},
  journal={Systems Engineering in the Fourth Industrial Revolution},
  pages={77--103},
  year={2019},
  publisher={Wiley Online Library}
}
@inproceedings{perez2020semiautomatic,
  title={A Semiautomatic Approach to Identify Architectural Technical Debt from Heterogeneous Artifacts},
  author={P{\'e}rez, Boris},
  booktitle={European Conference on Software Architecture},
  pages={5--16},
  year={2020},
  organization={Springer}
}
@inproceedings{martini2015towards,
  title={Towards prioritizing architecture technical debt: information needs of architects and product owners},
  author={Martini, Antonio and Bosch, Jan},
  booktitle={2015 41St euromicro conference on software engineering and advanced applications},
  pages={422--429},
  year={2015},
  organization={IEEE}
}
@inproceedings{de2019architectural,
  title={Architectural technical debt in microservices: a case study in a large company},
  author={de Toledo, Saulo Soares and Martini, Antonio and Przybyszewska, Agata and Sj{\o}berg, Dag IK},
  booktitle={2019 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  pages={78--87},
  year={2019},
  organization={IEEE}
}
@article{deeb2021refactoring,
  title={Refactoring Cost Estimation for Architectural Technical Debt},
  author={Deeb, Samir and BenIdris, Mrwan and Ammar, Hany and Dzielski, Dale},
  journal={International Journal of Software Engineering and Knowledge Engineering},
  volume={31},
  number={02},
  pages={269--288},
  year={2021},
  publisher={World Scientific}
}
@inproceedings{perez2020computational,
  title={A computational model of a natural language processing system for architectural technical debt management},
  author={Perez, B and Castellanos, C and Correal, D},
  booktitle={Journal of Physics: Conference Series},
  volume={1587},
  number={1},
  pages={012020},
  year={2020},
  organization={IOP Publishing}
}
@inproceedings{del2016identification,
  title={Identification of architectural technical debt: An analysis based on naming patterns},
  author={del Carpio, Paul Mendoza},
  booktitle={2016 8th Euro American Conference on Telematics and Information Systems (EATIS)},
  pages={1--8},
  year={2016},
  organization={IEEE}
}
@inproceedings{eliasson2015identifying,
  title={Identifying and visualizing Architectural Debt and its efficiency interest in the automotive domain: A case study},
  author={Eliasson, Ulf and Martini, Antonio and Kaufmann, Robert and Odeh, Sam},
  booktitle={2015 IEEE 7th International Workshop on Managing Technical Debt (MTD)},
  pages={33--40},
  year={2015},
  organization={IEEE}
}
@inproceedings{skiada2018exploring,
  title={Exploring the relationship between software modularity and technical debt},
  author={Skiada, Peggy and Ampatzoglou, Apostolos and Arvanitou, Elvira-Maria and Chatzigeorgiou, Alexander and Stamelos, Ioannis},
  booktitle={2018 44th Euromicro Conference on software engineering and advanced applications (SEAA)},
  pages={404--407},
  year={2018},
  organization={IEEE}
}
@article{olsson2019measuring,
  title={Measuring affective states from architectural technical debt},
  author={OLSSON, JESPER and RISFELT, ERIK},
  year={2019}
}
@incollection{li2014architectural,
  title={Architectural debt management in value-oriented architecting},
  author={Li, Zengyang and Liang, Peng and Avgeriou, Paris},
  booktitle={Economics-Driven Software Architecture},
  pages={183--204},
  year={2014},
  publisher={Elsevier}
}
@inproceedings{martini2017revealing,
  title={Revealing social debt with the CAFFEA framework: An antidote to architectural debt},
  author={Martini, Antonio and Bosch, Jan},
  booktitle={2017 IEEE International Conference on Software Architecture Workshops (ICSAW)},
  pages={179--181},
  year={2017},
  organization={IEEE}
}
@book{besker2018empirical,
  title={An Empirical Investigation of the Harmfulness of Architectural Technical Debt},
  author={Besker, Terese},
  year={2018},
  publisher={Chalmers Tekniska Hogskola (Sweden)}
}
@article{martiniarchitectural,
  title={Architectural Technical Debt: Models and Impact},
  author={Martini, Antonio}
}
@mastersthesis{dahl2017estimating,
  title={Estimating Architectural Technical Debt: A design research},
  author={Dahl, Gustav},
  year={2017}
}
@article{mendoza2017using,
  title={Using Naming Patterns for Identifying Architectural Technical Debt},
  author={Mendoza del Carpio, Paul},
  year={2017},
  publisher={Technology and Engineering Systems Journal}
}
@inproceedings{martini2018identifying,
  title={Identifying and prioritizing architectural debt through architectural smells: a case study in a large software company},
  author={Martini, Antonio and Fontana, Francesca Arcelli and Biaggi, Andrea and Roveda, Riccardo},
  booktitle={European Conference on Software Architecture},
  pages={320--335},
  year={2018},
  organization={Springer}
}
@mastersthesis{kaufmann2015addressing,
  title={Addressing efficiency interest in architectural technical debt-A measurement and visualization approach for embedded software},
  author={Kaufmann, Robert and Odeh, Sam},
  year={2015}
}
@phdthesis{hsu2018investigating,
  title={Investigating the causes of software technical debt at the architectural level},
  author={Hsu, Jen Tsu},
  year={2018},
  school={University of British Columbia}
}
@article{sikander2016decision,
  title={A Decision Framework on Refactoring Architectural Technical Debt: Paying Back in Modularity-An Industrial Case Study},
  author={Sikander, Erik and Madlani, Neil},
  year={2016}
}
@article{klimczyk2020technical,
  title={Technical Debt Aware Estimations in Software Engineering: A Systematic Mapping Study},
  author={Klimczyk, Pawe{\l} and Madeyski, Lech},
  journal={e-Informatica Software Engineering Journal},
  volume={14},
  number={1},
  year={2020}
}
@article{deeb2020estimating,
  title={Estimating Refactoring Efforts for Architecture Technical Debt},
  author={Deeb, Samir},
  year={2020}
}
@inproceedings{hanssen2019identifying,
  title={Identifying scalability debt in open systems},
  author={Hanssen, Geir Kjetil and Brataas, Gunnar and Martini, Antonio},
  booktitle={2019 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  pages={48--52},
  year={2019},
  organization={IEEE}
}
@inproceedings{biaggi2018architectural,
  title={An architectural smells detection tool for c and c++ projects},
  author={Biaggi, Andrea and Fontana, Francesca Arcelli and Roveda, Riccardo},
  booktitle={2018 44th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
  pages={417--420},
  year={2018},
  organization={IEEE}
}
@inproceedings{azadi2019architectural,
  title={Architectural smells detected by tools: a catalogue proposal},
  author={Azadi, Umberto and Fontana, Francesca Arcelli and Taibi, Davide},
  booktitle={2019 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  pages={88--97},
  year={2019},
  organization={IEEE}
}
@inproceedings{fernandez2015analysis,
  title={An analysis of techniques and methods for technical debt management: a reflection from the architecture perspective},
  author={Fern{\'a}ndez-S{\'a}nchez, Carlos and Garbajosa, Juan and Vidal, Carlos and Yag{\"u}e, Agust{\'\i}n},
  booktitle={2015 IEEE/ACM 2nd International Workshop on Software Architecture and Metrics},
  pages={22--28},
  year={2015},
  organization={IEEE}
}
@inproceedings{kruchten2012strategic,
  title={Strategic management of technical debt: Tutorial synopsis},
  author={Kruchten, Philippe},
  booktitle={2012 12th International Conference on Quality Software},
  pages={282--284},
  year={2012},
  organization={IEEE}
}
@inproceedings{rosser2021systems,
  title={A Systems Perspective on Technical Debt},
  author={Rosser, Larri Ann and Norton, John H},
  booktitle={2021 IEEE Aerospace Conference (50100)},
  pages={1--10},
  year={2021},
  organization={IEEE}
}
@article{maccormack2016technical,
  title={Technical debt and system architecture: The impact of coupling on defect-related activity},
  author={MacCormack, Alan and Sturtevant, Daniel J},
  journal={Journal of Systems and Software},
  volume={120},
  pages={170--182},
  year={2016},
  publisher={Elsevier}
}
@inproceedings{fontana2016tool,
  title={Tool support for evaluating architectural debt of an existing system: An experience report},
  author={Fontana, Francesca Arcelli and Roveda, Riccardo and Zanoni, Marco},
  booktitle={Proceedings of the 31st Annual ACM Symposium on Applied Computing},
  pages={1347--1349},
  year={2016}
}
@inproceedings{macit2020methods,
  title={Methods for Identifying Architectural Debt: A Systematic Mapping Study},
  author={Macit, Yagup and Giray, G{\"o}rkem and T{\"u}z{\"u}n, Eray},
  booktitle={2020 Turkish National Software Engineering Symposium (UYMS)},
  pages={1--6},
  year={2020},
  organization={IEEE}
}
@inproceedings{kazman2015case,
  title={A case study in locating the architectural roots of technical debt},
  author={Kazman, Rick and Cai, Yuanfang and Mo, Ran and Feng, Qiong and Xiao, Lu and Haziyev, Serge and Fedak, Volodymyr and Shapochka, Andriy},
  booktitle={2015 IEEE/ACM 37th IEEE International Conference on Software Engineering},
  volume={2},
  pages={179--188},
  year={2015},
  organization={IEEE}
}
@article{soliman2021architectural,
  title={Architectural design decisions that incur technical debt—An industrial case study},
  author={Soliman, Mohamed and Avgeriou, Paris and Li, Yikun},
  journal={Information and Software Technology},
  pages={106669},
  year={2021},
  publisher={Elsevier}
}
@inproceedings{martini2018anacondebt,
  title={Anacondebt: A tool to assess and track technical debt},
  author={Martini, Antonio},
  booktitle={2018 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  pages={55--56},
  year={2018},
  organization={IEEE}
}
@inproceedings{perez2020software,
  title={How do software architects perceive technical debt in Colombian industry? An analysis of technical debt causes},
  author={P{\'e}rez, B and Correal, D and Vera-Rivera, FH},
  booktitle={Journal of Physics: Conference Series},
  volume={1513},
  number={1},
  pages={012003},
  year={2020},
  organization={IOP Publishing}
}

% end gsatd.bib

% mergepatdsp.bib

% Encoding: UTF-8

@InProceedings{Caracciolo2015,
  author    = {Andrea Caracciolo and Mircea Lungu and Oscar Nierstrasz},
  booktitle = {Proceedings of the 12th Working IEEE/IFIP Conference on Software Architecture (WICSA)},
  title     = {A Unified Approach to Architecture Conformance Checking},
  year      = {2015},
  month     = {may},
  pages     = {41-50},
  publisher = {ACM Press},
  abstract  = {Software erosion can be controlled by periodically checking for consistency between the de facto architecture and its theoretical counterpart. Studies show that this process is often not automated and that developers still rely heavily on manual reviews, despite the availability of a large number of tools. This is partially due to the high cost involved in setting up and maintaining tool-specific and incompatible test specifications that replicate otherwise documented invariants. To reduce this cost, our approach consists in unifying the functionality provided by existing tools under the umbrella of a common business-readable DSL. By using a declarative language, we are able to write tool-agnostic rules that are simple enough to be understood by untrained stakeholders and, at the same time, can be interpreted as a rigorous specification for checking architecture conformance.},
  keywords  = {rank3},
  ranking   = {rank3},
}

@Article{Terra2015,
  author   = {Terra, Ricardo and Valente, Marco Tulio and Czarnecki, Krzysztof and Bigonha, Roberto S.},
  journal  = {Software: Practice and Experience},
  title    = {A Recommendation System for Repairing Violations Detected by Static Architecture Conformance Checking},
  year     = {2015},
  issn     = {1097-024X},
  number   = {3},
  pages    = {315--342},
  volume   = {45},
  abstract = {This paper describes a recommendation system that provides refactoring guidelines for maintainers when tackling architectural erosion. The paper formalizes 32 refactoring recommendations to repair violations raised by static architecture conformance checking approaches; it describes a tool—called ArchFix—that triggers the proposed recommendations; and it evaluates the application of this tool in two industrial‐strength systems. For the first system—a 21 KLOC open‐source strategic management system—our approach has indicated correct refactoring recommendations for 31 out of 41 violations detected as the result of an architecture conformance process. For the second system—a 728 KLOC customer care system used by a major telecommunication company—our approach has triggered correct recommendations for 624 out of 787 violations, as asserted by the system's architect. Moreover, the architects have scored 82% of these recommendations as having moderate or major complexity.},
  keywords = {rank3},
  ranking  = {rank3},
}

@InBook{Filho2017,
  author    = {Filho, Juarez L. M. and Rocha, Lincoln and Andrade, Rossana and Britto, Ricardo},
  editor    = {Lopes, Ant{\'o}nia and de Lemos, Rog{\'e}rio},
  pages     = {67--83},
  publisher = {Springer International Publishing},
  title     = {Preventing Erosion in Exception Handling Design Using Static-Architecture Conformance Checking},
  year      = {2017},
  address   = {Cham},
  isbn      = {978-3-319-65831-5},
  booktitle = {Software Architecture: 11th European Conference, ECSA 2017, Canterbury, UK, September 11-15, 2017, Proceedings},
  doi       = {10.1007/978-3-319-65831-5_5},
  keywords  = {rank3},
  ranking   = {rank3},
}

@Book{Kerievsky2004,
 author = {Kerievsky, Joshua},
 title = {Refactoring to Patterns},
 year = {2004},
 isbn = {0321213351},
 publisher = {Pearson Higher Education}
} 

@Article{Chidamber1994,
  author     = {Chidamber, S. R. and Kemerer, C. F.},
  journal    = {IEEE Trans. Softw. Eng.},
  title      = {A Metrics Suite for Object Oriented Design},
  year       = {1994},
  issn       = {0098-5589},
  month      = {jun},
  number     = {6},
  pages      = {476--493},
  volume     = {20},
  abstract   = {Given the central role that software development plays in the delivery and application of information technology, managers are increasingly focusing on process improvement in the software development area. This demand has spurred the provision of a number of new and/or improved approaches to software development, with perhaps the most prominent being object-orientation (OO). In addition, the focus on process improvement has increased the demand for software measures, or metrics with which to manage the process. The need for such metrics is particularly acute when an organization is adopting a new technology for which established practices have yet to be developed. This research addresses these needs through the development and implementation of a new suite of metrics for OO design. Metrics developed in previous research, while contributing to the field's understanding of software development processes, have generally been subject to serious criticisms, including the lack of a theoretical base. Following Wand and Weber (1989), the theoretical base chosen for the metrics was the ontology of Bunge (1977). Six design metrics are developed, and then analytically evaluated against Weyuker's (1988) proposed set of measurement principles. An automated data collection tool was then developed and implemented to collect an empirical sample of these metrics at two field sites in order to demonstrate their feasibility and suggest ways in which managers may use these metrics for process improvement.},
  doi        = {10.1109/32.295895},
  issue_date = {June 1994},
  numpages   = {18},
  publisher  = {IEEE Press},
}

@Article{Conchuir2009,
  author    = {Conch\'{u}ir, E. and {\AA}gerfalk, P. J. and Holmstrom, H. and Fitzgerald, B.},
  journal   = {Communications of the ACM},
  title     = {Global Software Development: Where Are the Benefits?},
  year      = {2009},
  month     = {aug},
  number    = {8},
  pages     = {127--131},
  volume    = {52},
  abstract  = {Global Software Development (GSD) is increasingly becoming the normal practice in the software industry, readily evidenced by U.S. estimates that the value of the offshore software development market has increased 25-fold over the past 10 years, to the extent that one-quarter of U.S. spending on application development, integration and management services is expected to go off-shore according to recent predictions. There are many potential benefits that can arise from GSD. The most frequently cited one is that of reduced development costs due to the salary savings possible. Also, GSD can lead to reduced development duration due to greater time zone effectiveness as companies practice the so-called 'follow-the-sun' software development model. GSD also affords new opportunities for cross-site modularization of development work, potential access to a larger and better-skilled developer pool, and the possibility of greater innovation, learning and transfer of best practices. Finally, GSD can facilitate closer proximity to markets and customers.
However, GSD also introduces a number of challenges in relation to communication, coordination and control of the development process. These arise due to the distances involved in three dimensions -- geographical, temporal, and socio-cultural (See Figure 1). As a consequence, much research and practice has focused on trying to find ways to overcome the GSD challenges identified in Figure 1. In the literature to date, the potential benefits of GSD are usually just mentioned very briefly, if they are mentioned at all, and the realization of these benefits seems to be more or less taken for granted. The primary focus instead is on how the problems inherent in GSD might be addressed. Here, we reverse this trend and focus instead on the benefits and the extent to which they are actually being realized in practice in three global companies practicing GSD.},
  acmid     = {1536648},
  address   = {New York, NY, USA},
  numpages  = {5},
  publisher = {ACM},
}

@InProceedings{Ramasubbu2011,
  author    = {Ramasubbu, N. and Cataldo, M. and Balan, R. K. and Herbsleb, J. D.},
  booktitle = {Proceedings of the 33rd International Conference on Software Engineering - ICSE'11},
  title     = {Configuring Global Software Teams: A Multi-company Analysis of Project Productivity, Quality, and Profits},
  year      = {2011},
  pages     = {261--270},
  abstract  = {In this paper, we examined the impact of project-level configurational choices of globally distributed software teams on project productivity, quality, and profits. Our analysis used data from 362 projects of four different firms. These projects spanned a wide range of programming languages, application domain, process choices, and development sites spread over 15 countries and 5 continents. Our analysis revealed fundamental tradeoffs in choosing configurational choices that are optimized for productivity, quality, and/or profits. In particular, achieving higher levels of productivity and quality require diametrically opposed configurational choices. In addition, creating imbalances in the expertise and personnel distribution of project teams significantly helps increase profit margins. However, a profit-oriented imbalance could also significantly affect productivity and/or quality outcomes. Analyzing these complex tradeoffs, we provide actionable managerial insights that can help software firms and their clients choose configurations that achieve desired project outcomes in globally distributed software development.},
  keywords  = {empirical analysis, globally distributed software development, quality management, software engineering economics, rank2},
  location  = {Waikiki, Honolulu, HI, USA},
  ranking   = {rank2},
}

@InProceedings{Espinosa2007,
  author    = {Espinosa, J. A. and Nan, N. and Carmel, E.},
  booktitle = {Second IEEE International Conference on Global Software Engineering - ICGSE'07.},
  title     = {Do Gradations of Time Zone Separation Make a Difference in Performance? A First Laboratory Study},
  year      = {2007},
  month     = {Aug},
  pages     = {12-22},
  abstract  = {We often hear that global software engineering teams are affected by time differences. While there is considerable research on the difficulties of distance, culture and other dimensions, there has been little research that isolated the impact of just time differences. The research question that guides us is whether there are gradual differences across time zones that impact team performance. In this study we conducted a laboratory experiment with 42 dyadic teams. The teams were randomly assigned into 4 time zone overlap conditions: full overlap, 2/3 overlap, 1/3 overlap and no overlap. Using a fictional map task, we found that participants' perceptions of process are unrelated to actual objective performance measures of speed and accuracy. Consistent with our expectations, we found that a small time separation has no effect on accuracy, but that more time separation has a significant effect on accuracy. Also consistent with our expectations, we found that a small amount of time separation has a significant effect on production speed. However, contrary to our expectations, we found that further increases in partial overlap have less significant effects on speed, and when there is no overlap speed actually increases, albeit not significantly - a "U-shaped" effect.},
  keywords  = {rank3},
  ranking   = {rank3},
}

@Article{Herbsleb2003,
  author   = {Herbsleb, J. D. and Mockus, A.},
  journal  = {IEEE Transactions on Software Engineering},
  title    = {An empirical study of speed and communication in globally distributed software development},
  year     = {2003},
  month    = {June},
  number   = {6},
  pages    = {481-494},
  volume   = {29},
  abstract = {Global software development is rapidly becoming the norm for technology companies. Previous qualitative research suggests that distributed development may increase development cycle time for individual work items (modification requests). We use both data from the source code change management system and survey data to model the extent of delay in a distributed software development organization and explore several possible mechanisms for this delay. One key finding is that distributed work items appear to take about two and one-half times as long to complete as similar items where all the work is colocated. The data strongly suggest a mechanism for the delay, i.e., that distributed work items involve more people than comparable same-site work items, and the number of people involved is strongly related to the calendar time to complete a work item. We replicate the analysis of change data in a different organization with a different product and different sites and confirm our main findings. We also report survey results showing differences between same-site and distributed social networks, testing several hypotheses about characteristics of distributed social networks that may be related to delay. We discuss implications of our findings for practices and collaboration technology that have the potential for dramatically speeding distributed software development.},
  keywords = {rank3},
  ranking  = {rank3},
}

@Article{Bavani2012,
  author   = {R. Bavani},
  journal  = {IEEE Software},
  title    = {Distributed Agile, Agile Testing, and Technical Debt},
  year     = {2012},
  issn     = {0740-7459},
  month    = {Nov},
  number   = {6},
  pages    = {28-33},
  volume   = {29},
  abstract = {Agile teams create business value by responding to changing business environments and delivering working software at regular intervals. While doing so, they make design tradeoffs to satisfy business needs such as meeting a release schedule. Technical debt is the result of such decisions or tradeoffs. When this happens, agile teams must pay off the accumulated debt by improving designs during subsequent iterations in order to improve maintainability. This must happen in a systematic way so that technical debt does not swell up and damage the project. Accomplishing this is one of the major challenges in distributed agile projects. The scope of technical debt in software projects is spread across all areas including architecture, design, code, and test scripts.},
  doi      = {10.1109/MS.2012.155},
  keywords = {Ethics;Interviews;Investments;Software maintenance;Software measurements;Software quality;agile;agile software development;agile testing;distributed agile;technical debt},
}

@InProceedings{Cunningham1992,
  author    = {Cunningham, Ward},
  booktitle = {Addendum to the Proceedings on Object-oriented Programming Systems, Languages, and Applications (Addendum)},
  title     = {The WyCash Portfolio Management System},
  year      = {1992},
  address   = {New York, NY, USA},
  pages     = {29--30},
  publisher = {ACM},
  series    = {OOPSLA '92},
  acmid     = {157715},
  doi       = {10.1145/157709.157715},
  isbn      = {0-89791-610-7},
  keywords  = {rank4},
  location  = {Vancouver, British Columbia, Canada},
  numpages  = {2},
  ranking   = {rank4},
}

@InProceedings{Holvitie2014,
  author       = {Holvitie, Johannes and Leppanen, Ville and Hyrynsalmi, Sami},
  booktitle    = {2014 Sixth International Workshop on Managing Technical Debt},
  title        = {Technical debt and the effect of agile software development practices on it-an industry practitioner survey},
  year         = {2014},
  organization = {IEEE},
  pages        = {35--42},
  abstract     = {A major reason for the popularity of agile and lean software methods is their capability to function in resource scarce and requirement erratic environments. Both of these characteristics cause accumulation of technical debt, something that is the end result of either intentional or unintentional decisions. The ability of these methods to function with technical debt indicates that they contain components with inherent technical debt management capabilities. This study conducts a survey on industry practitioners to discover what is their level of technical debt knowledge, how does technical debt manifest in their projects and which of the applied components of agile software development -- both processes and practices -- are sensitive to technical debt. This paper contributes to the technical debt discussion by showing differences in assumed and indicated technical debt knowledge. Furthermore, components closest to implementation and its maintenance are perceived to have the most positive effects on technical debt management. Finally, the most encountered instances of technical debt are caused by architectural inadequacies, they are internal legacy, and increase in size as a result of continued implementation.},
  keywords     = {rank3},
  ranking      = {rank3},
}

@InProceedings{Ebert2016,
  author       = {Ebert, Christof and Kuhrmann, Marco and Prikladnicki, Rafael},
  booktitle    = {2016 IEEE 11th International Conference on Global Software Engineering (ICGSE)},
  title        = {Global software engineering: Evolution and trends},
  year         = {2016},
  organization = {IEEE},
  pages        = {144--153},
  abstract     = {Professional software products and IT systems and services today are developed mostly by globally distributed teams, projects, and companies. Successfully orchestrating Global Software Engineering (GSE) has become the major success factor both for organizations and practitioners. Yet, more than a half of all distributed projects does not achieve the intended objectives and is canceled. This paper summarizes experiences from academia and industry in a way to facilitate knowledge and technology transfer. It is based on an evaluation of 10 years of research, and industry collaboration and experience reported at the IEEE International Conference on Software Engineering (ICGSE) series. The outcomes of our analysis show GSE as a field highly attached to industry and, thus, a considerable share of ICGSE papers address the transfer of Software Engineering concepts and solutions to the global stage. We found collaboration and teams, processes and organization, sourcing and supplier management, and success factors to be the topics gaining the most interest of researchers and practitioners. Beyond the analysis of the past conferences, we also look at current trends in GSE to motivate further research and industrial collaboration.},
}

@Book{Ebert2012,
  author    = {Ebert, Christof},
  publisher = {Wiley Online Library},
  title     = {Global Software and IT},
  year      = {2012},
}

@Article{Ebert2015,
  author    = {Ebert, Christof and Kuhrmann, Marco and Prikladnicki, Rafael},
  journal   = {IEEE Software},
  title     = {Global software engineering: An industry perspective},
  year      = {2015},
  number    = {1},
  pages     = {105--108},
  volume    = {33},
  abstract  = {Abstract:
Professional software products and IT systems and services today are developed mostly by globally distributed teams, projects, and companies. This issue's column summarizes experiences and guidance from industry to facilitate knowledge and technology transfer. It's based on industry feedback from the annual IEEE International Conference on Global Software Engineering.},
  publisher = {IEEE},
}

@InProceedings{Aoyama1995,
  author       = {Aoyama, Mikio},
  booktitle    = {Proceedings 1995 Asia Pacific Software Engineering Conference},
  title        = {Management of distributed concurrent development for large scale software systems},
  year         = {1995},
  organization = {IEEE},
  pages        = {158--167},
  abstract     = {The article discusses a new software process model, distributed concurrent development, and its experience in developing a family of large-scale communication software systems. We have experienced an evolutionary change of our software development process. The change is spread into two dimensions, that is, from sequential to concurrent, and from centralized to distributed. With the concurrent development process model, multiple functions to a single software system are concurrently developed from the beginning of the development process, i.e. requirement specification, to system testing. In the distributed development process model, the development organization is decentralized into multiple development sites which are geographically distributed. The two dimensional changes require a fundamental re-think of our software process and brought about a significant impact on every aspect of software development activities ranging from individual developers to the entire project. We discuss the model, the issues in implementing the model, and our total system of managing the process, project and products.},
}

@Article{Alves2016,
  author    = {Alves, Nicolli SR and Mendes, Thiago S and de Mendon{\c{c}}a, Manoel G and Sp{\'\i}nola, Rodrigo O and Shull, Forrest and Seaman, Carolyn},
  journal   = {Information and Software Technology},
  title     = {Identification and management of technical debt: A systematic mapping study},
  year      = {2016},
  pages     = {100--121},
  volume    = {70},
  abstract  = {Context: The technical debt metaphor describes the effect of immature artifacts on software maintenance that bring a short-term benefit to the project in terms of increased productivity and lower cost, but that may have to be paid off with interest later. Much research has been performed to propose mechanisms to identify debt and decide the most appropriate moment to pay it off. It is important to investigate the current state of the art in order to provide both researchers and practitioners with information that enables further research activities as well as technical debt management in practice.
Objective: This paper has the following goals: to characterize the types of technical debt, identify indica- tors that can be used to find technical debt, identify management strategies, understand the maturity level of each proposal, and identify what visualization techniques have been proposed to support technical debt identification and management activities.
Method: A systematic mapping study was performed based on a set of three research questions. In total, 100 studies, dated from 2010 to 2014, were evaluated.
Results: We proposed an initial taxonomy of technical debt types, created a list of indicators that have been proposed to identify technical debt, identified the existing management strategies, and analyzed the current state of art on technical debt, identifying topics where new research efforts can be invested.
Conclusion: The results of this mapping study can help to identify points that still require further investigation in technical debt research.},
  keywords  = {rank4},
  publisher = {Elsevier},
  ranking   = {rank4},
}

@Article{Usman2018,
  author    = {Usman, Muhammad and Britto, Ricardo and Damm, Lars-Ola and Borstler, Jurgen},
  journal   = {Information and Software technology},
  title     = {Effort estimation in large-scale software development: An industrial case study},
  year      = {2018},
  pages     = {21--40},
  volume    = {99},
  abstract  = {Context: Software projects frequently incur schedule and budget overruns. Planning and estimation are particularly challenging in large and globally distributed agile projects. While software engineering researchers have been investigating effort estimation for many years to help practitioners to improve their estimation processes, there is little empirical research about effort estimation in large-scale distributed projects involving agile teams.

Objective: The objective of this paper is three-fold: i) To identify how effort estimation is carried out in large-scale distributed agile projects; ii) to analyze the accuracy of the effort estimation processes in large-scale distributed agile projects; and iii) to identify and investigate the factors that impact the accuracy of effort estimates in large-scale distributed agile projects.

Method: We performed an exploratory longitudinal case study. The data collection was operationalized through archival research and semi-structured interviews.

Results: The main findings of the studied case are: 1) A two-stage estimation process, with re-estimation at the analysis stage, improves the accuracy of the effort estimates; 2) underestimation is the dominant trend; 3) less mature teams incur larger effort overruns; 4) requirements with larger size/scope incur larger effort overruns; 5) requirements developed in multi-site settings incur larger effort overruns as compared to requirements developed in a co-located setting; 6) requirements priorities impact the accuracy of the effort estimates.

Conclusion: A two-stage effort estimation process can improve effort estimation accuracy and seems to address some of the challenges in large-scale agile software development. To improve effort estimates one needs to consider team maturity, distribution as well as requirements size and priorities.},
  keywords  = {rank3},
  publisher = {Elsevier},
  ranking   = {rank3},
}

@InProceedings{Casey2006,
  author    = {Casey, Valentine and Richardson, Ita},
  booktitle = {Proceedings of the 2006 International Workshop on Global Software Development for the Practitioner},
  title     = {Uncovering the Reality Within Virtual Software Teams},
  year      = {2006},
  address   = {New York, NY, USA},
  pages     = {66--72},
  publisher = {ACM},
  series    = {GSD '06},
  abstract  = {To support software development globalisation, organisations are increasingly implementing virtual team strategies. However, these teams have to work within the confines of the factors which distance introduces, thus not always allowing effective coordination, visibility, communication and cooperation to take place. The successful implementation and management of such teams must be done differently to those at single-site locations. To establish what factors significantly affect the implementation of virtual teams, the authors carried out qualitative research in two organisations in Ireland. Results from this research demonstrate that many factors are reality for those involved in global software development. In this paper we present five of these factors and discuss the impact these had on the virtual teams. These five are: use of communication tools, project management, process engineering, technical ability and knowledge transfer and motivational issues. If these are not explicitly addressed by management it can lead to serious problems.},
  acmid     = {1138523},
  isbn      = {1-59593-404-9},
  keywords  = {GSD, communication tools, global software development, knowledge transfer, motivational issues, process re-engineering, project management, technical ability, virtual teams},
  location  = {Shanghai, China},
  numpages  = {7},
}

@InProceedings{Kazman2015,
  author    = {Rick Kazman and Yuanfang Cai and Ran Mo and Qiong Feng and Lu Xiao and Serge Haziyev and Volodymyr Fedak and Andriy Shapochka},
  booktitle = {2015 {IEEE}/{ACM} 37th {IEEE} International Conference on Software Engineering},
  title     = {A Case Study in Locating the Architectural Roots of Technical Debt},
  year      = {2015},
  month     = {may},
  publisher = {{IEEE}},
  abstract  = {Our recent research has shown that, in large-scale software systems, defective files seldom exist alone. They are usually architecturally connected, and their architectural structures exhibit significant design flaws which propagate bugginess among files. We call these flawed structures the architecture roots, a type of technical debt that incurs high maintenance penalties. Removing the architecture roots of bugginess requires refactoring, but the benefits of refactoring have historically been difficult for architects to quantify or justify. In this paper, we present a case study of identifying and quantifying such architecture debts in a large-scale industrial software project. Our approach is to model and analyze software architecture as a set of design rule spaces (DRSpaces). Using data extracted from the project's development artifacts, we were able to identify the files implicated in architecture flaws and suggest refactorings based on removing these flaws. Then we built economic models of the before and (predicted) after states, which gave the organization confidence that doing the refactorings made business sense, in terms of a handsome return on investment.},
  doi       = {10.1109/icse.2015.146},
  keywords  = {rank4},
  ranking   = {rank4},
}

@Article{Heikkila2017,
  author      = {Heikkila, V.T. and Paasivaara, M. and Lasssenius, C. and Damian, D. and Engblom, C.},
  journal     = {Empirical Software Engineering},
  title       = {Managing the requirements flow from strategy to release in large-scale agile development: a case study at Ericsson},
  year        = {2017},
  issn        = {13823256},
  note        = {cited By 1},
  number      = {6},
  pages       = {2892-2936},
  volume      = {22},
  abstract    = {In a large organization, informal communication and simple backlogs are not sufficient for the management of requirements and development work. Many large organizations are struggling to successfully adopt agile methods, but there is still little scientific knowledge on requirements management in large-scale agile development organizations. We present an in-depth study of an Ericsson telecommunications node development organization which employs a large scale agile method to develop telecommunications system software. We describe how the requirements flow from strategy to release, and related benefits and problems. Data was collected by 43 interviews, which were analyzed qualitatively. The requirements management was done in three different processes, each of which had a different process model, purpose and planning horizon. The release project management process was plan-driven, feature development process was continuous and implementation management process was agile. The perceived benefits included reduced development lead time, increased flexibility, increased planning efficiency, increased developer motivation and improved communication effectiveness. The recognized problems included difficulties in balancing planning effort, overcommitment, insufficient understanding of the development team autonomy, defining the product owner role, balancing team specialization, organizing system-level work and growing technical debt. The study indicates that agile development methods can be successfully employed in organizations where the higher level planning processes are not agile. Combining agile methods with a flexible feature development process can bring many benefits, but large-scale software development seems to require specialist roles and significant coordination effort. © 2016, The Author(s).},
  affiliation = {Aalto University, PO Box 15400, Aalto, Finland; University of Victoria, PO Box 1700, STN CSC, Victoria, BC, Canada; Oy LM Ericsson AB, Kirkkonummi, Finland},
  coden       = {ESENF},
  doi         = {10.1007/s10664-016-9491-z},
  keywords    = {Agile manufacturing systems; Project management; Requirements engineering; Societies and institutions; Software engineering, Agile development organization; Agile software development; Communication effectiveness; Implementation managements; Large project; Project management process; Requirements management; Scrum, Software design, rank4},
  language    = {English},
  publisher   = {Springer New York LLC},
  ranking     = {rank4},
  source      = {Scopus},
}

@InProceedings{Falessi2013,
  author    = {Falessi, Davide and Shaw, Michele A. and Shull, Forrest and Mullen, Kathleen and Stein, Mark},
  booktitle = {Proceedings of the 4th International Workshop on Managing Technical Debt},
  title     = {Practical Considerations, Challenges, and Requirements of Tool-support for Managing Technical Debt},
  year      = {2013},
  address   = {Piscataway, NJ, USA},
  pages     = {16--19},
  publisher = {IEEE Press},
  series    = {MTD '13},
  abstract  = {Developing a software product with a high level of quality that also meets budget and schedule is the main goal of any organization. This usually implies making tradeoffs among conflicting aspects like number of features to implement, user perceived quality, time-to-market, and the ability of the company to maintain and improve the system in a feasible way in the future (aka, managing Technical Debt (TD)). In this paper we present a fresh perspective on TD from a CMMI Maturity Level 5 company. Examples, practical considerations, and challenges in dealing with TD are presented along with ten requirements of a tool for managing TD.},
  acmid     = {2663300},
  isbn      = {978-1-4673-6443-0},
  keywords  = {CMMI, decision-making, technical debt, rank4},
  location  = {San Francisco, California},
  numpages  = {4},
  ranking   = {rank4},
}

@Article{Harter2000,
  author    = {Harter, Donald E. and Krishnan, Mayuram S. and Slaughter, Sandra A.},
  journal   = {Manage. Sci.},
  title     = {Effects of Process Maturity on Quality, Cycle Time, and Effort in Software Product Development},
  year      = {2000},
  issn      = {0025-1909},
  month     = {apr},
  number    = {4},
  pages     = {451--466},
  volume    = {46},
  abstract  = {The information technology (IT) industry is characterized by rapid innovation and intense competition. To survive, IT firms must develop high quality software products on time and at low cost. A key issue is whether high levels of quality can be achieved without adversely impacting cycle time and effort. Conventional beliefs hold that processes to improve software quality can be implemented only at the expense of longer cycle times and greater development effort. However, an alternate view is that quality improvement, faster cycle time, and effort reduction can be simultaneously attained by reducing defects and rework. In this study, we empirically investigate the relationship between process maturity, quality, cycle time, and effort for the development of 30 software products by a major IT firm. We find that higher levels of process maturity as assessed by the Software Engineering Institute's Capability Maturity Model™ are associated with higher product quality, but also with increases in development effort. However, our findings indicate that the reductions in cycle time and effort due to improved quality outweigh the increases from achieving higher levels of process maturity. Thus, the net effect of process maturity is reduced cycle time and development effort.},
  acmid     = {970247},
  address   = {Institute for Operations Research and the Management Sciences (INFORMS), Linthicum, Maryland, USA},
  doi       = {10.1287/mnsc.46.4.451.12056},
  keywords  = {Capability maturity model, Software costs, Software cycle time, Software economics, Software process improvement, Software productivity, Software quality, rank2},
  numpages  = {16},
  publisher = {INFORMS},
  ranking   = {rank2},
}

@Article{YliHuumo2016,
  author      = {Yli-Huumo, J. and Maglyas, A. and Smolander, K.},
  journal     = {Journal of Systems and Software},
  title       = {How do software development teams manage technical debt? An empirical study},
  year        = {2016},
  issn        = {01641212},
  note        = {cited By 6},
  pages       = {195-218},
  volume      = {120},
  abstract    = {Technical debt (TD) is a metaphor for taking shortcuts or workarounds in technical decisions to gain short-term benefit in time-to-market and earlier software release. In this study, one large software development organization is investigated to gather empirical evidence related to the concept of technical debt management (TDM). We used the exploratory case study method to collect and analyze empirical data in the case organization by interviewing a total of 25 persons in eight software development teams. We were able to identify teams where the current strategy for TDM was only to fix TD when necessary, when it started to cause too much trouble for development. We also identified teams where the management had a systematic strategy to identify, measure and monitor TD during the development process. It seems that TDM can be associated with a similar maturity concept as software development in general. Development teams may raise their maturity by increasing their awareness and applying more advanced processes, techniques and tools in TDM. TDM is an essential part of sustainable software development, and companies have to find right approaches to deal with TD to produce healthy software that can be developed and maintained in the future. © 2016 The Authors},
  affiliation = {Lappeenranta University of Technology, School of Business and Management, Department of Innovation and Software, PO Box 20, Skinnarilankatu 34, Lappeenranta, Finland; Aalto University, School of Science, Department of Computer Science, P.O.Box 15400, Aalto, Finland},
  coden       = {JSSOD},
  doi         = {10.1016/j.jss.2016.05.018},
  keywords    = {Human resource management; Planning; Software engineering, Development process; Exploratory case studies; Software development organizations; Software development teams; Sustainable softwares; Technical debts; Technical decision; Techniques and tools, Software design, rank5},
  language    = {English},
  publisher   = {Elsevier Inc.},
  ranking     = {rank5},
  source      = {Scopus},
}

@Article{Rios2018,
  author    = {Nicolli Rios and Manoel Gomes de Mendon{\c{c}}a Neto and Rodrigo Oliveira Sp{\'{\i}}nola},
  journal   = {Information and Software Technology},
  title     = {A tertiary study on technical debt: Types, management strategies, research trends, and base information for practitioners},
  year      = {2018},
  month     = {oct},
  pages     = {117--145},
  volume    = {102},
  abstract  = {Context
The concept of technical debt (TD) contextualizes problems faced during software evolution considering the tasks that are not carried out adequately during its development. Currently, it is common to associate any impediment related to the software product and its development process to the definition of TD. This can bring confusion and ambiguity in the use of the term. Besides, due to the increasing amount of work in the area, it is difficult to have a comprehensive view of the plethora of proposals on TD management.

Objective
This paper intends to investigate the current state of research on TD by identifying what research topics have been considered, organizing research directions and practical knowledge that has already been defined, identifying the known types of TD, and organizing what activities, strategies and tools have been proposed to support the management of TD.

Method
A tertiary study was performed based on a set of five research questions. In total, 13 secondary studies, dated from 2012 to March 2018, were evaluated.

Results
The results of this tertiary study are beneficial for both practitioners and researchers. We evolved a taxonomy of TD types, identified a list of situations in which debt items can be found in software projects, and organized a map representing the state of the art of activities, strategies and tools to support TD management. Besides, we also summarized some research directions and practical knowledge, and identified the research topics that have been more considered in secondary studies.

Conclusion
This tertiary study revisited the TD landscape. Its results can help to identify points that still require further investigation in TD research.},
  doi       = {10.1016/j.infsof.2018.05.010},
  groups    = {armandosoaressousa:4},
  keywords  = {rank5},
  publisher = {Elsevier {BV}},
  ranking   = {rank5},
}

@InProceedings{Alzaghoul2014,
  author    = {E. Alzaghoul and R. Bahsoon},
  booktitle = {2014 23rd Australian Software Engineering Conference},
  title     = {Evaluating Technical Debt in Cloud-Based Architectures Using Real Options},
  year      = {2014},
  month     = {April},
  pages     = {1-10},
  abstract  = {A Cloud-based Service-Oriented Architecture (CBSOA) is typically composed of web services, which are offered off the cloud marketplace. CB-SOA can improve its utility and add value to its composition by switching among its constituent services. We look at the option to defer the decision of substitution under uncertainty. We exploit Binomial Options to the formulation. We quantify the time-value of the architecture decisions of switching web services and technical debt they can imply on the structure. As CB-SOA are market-sensitive, dynamic and volatile, the decision of deferral tends to be sensitive to these dynamics. Henceforth, the structural complexity of a CB-SOAcan change over time and so the technical debt as its constituent web services are modified, replaced, upgraded, etc. The method builds on Design Structure Matrix (DSM) and introduces time and complexity aware propagation cost metrics to assess the value of deferral decisions relative to changes in the structure. Architects of CB-SOA can use our method to assess the time value of deferring the decisions to switch web services relative to complexity, technical debt and value creation. We demonstrate the applicability of the method using an illustrative example.},
  doi       = {10.1109/ASWEC.2014.27},
  issn      = {1530-0803},
}

@Conference{Ampatzoglou2016,
  author    = {Ampatzoglou, A. and Ampatzoglou, A. and Chatzigeorgiou, A. and Avgeriou, P. and Abrahamsson, P. and Martini, A. and Zdun, U. and Systa, K.},
  booktitle = {2016 IEEE 8th International Workshop on Managing Technical Debt (MTD)},
  title     = {The Perception of Technical Debt in the Embedded Systems Domain: An Industrial Case Study},
  year      = {2016},
  month     = {Oct},
  note      = {cited By 2},
  pages     = {9-16},
  publisher = {Institute of Electrical and Electronics Engineers Inc.},
  abstract  = {Technical Debt Management (TDM) has drawn the attention of software industries during the last years, including embedded systems. However, we currently lack an overview of how practitioners from this application domain perceive technical debt. To this end, we conducted a multiple case study in the embedded systems industry, to investigate: (a) the expected life-time of components that have TD, (b) the most frequently occurring types of TD in them, and (c) the significance of TD against run-time quality attributes. The case study was performed on seven embedded systems industries (telecommunications, printing, smart manufacturing, sensors, etc.) from five countries (Greece, Netherlands, Sweden, Austria, and Finland). The results of the case study suggest that: (a) maintainability is more seriously considered when the expected lifetime of components is larger than ten years, (b) the most frequent types of debt are test, architectural, and code debt, and (c) in embedded systems the run-time qualities are prioritized compared to design-time qualities that are usually associated with TD. The obtained results can be useful for both researchers and practitioners: the former can focus their research on the most industrially-relevant aspects of TD, whereas the latter can be informed about the most common types of TD and how to focus their TDM processes. © 2016 IEEE.},
  doi       = {10.1109/MTD.2016.8},
  groups    = {armandosoaressousa:6},
  isbn      = {9781509038541},
  journal   = {Proceedings - 2016 IEEE 8th International Workshop on Managing Technical Debt, MTD 2016},
  keywords  = {rank3},
  language  = {English},
  ranking   = {rank3},
}

@InProceedings{Das2007,
  author    = {Das, Sumita and Lutters, Wayne G. and Seaman, Carolyn B.},
  booktitle = {Proceedings of the 2007 Symposium on Computer Human Interaction for the Management of Information Technology},
  title     = {Understanding Documentation Value in Software Maintenance},
  year      = {2007},
  address   = {New York, NY, USA},
  publisher = {ACM},
  series    = {CHIMIT '07},
  abstract  = {This study examines effective documentation use in software maintenance. Interviews with software maintainers, with diverse levels of experience, revealed three themes: reliance on source code, characteristics of useful documents, and the interplay between people in the maintenance environment and documentation. All of these findings improve our understanding of the role of documentation in maintenance. This awareness has practical import - project managers can fund the most useful forms of documentation and maintainers can improve their ability to locate and reuse this information.},
  acmid     = {1234790},
  articleno = {2},
  isbn      = {978-1-59593-635-6},
  keywords  = {documentation, software maintenance},
  location  = {Cambridge, Massachusetts},
}

@ARTICLE {Guo2016,
    author                  = {Guo, Y. and Spinola, R.O. and Seaman, C.},
    title                   = {Exploring the costs of technical debt management – a case study},
    journal                 = {Empirical Software Engineering},
    year                    = {2016},
    volume                  = {21},
    number                  = {1},
    pages                   = {159-182},
    note                    = {cited By 7},
    issn                    = {13823256},
    abstract                = {Technical debt is a metaphor for delayed software maintenance tasks. Incurring technical debt may bring short-term benefits to a project, but such benefits are often achieved at the cost of extra work in future, analogous to paying interest on the debt. Currently technical debt is managed implicitly, if at all. However, on large systems, it is too easy to lose track of delayed tasks or to misunderstand their impact. Therefore, we have proposed a new approach to managing technical debt, which we believe to be helpful for software managers to make informed decisions. In this study we explored the costs of the new approach by tracking the technical debt management activities in an on-going software project. The results from the study provided insights into the impact of technical debt management on software projects. In particular, we found that there is a significant start-up cost when beginning to track and monitor technical debt, but the cost of ongoing management soon declines to very reasonable levels. © 2014, Springer Science+Business Media New York.},
    affiliation             = {Department of Information Systems, University of Maryland Baltimore County, Baltimore, MD, United States; Department of Systems and Computing, University of Salvador, Salvador, Bahia, Brazil; Fraunhofer Project Center for Software and System Engineering at Federal University of Bahia, Salvador, Bahia, Brazil},
    coden                   = {ESENF},
    doi                     = {10.1007/s10664-014-9351-7},
    keywords                = {Decision making, Informed decision; Management activities; New approaches; Software managers; Software project; Software-maintenance tasks; Start-up costs; Technical debts, Costs, rank4},
    language                = {English},
    publisher               = {Springer New York LLC},
    source                  = {Scopus}
}

@InCollection{YliHuumo2016a,
  author    = {Jesse Yli-Huumo and Andrey Maglyas and Kari Smolander and Johan Haller and Hannu Törnroos},
  booktitle = {Product-Focused Software Process Improvement},
  publisher = {Springer International Publishing},
  title     = {Developing Processes to Increase Technical Debt Visibility and Manageability: An Action Research Study in Industry},
  year      = {2016},
  pages     = {368--378},
  abstract  = {The knowledge about technical debt and its management has increased in recent years. The interest of academia and industry has generated many viewpoints on technical debt. Technical debt management consists of technical and organizational aspects, which make it a challenge in software development. To increase technical debt visibility and manageability, new processes must be developed and thoroughly empirically tested for their applicability. In this paper, we use the action research methodology to design processes for identification, documentation, and prioritization of technical debt. Our partner in this research is a large Nordic IT company Tieto, currently in a need for new ways to improve their technical debt management. The results include a set of processes and templates that were successfully used to identify and document technical debt. The identified technical debt items were later prioritized based on evaluation by Tieto employees. Tieto was able to create a prioritized technical debt backlog, which is now used for reduction activities to create a healthy and sustainable product for the future.},
  doi       = {10.1007/978-3-319-49094-6_24},
  keywords  = {rank3},
  ranking   = {rank3},
}

@InProceedings{Klinger2011,
  author    = {Klinger, Tim and Tarr, Peri and Wagstrom, Patrick and Williams, Clay},
  booktitle = {Proceedings of the 2Nd Workshop on Managing Technical Debt},
  title     = {An Enterprise Perspective on Technical Debt},
  year      = {2011},
  address   = {New York, NY, USA},
  pages     = {35--38},
  publisher = {ACM},
  series    = {MTD '11},
  abstract  = {Technical debt is a term that has been used to describe the increased cost of changing or maintaining a system due to expedient shortcuts taken during its development. Much of the research on technical debt has focused on decisions made by project architects and individual developers who choose to trade off short-term gain for a longer-term cost. However, in the context of enterprise software development, such a model may be too narrow. We explore the premise that technical debt within the enterprise should be viewed as a tool similar to financial leverage, allowing the organization to incur debt to pursue options that it couldn't otherwise afford. We test this premise by interviewing a set of experienced architects to understand how decisions to acquire technical debt are made within an enterprise, and to what extent the acquisition of technical debt provides leverage. We find that in many cases, the decision to acquire technical debt is not made by technical architects, but rather by non-technical stakeholders who cause the project to acquire new technical debt or discover existing technical debt that wasn't previously visible. We conclude with some preliminary observations and recommendations for organizations to better manage technical debt in the presence of some enterprise-scale circumstances.},
  acmid     = {1985371},
  doi       = {10.1145/1985362.1985371},
  isbn      = {978-1-4503-0586-0},
  keywords  = {extended stakeholders, leverage, technical debt, rank5},
  location  = {Waikiki, Honolulu, HI, USA},
  numpages  = {4},
  ranking   = {rank5},
}

@INPROCEEDINGS {Codabux2013,
    author    = {Codabux, Zadia and Williams, Byron},
    title     = {Managing Technical Debt: An Industrial Case Study},
    booktitle = {Proceedings of the 4th International Workshop on Managing Technical Debt},
    year      = {2013},
    series    = {MTD '13},
    pages     = {8--15},
    address   = {Piscataway, NJ, USA},
    month     = {May},
    publisher = {IEEE Press},
    abstract  = {Technical debt is the consequence of trade-offs made during software development to ensure speedy releases. The research community lacks rigorously evaluated guidelines to help practitioners characterize, manage and prioritize debt. This paper describes a study conducted with an industrial partner during their implementation of Agile development practices for a large software development division within the company. The report contains our initial findings based on ethnographic observations and semi-structured interviews. The goal is to identify the best practices regarding managing technical debt so that the researchers and the practitioners can further evaluate these practices to extend their knowledge of the technical debt metaphor. We determined that the developers considered their own taxonomy of technical debt based on the type of work they were assigned and their personal understanding of the term. Despite management's high-level categories, the developers mostly considered design debt, testing debt and defect debt. In addition to developers having their own taxonomy, assigning dedicated teams for technical debt reduction and allowing other teams about 20% of time per sprint for debt reduction are good initiatives towards lowering technical debt. While technical debt has become a well-regarded concept in the Agile community, further empirical evaluation is needed to assess how to properly apply the concept for various development organizations.},
    acmid     = {2663299},
    doi       = {10.1109/MTD.2013.6608672},
    isbn      = {978-1-4673-6443-0},
    keywords  = {agile methods, industrial case study, scrum, semi-structure interviews, technical debt, rank5},
    location  = {San Francisco, California},
    numpages  = {8}
}

@InProceedings{FernandezSanchez2017,
  author    = {Carlos Fernandez-Sanchez and Hector Humanes and Juan Garbajosa and Jessica Diaz},
  booktitle = {2017 43rd Euromicro Conference on Software Engineering and Advanced Applications ({SEAA})},
  title     = {An Open Tool for Assisting in Technical Debt Management},
  year      = {2017},
  month     = {aug},
  publisher = {IEEE},
  abstract  = {Technical debt monitoring is one of the activities that have to be performed in technical debt management. To do that, there are different techniques that can be used to estimate technical debt and different tools that implement those different techniques. This paper presents TEDMA Tool, a tool for monitoring technical debt over the software evolution and that it is open to integrate third party tools. TEDMA is based on the analysis of source code repositories and is useful for researching using empirical data extracted from software projects. Currently, it is been used to analyze big projects in the execution of several case studies. The expected evolution of TEDMA will make the tool useful for software development industry.},
  keywords  = {rank4},
  ranking   = {rank4},
}

@Article{Mendes2019,
  author    = {Mendes, Thiago S and Gomes, Felipe GS and Gon{\c{c}}alves, David P and Mendon{\c{c}}a, Manoel G and Novais, Renato L and Sp{\'\i}nola, Rodrigo O},
  journal   = {Journal of the Brazilian Computer Society},
  title     = {VisminerTD: a tool for automatic identification and interactive monitoring of the evolution of technical debt items},
  year      = {2019},
  number    = {1},
  pages     = {2},
  volume    = {25},
  abstract  = {Technical debt (TD) contextualizes problems faced during software evolution considering the tasks that are not carried out adequately during software development. Software TD is a type of debt that brings a short-term benefit, but which may have to be paid with interest later on in the software development life cycle. Its presence brings risks to the project and can reduce its quality. It is worthwhile to have automatic mechanisms to monitor it, as TD monitoring requires the analysis of large amounts of complex data. Therefore, the combination of software metrics and code comment analysis, in the identification, and information visualization techniques, in monitoring, present themselves as a promising strategy to manage TD. This work presents VisminerTD, a tool that allows the automatic identification and interactive monitoring of the evolution of TD items by combining software metrics, code comment analysis, and information visualization. To evaluate its applicability, a feasibility study was carried out considering JUnit 4 and Apache Ant software projects. The results indicated that VisminerTD can support software development teams in monitoring TD items. In addition, a second case study was performed to assess the feasibility of the proposed tool regarding its usefulness, ease of use, and self-predicted future use. The results provided positive evidence on the use of the proposed tool, indicating (i) that it can be useful in supporting TD Identification and TD monitoring activities and (ii) that it can bring gains in terms of comprehensiveness and efficacy when evaluating the desirable time to identify and monitor different types of debt. Given the current scenario characterized by limited options of tools that combine different information to support automatic identification and monitoring of the evolution of TD items in software projects, VisminerTD can approximate the state-of-the-art and the state-of-the-practice in the TD area, contributing to a wider dissemination of the concept.},
  keywords  = {rank2},
  publisher = {Springer},
  ranking   = {rank2},
}

@Article{ClayShafer2010,
  author  = {Clay Shafer, Andrew},
  journal = {Cutter IT Journal},
  title   = {Infrastructure Debt: Revisiting the Foundation},
  year    = {2010},
  number  = {10},
  pages   = {36},
  volume  = {23},
}

@InProceedings{Besker2017,
  author    = {T. Besker and A. Martini and J. Bosch},
  booktitle = {2017 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
  title     = {The Pricey Bill of Technical Debt: When and by Whom will it be Paid?},
  year      = {2017},
  month     = {Sept},
  pages     = {13-23},
  abstract  = {Software companies need to support continuous and fast delivery of customer value both in short and a long-term perspective. However, this can be hindered by evolution limitations and high maintenance efforts due to internal software quality issues by what is described as Technical Debt. Although significant theoretical work has been undertaken to describe the negative effects of Technical Debt, these studies tend to have a weak empirical basis and often lack quantitative data. The aim of this study is to estimate wasted time, caused by the Technical Debt interest during the software life-cycle. This study also investigates how practitioners perceive and estimate the impact of the negative consequences due to Technical Debt during the software development process. This paper reports the results of both an online web-survey provided quantitative data from 258 participants and follow-up interviews with 32 industrial software practitioners. The importance and originality of this study contributes and provides novel insights into the research on Technical Debt by quantifying the perceived interest and the negative effects it has on the software development life-cycle. The findings show that on average, 36 percent of all development time is estimated to be wasted due to Technical Debt; Complex Architectural Design and Requirement Technical Debt generates most negative effect; and that most time is wasted on understanding and/or measuring the Technical Debt. Moreover, the analysis of the professional roles and the age of the software system in the survey revealed that different roles are affected differently and that the consequences of Technical Debt are also influenced by the age of the software system.},
  doi       = {10.1109/ICSME.2017.42},
  groups    = {armandosoaressousa:6},
  keywords  = {rank3},
  ranking   = {rank3},
}

@InProceedings{Digkas2018,
  author    = {Georgios Digkas and Mircea Lungu and Paris Avgeriou and Alexander Chatzigeorgiou and Apostolos Ampatzoglou},
  booktitle = {2018 {IEEE} 25th International Conference on Software Analysis, Evolution and Reengineering ({SANER})},
  title     = {How do developers fix issues and pay back technical debt in the Apache ecosystem?},
  year      = {2018},
  month     = {mar},
  publisher = {{IEEE}},
  abstract  = {During software evolution technical debt (TD) follows a constant ebb and flow, being incurred and paid back, sometimes in the same day and sometimes ten years later. There have been several studies in the literature investigating how technical debt in source code accumulates during time and the consequences of this accumulation for software maintenance. However, to the best of our knowledge there are no large scale studies that focus on the types of issues that are fixed and the amount of TD that is paid back during software evolution. In this paper we present the results of a case study, in which we analyzed the evolution of fifty-seven Java open-source software projects by the Apache Software Foundation at the temporal granularity level of weekly snapshots. In particular, we focus on the amount of technical debt that is paid back and the types of issues that are fixed. The findings reveal that a small subset of all issue types is responsible for the largest percentage of TD repayment and thus, targeting particular violations the development team can achieve higher benefits.},
  comment   = {repayment},
  doi       = {10.1109/saner.2018.8330205},
  groups    = {armandosoaressousa:4},
  keywords  = {rank5},
  ranking   = {rank5},
}

@Book{Campbell2013,
  author    = {Campbell, G and Papapetrou, Patroklos P},
  publisher = {Manning Publications Co.},
  title     = {SonarQube in action},
  year      = {2013},
}

@Article{Britto2016,
  author    = {Britto, Ricardo and Smite, Darja and Damm, Lars-Ola},
  journal   = {IEEE Software},
  title     = {Software architects in large-scale distributed projects: An Ericsson case study},
  year      = {2016},
  number    = {6},
  pages     = {48--55},
  volume    = {33},
  abstract  = {Software architects are key assets for successful development projects. However, not much research has investigated the challenges they face in large-scale distributed projects. So, researchers investigated how architects at Ericsson were organized, their roles and responsibilities, and the effort they spent guarding and governing a large-scale legacy product developed by teams at multiple locations. Despite recent trends such as microservices and agile development, Ericsson had to follow a more centralized approach to deal with the challenges of scale, distribution, and monolithic architecture of a legacy software product. So, the architectural decisions were centralized to a team of architects. The team extensively used code reviews to not only check the code's state but also reveal defects that could turn into maintainability problems. The study results also suggest that the effort architects spend designing architecture, guarding its integrity and evolvability, and mentoring development teams is directly related to team maturity. In addition, significant investment is needed whenever new teams and locations are onboarded.},
  keywords  = {rank4},
  publisher = {IEEE},
  ranking   = {rank4},
}

@InProceedings{Avritzer2015,
  author       = {Avritzer, Alberto and Beecham, Sarah and Britto, Ricardo and Kroll, Josiane and Menasche, Daniel Sadoc and Noll, John and Paasivaara, Maria},
  booktitle    = {Global Software Engineering (ICGSE), 2015 IEEE 10th International Conference on},
  title        = {Extending survivability models for global software development with media synchronicity theory},
  year         = {2015},
  organization = {IEEE},
  pages        = {23--32},
  abstract     = {In this paper we propose a new framework to assess
survivability of software projects accounting for media capability
details as introduced in Media Synchronicity Theory (MST).
Specifically, we add to our global engineering framework the
assessment of the impact of inadequate conveyance and convergence available in the communication infrastructure selected to
be used by the project, on the system ability to recover from
project disasters. We propose an analytical model to assess how
the project recovers from project disasters related to process
and communication failures. Our model is based on media
synchronicity theory to account for how information exchange
impacts recovery. Then, using the proposed model we evaluate
how different interventions impact communication effectiveness.
Finally, we parameterize and instantiate the proposed survivability model based on a data gathering campaign comprising thirty
surveys collected from senior global software development experts
at ICGSE’2014 and GSD’2015.},
}

@InProceedings{Britto2016a,
  author       = {Britto, Ricardo and {\v{S}}mite, Darja and Damm, Lars-Ola},
  booktitle    = {Proceedings of the 10th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement},
  title        = {Experiences from measuring learning and performance in large-scale distributed software development},
  year         = {2016},
  organization = {ACM},
  pages        = {17},
  abstract     = {Background: Developers and development teams in large-scale software development are often required to learn continuously. Organizations also face the need to train and support new developers and teams on-boarded in ongoing projects. Although learning is associated with performance improvements, experience shows that training and learning does not always result in a better performance or significant improvements might take too long.

Aims: In this paper, we report our experiences from establishing an approach to measure learning results and associated performance impact for developers and teams in Ericsson.

Method: Experiences reported herein are a part of an exploratory case study of an on-going large-scale distributed project in Ericsson. The data collected for our measurements included archival data and expert knowledge acquired through both unstructured and semi-structured interviews. While performing the measurements, we faced a number of challenges, documented in the form of lessons learned.

Results: We aggregated our experience in eight lessons learned related to collection, preparation and analysis of data for further measurement of learning potential and performance in large-scale distributed software development.

Conclusions: Measuring learning and performance is a challenging task. Major problems were related to data inconsistencies caused by, among other factors, distributed nature of the project. We believe that the documented experiences shared herein can help other researchers and practitioners to perform similar measurements and overcome the challenges of large-scale distributed software projects, as well as proactively address these challenges when establishing project measurement programs.},
}

@Article{Mayring2014,
  author    = {Mayring, Philipp},
  title     = {Qualitative content analysis: theoretical foundation, basic procedures and software solution},
  year      = {2014},
  publisher = {AUT},
}

@Article{Cavanagh1997,
  author   = {Cavanagh, Stephen},
  journal  = {Nurse researcher},
  title    = {Content analysis: concepts, methods and applications.},
  year     = {1997},
  number   = {3},
  pages    = {5--16},
  volume   = {4},
  keywords = {rank3},
  ranking  = {rank3},
}

@Article{Elo2008,
  author    = {Elo, Satu and Kyngas, Helvi},
  journal   = {Journal of advanced nursing},
  title     = {The qualitative content analysis process},
  year      = {2008},
  number    = {1},
  pages     = {107--115},
  volume    = {62},
  abstract  = {Aim. This paper is a description of inductive and deductive content analysis.

Background. Content analysis is a method that may be used with either qualitative or quantitative data and in an inductive or deductive way. Qualitative content analysis is commonly used in nursing studies but little has been published on the analysis process and many research books generally only provide a short description of this method.

Discussion. When using content analysis, the aim was to build a model to describe the phenomenon in a conceptual form. Both inductive and deductive analysis processes are represented as three main phases: preparation, organizing and reporting. The preparation phase is similar in both approaches. The concepts are derived from the data in inductive content analysis. Deductive content analysis is used when the structure of analysis is operationalized on the basis of previous knowledge.

Conclusion. Inductive content analysis is used in cases where there are no previous studies dealing with the phenomenon or when it is fragmented. A deductive approach is useful if the general aim was to test a previous theory in a different situation or to compare categories at different time periods.},
  keywords  = {rank3},
  publisher = {Wiley Online Library},
  ranking   = {rank3},
}

@Book{Runeson2012,
  author    = {Runeson, P. and Host, M. and Rainer, A. and Regnell, B.},
  publisher = {John Wiley Sons},
  title     = {Case Study Research in Software Engineering: Guidelines and Examples},
  year      = {2012},
  isbn      = {978-1118104354},
  keywords  = {rank2},
  ranking   = {rank2},
}

@Book{Trochim2015,
  author    = {Trochim, W. and Donnelly, J. P. and Arora, K.},
  publisher = {Cengage},
  title     = {Research Methods: The Essential Knowledge Base},
  year      = {2015},
  isbn      = {978-1133954774},
  keywords  = {rank3},
  ranking   = {rank3},
}

@Article{Chatterjee1986,
  author    = {Chatterjee, Samprit and Hadi, Ali S},
  journal   = {Statistical Science},
  title     = {Influential observations, high leverage points, and outliers in linear regression},
  year      = {1986},
  pages     = {379--393},
  publisher = {JSTOR},
}

@Book{Fox2015,
  author    = {Fox, John},
  publisher = {Sage Publications},
  title     = {Applied regression analysis and generalized linear models},
  year      = {2015},
}

@Article{Koenker1982,
  author    = {Koenker, Roger and Bassett Jr, Gilbert},
  journal   = {Econometrica: Journal of the Econometric Society},
  title     = {Robust tests for heteroscedasticity based on regression quantiles},
  year      = {1982},
  pages     = {43--61},
  publisher = {JSTOR},
}

@Article{Alin2010,
  author    = {Alin, Aylin},
  journal   = {Wiley Interdisciplinary Reviews: Computational Statistics},
  title     = {Multicollinearity},
  year      = {2010},
  number    = {3},
  pages     = {370--374},
  volume    = {2},
  publisher = {Wiley Online Library},
}

@Article{Carmel2001,
  author    = {Carmel, E. and Agarwal, R.},
  journal   = {IEEE Software},
  title     = {Tactical Approaches for Alleviating Distance in Global Software Development},
  year      = {2001},
  number    = {2},
  pages     = {22--29},
  volume    = {18},
  abstract  = {To overcome the problem of distance in global software development, various managers are experimenting and quickly adjusting their tactical approaches. We discuss some emerging approaches and explain their motivations from conceptual and practical perspectives. The most intuitive approach for alleviating distance is to apply communication technologies, but this is not our focus. Rather, we examine tactics that go beyond communication technologies, tactics aimed at reducing intensive collaboration, national and organizational cultural differences, and temporal distance.},
  acmid     = {626245},
  address   = {Los Alamitos, CA, USA},
  numpages  = {8},
  publisher = {IEEE Computer Society Press},
}

@InProceedings{Tamburri2013,
  author       = {Tamburri, Damian A and Kruchten, Philippe and Lago, Patricia and van Vliet, Hans},
  booktitle    = {2013 6th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE)},
  title        = {What is social debt in software engineering?},
  year         = {2013},
  organization = {IEEE},
  pages        = {93--96},
  abstract     = {“Social debt” in software engineering informally refers to unforeseen project cost connected to a “suboptimal” development community. The causes of suboptimal development communities can be many, ranging from global distance to organisational barriers to wrong or uninformed socio-technical decisions (i.e., decisions that influence both social and technical aspects of software development). Much like technical debt, social debt impacts heavily on software development success. We argue that, to ensure quality software engineering, practitioners should be provided with mechanisms to detect and manage the social debt connected to their development communities. This paper defines and elaborates on social debt, pointing out relevant research paths. We illustrate social debt by comparison with technical debt and discuss common real-life scenarios that exhibit “sub-optimal” development communities.},
  keywords     = {rank3},
  ranking      = {rank3},
}

@InCollection{Seaman2011,
  author    = {Seaman, Carolyn and Guo, Yuepu},
  booktitle = {Advances in Computers},
  publisher = {Elsevier},
  title     = {Measuring and monitoring technical debt},
  year      = {2011},
  pages     = {25--46},
  volume    = {82},
  abstract  = {Technical debt is a metaphor for immature, incomplete, or inadequate artifacts in the software development lifecycle that cause higher costs and lower quality in the long run. These artifacts remaining in a system affect subsequent development and maintenance activities, and so can be seen as a type of debt that the system developers owe the system. Incurring technical debt may speed up software development in the short run, but such benefit is achieved at the cost of extra work in the future, as if paying interest on the debt. In this sense, the technical debt metaphor characterizes the relationship between the short-term benefits of delay- ing certain software maintenance tasks or doing them quickly and less carefully, and the long-term cost of those delays. However, managing technical debt is more complicated than managing financial debt because of the uncertainty involved. In this chapter, the authors review the main issues associated with technical debt, and propose a technical debt management framework and a research plan for validation. The objective of our research agenda is to develop and validate a comprehensive technical debt theory that formalizes the relationship between the cost and benefit sides of the concept. Further, we propose to use the theory to propose mechanisms (processes and tools) for measuring and managing technical debt in software product maintenance. The theory and management mechanisms are intended ultimately to contribute to the improved quality of software and facilitate decision making in software maintenance.},
  keywords  = {rank3},
  ranking   = {rank3},
}

@Article{Lehtola2006,
  author    = {Lehtola, Laura and Kauppinen, Marjo},
  journal   = {Software Process: Improvement and Practice},
  title     = {Suitability of requirements prioritization methods for market-driven software product development},
  year      = {2006},
  number    = {1},
  pages     = {7--19},
  volume    = {11},
  abstract  = {In a company producing off‐the‐shelf software for mass markets, the future development steps of the products cannot be negotiated with one or few customers. The decisions concerning the priorities of the requirements must be made within the company, the developer bearing all the financial risks included. This means that finding the right priorities for the requirements is important. However, requirements prioritization is recognized as a difficult activity in software product development. The literature offers methods for requirements prioritization, but many authors report that practices in companies are mostly informal. In this study, we evaluated two requirements prioritization methods in industrial product development projects. In the first case, the users of the system evaluated the pair‐wise comparison technique for prioritizing user needs. In the second case, practitioners evaluated Wiegers' method for change requests. In addition, we interviewed 11 practitioners from 6 companies about their current requirements prioritization practices and the models that they use as a basis of their prioritization decisions. Our findings indicate that prioritization methods may have limited ability to support decision‐making in a complex area like requirements prioritization in market‐driven product development. In addition, there are practical difficulties in the usage of methods, and therefore, prioritization results should be taken more as being indicative than as an ultimate truth. Copyright © 2006 John Wiley & Sons, Ltd.},
  keywords  = {rank2},
  publisher = {Wiley Online Library},
  ranking   = {rank2},
}

@InProceedings{Davis2013,
  author       = {Davis, Noopur},
  booktitle    = {Agile Conference (AGILE), 2013},
  title        = {Driving quality improvement and reducing technical debt with the definition of done},
  year         = {2013},
  organization = {IEEE},
  pages        = {164--168},
  abstract     = {This paper describes our experiences in using the Scrum concept of Definition of Done to drive quality improvements and reduce technical debt. We also describe how the Definition of Done can be a vehicle to implement standards, use checklists, and introduce compliance measures in the Agile development process.},
}

@Article{Lim2012,
  author    = {Lim, Erin and Taksande, Nitin and Seaman, Carolyn},
  journal   = {IEEE software},
  title     = {A balancing act: what software practitioners have to say about technical debt},
  year      = {2012},
  number    = {6},
  pages     = {22--27},
  volume    = {29},
  abstract  = {An interview study involving 35 practitioners from a variety of domains aimed to characterize technical debt at the ground level to find out how software practitioners perceive it. The study also aimed to understand the context in which technical debt occurs, including its causes, symptoms, and effects. In addition, the study focused on how practitioners currently deal with technical debt. This analysis paints a picture of a large, complex balancing act of various short- and long-term concerns. The Web Extra gives the interview questions used by Erin Lim, Nitin Taksande, and Carolyn Seaman.},
  publisher = {IEEE},
}

@Article{Kruchten2012,
  author    = {Kruchten, Philippe and Nord, Robert L and Ozkaya, Ipek},
  journal   = {Ieee software},
  title     = {Technical debt: From metaphor to theory and practice},
  year      = {2012},
  number    = {6},
  pages     = {18--21},
  volume    = {29},
  abstract  = {The meTaphor of technical debt in software development was introduced two decades ago by Ward Cunningham1 to explain to nontechnical product stakeholders the need for what we call now “refactoring.” It has been refined and expanded since, notably by Steve McConnell in his taxonomy,2 Martin Fowler with his four quadrants,3 and Jim Highsmith and his colleagues from the Cutter Consortium with their model. of the impact of technical debt on the total cost of ownership. From the original description—“not quite right code which we postpone making it right”1—various people have used the metaphor of technical “debt” to describe many other kinds of debts or ills of software development, encom- passing broadly anything that stands in the way of deploying, selling, or evolv- ing a software system or anything that adds to the friction from which soft- ware development endeavors suffer: test debt, people debt, architectural debt, requirement debt, documenta- tion debt, or just an amorphous, all- encompassing software debt.5 Conse- quently, the concept of technical debt. in software development has become somewhat diluted lately. Is a new re- quirement, function, or feature not yet implemented “requirement debt”? Do we call postponing the development of a new function “planning debt”? The metaphor is losing some of its strength.},
  keywords  = {rank4},
  publisher = {IEEE},
  ranking   = {rank4},
}

@InProceedings{Guo2011,
  author       = {Guo, Yuepu and Seaman, Carolyn},
  booktitle    = {Proceedings of the 2nd Workshop on Managing Technical Debt},
  title        = {A portfolio approach to technical debt management},
  year         = {2011},
  organization = {ACM},
  pages        = {31--34},
  abstract     = {Technical debt describes the effect of immature software artifacts on software maintenance - the potential of extra effort required in future as if paying interest for the incurred debt. The uncertainty of interest payment further complicates the problem of what debt should be incurred or repaid and when. To help software managers make informed decisions, a portfolio approach is proposed in this paper. The approach leverages the portfolio management theory in the finance domain to determine the optimal collection of technical debt items that should be incurred or held. We expect this approach could provide a new perspective for technical debt management.},
  keywords     = {rank3},
  ranking      = {rank3},
}

@InProceedings{Besker2019,
  author       = {Besker, Terese and Martini, Antonio and Bosch, Jan},
  booktitle    = {2019 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  title        = {Technical debt triage in backlog management},
  year         = {2019},
  organization = {IEEE},
  pages        = {13--22},
  abstract     = {Remediation of technical debt through regular refactoring initiatives is considered vital for the software system's long and healthy life. However, since today's software companies face increasing pressure to deliver customer value continuously, the balance between spending developer time, effort, and resources on implementing new features or spending it on refactoring of technical debt becomes vital. The goal of this study is to explore how the prioritization of technical debt is carried out by practitioners within today's software industry. This study also investigates what factors influence the prioritization process and its related challenges. This paper reports the results of surveying 17 software practitioners, together with follow-up interviews with them. Our results show that there is no uniform way of prioritizing technical debt and that it is commonly done reactively without applying any explicit strategies. Often, technical debt issues are managed and prioritized in a shadow backlog, separate from the official sprint backlog. This study was also able to identify several different challenges related to prioritizing technical debt, such as the lack of quantitative information about the technical debt items and that the refactoring of technical debt issues competes with the implementation of customer requirements.},
  keywords     = {rank4},
  ranking      = {rank4},
}

@Article{Kitchenham2007,
  author    = {Kitchenham, Barbara and Charters, Stuart},
  title     = {Guidelines for performing systematic literature reviews in software engineering},
  year      = {2007},
  keywords  = {rank3},
  publisher = {Citeseer},
  ranking   = {rank3},
}

@InProceedings{Petersen2008,
  author    = {Petersen, Kai and Feldt, Robert and Mujtaba, Shahid and Mattsson, Michael},
  booktitle = {12th International Conference on Evaluation and Assessment in Software Engineering (EASE) 12},
  title     = {Systematic mapping studies in software engineering},
  year      = {2008},
  pages     = {1--10},
  abstract  = {BACKGROUND: A software engineering systematic map is a defined method to build a classification scheme and structure a software engineering field of interest. The analysis of results focuses on frequencies of publications for categories within the scheme. Thereby, the coverage of the research field can be determined. Different facets of the scheme can also be combined to answer more specific research questions.

OBJECTIVE: We describe how to conduct a systematic mapping study in software engineering and provide guidelines. We also compare systematic maps and systematic reviews to clarify how to chose between them. This comparison leads to a set of guidelines for systematic maps.

METHOD: We have defined a systematic mapping process and applied it to complete a systematic mapping study. Furthermore, we compare systematic maps with systematic reviews by systematically analyzing existing systematic reviews.

RESULTS: We describe a process for software engineering systematic mapping studies and compare it to systematic reviews. Based on this, guidelines for conducting systematic maps are defined.

CONCLUSIONS: Systematic maps and reviews are different in terms of goals, breadth, validity issues and implications. Thus, they should be used complementarily and require different methods (e.g., for analysis).},
  keywords  = {rank4},
  ranking   = {rank4},
}

@Article{Perry1992,
  author    = {Perry, Dewayne E and Wolf, Alexander L},
  journal   = {ACM SIGSOFT Software engineering notes},
  title     = {Foundations for the study of software architecture},
  year      = {1992},
  number    = {4},
  pages     = {40--52},
  volume    = {17},
  abstract  = {The purpose of this paper is to build the foundation for software architecture. We first develop an intuition for software architecture by appealing to several well-established architectural disciplines. On the basis of this intuition, we present a model of software architecture that consists of three components: elements, form, and rationale. Elements are either processing, data, or connecting elements. Form is defined in terms of the properties of, and the relationships among, the elements --- that is, the constraints on the elements. The rationale provides the underlying basis for the architecture in terms of the system constraints, which most often derive from the system requirements. We discuss the components of the model in the context of both architectures and architectural styles and present an extended example to illustrate some important architecture and style considerations. We conclude by presenting some of the benefits of our approach to software architecture, summarizing our contributions, and relating our approach to other current work.},
  keywords  = {rank5},
  publisher = {ACM New York, NY, USA},
  ranking   = {rank5},
}

@Article{Besker2018,
  author    = {Besker, Terese and Martini, Antonio and Bosch, Jan},
  journal   = {Journal of Systems and Software},
  title     = {Managing architectural technical debt: A unified model and systematic literature review},
  year      = {2018},
  pages     = {1--16},
  volume    = {135},
  abstract  = {Large Software Companies need to support the continuous and fast delivery of customer value in both the short and long term. However, this can be impeded if the evolution and maintenance of existing systems is hampered by what has been recently termed Technical Debt (TD). Specifically, Architectural TD has re- ceived increased attention in the last few years due to its significant impact on system success and, left unchecked, it can cause expensive repercussions. It is therefore important to understand the underlying factors of architectural TD. With this as background, there is a need for a descriptive model to illustrate and explain different architectural TD issues. The aim of this study is to synthesize and compile research efforts with the goal of creating new knowledge with a specific interest in the architectural TD field. The contribution of this paper is the presentation of a novel descriptive model, providing a comprehensive interpretation of the architectural TD phenomenon. This model categorizes the main characteristics of architectural TD and reveals their relations. The results show that, by using this model, different stake- holders could increase the system’s success rate, and lower the rate of negative consequences, by raising awareness about architectural TD.},
  keywords  = {rank5},
  publisher = {Elsevier},
  ranking   = {rank5},
}

@InProceedings{Martini2015,
  author       = {Martini, Antonio and Bosch, Jan},
  booktitle    = {2015 12th Working IEEE/IFIP Conference on Software Architecture},
  title        = {The danger of architectural technical debt: Contagious debt and vicious circles},
  year         = {2015},
  organization = {IEEE},
  pages        = {1--10},
  abstract     = {A known problem in large software companies is to balance the prioritization of short-term with long-term viability. Specifically, architecture violations (Architecture Technical Debt) taken to deliver fast might hinder future feature development. However, some technical debt requires more interest to be paid than other. We have investigated which Technical Debt items generate more effort and how this effort is manifested during software development. We conducted a multiple-case embedded case study comprehending 7 sites at 5 large international software companies. We found that some Technical Debt items are contagious, causing other parts of the system to be contaminated with the same problem, which may lead to non-linear growth of interest. We also identify another socio-technical phenomenon, for which a combination of weak awareness of debt, time pressure and refactoring creates Vicious Circles of events during the development. Such phenomena need to be identified and stopped before the development is led to a crisis point. Finally, this paper presents a taxonomy of the most dangerous items identified during the qualitative investigation and a model of their effects that can be used for prioritization, for further investigation and as a quality model for extracting more precise and context-specific metrics.},
  keywords     = {rank4},
  ranking      = {rank4},
}

@Article{Li2015a,
  author    = {Li, Zengyang and Avgeriou, Paris and Liang, Peng},
  journal   = {Journal of Systems and Software},
  title     = {A systematic mapping study on technical debt and its management},
  year      = {2015},
  pages     = {193--220},
  volume    = {101},
  abstract  = {Context
Technical debt (TD) is a metaphor reflecting technical compromises that can yield short-term benefit but may hurt the long-term health of a software system.

Objective
This work aims at collecting studies on TD and TD management (TDM), and making a classification and thematic analysis on these studies, to obtain a comprehensive understanding on the TD concept and an overview on the current state of research on TDM.

Method
A systematic mapping study was performed to identify and analyze research on TD and its management, covering publications between 1992 and 2013.

Results
Ninety-four studies were finally selected. TD was classified into 10 types, 8 TDM activities were identified, and 29 tools for TDM were collected.

Conclusions
The term “debt” has been used in different ways by different people, which leads to ambiguous interpretation of the term. Code-related TD and its management have gained the most attention. There is a need for more empirical studies with high-quality evidence on the whole TDM process and on the application of specific TDM approaches in industrial settings. Moreover, dedicated TDM tools are needed for managing various types of TD in the whole TDM process.},
  keywords  = {rank5},
  publisher = {Elsevier},
  ranking   = {rank5},
}

@InProceedings{Nord2012,
  author       = {Nord, Robert L and Ozkaya, Ipek and Kruchten, Philippe and Gonzalez-Rojas, Marco},
  booktitle    = {2012 Joint Working IEEE/IFIP Conference on Software Architecture and European Conference on Software Architecture},
  title        = {In search of a metric for managing architectural technical debt},
  year         = {2012},
  organization = {IEEE},
  pages        = {91--100},
  abstract     = {Practices designed to expedite the delivery of stakeholder value can paradoxically lead to unexpected rework costs that ultimately degrade the flow of value over time. This is especially observable when features are developed based on immediate value, while dependencies that may slow down future development efforts are neglected. The technical debt metaphor conceptualizes this tradeoff between short-term and long-term value: taking shortcuts to optimize the delivery of features in the short term incurs debt, analogous to financial debt, that must be paid off later to optimize long-term success. In this paper, we describe taking an architecture-focused and measurement-based approach to develop a metric that assists in strategically managing technical debt. Such an approach can be used to optimize the cost of development over time while continuing to deliver value to the customer. We demonstrate our approach by describing its application to an ongoing system development effort.},
  keywords     = {rank5},
  ranking      = {rank5},
}

@Book{Fleiss2013,
  author    = {Fleiss, Joseph L and Levin, Bruce and Paik, Myunghee Cho},
  publisher = {john wiley \& sons},
  title     = {Statistical methods for rates and proportions},
  year      = {2013},
}

@InProceedings{Verdecchia2018,
  author       = {Verdecchia, Roberto and Malavolta, Ivano and Lago, Patricia},
  booktitle    = {2018 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  title        = {Architectural technical debt identification: The research landscape},
  year         = {2018},
  organization = {IEEE},
  pages        = {11--20},
  abstract     = {Architectural Technical Debt (ATD) regards sub-optimal design decisions that bring short-term benefits to the cost of long-term gradual deterioration of the quality of the architecture of a software system. The identification of ATD strongly in uences the technical and economic sustainability of software systems and is attracting growing interest in the scientific community. During the years several approaches for ATD identification have been conceived, each of them addressing ATD from diferent perspectives and with heterogeneous characteristics. In this paper we apply the systematic mapping study methodology for identifying, classifying, and evaluating the state of the art on ATD identification from the following three perspectives: publication trends, characteristics, and potential for industrial adoption. Specically, starting from a set of 509 potentially relevant studies, we systematically selected 47 primary studies and analyzed them according to a rigorously-de ned classification framework. The analysis of the obtained results supports both researchers and practitioners by providing (i) an assessment of current research trends and gaps in ATD identification, (ii) a solid foundation for understanding existing (and future) research on ATD identification, and (iii) a rigorous evaluation of its potential for industrial adoption.},
  keywords     = {rank5},
  ranking      = {rank5},
}

@Article{Usman2017,
  author    = {Usman, Muhammad and Britto, Ricardo and B{\"o}rstler, J{\"u}rgen and Mendes, Emilia},
  journal   = {Information and Software Technology},
  title     = {Taxonomies in software engineering: A systematic mapping study and a revised taxonomy development method},
  year      = {2017},
  pages     = {43--59},
  volume    = {85},
  abstract  = {Context: Software Engineering (SE) is an evolving discipline with new subareas being continuously developed and added. To structure and better understand the SE body of knowledge, taxonomies have been proposed in all SE knowledge areas.

Objective: The objective of this paper is to characterize the state-of-the-art research on SE taxonomies.

Method: A systematic mapping study was conducted, based on 270 primary studies.

Results: An increasing number of SE taxonomies have been published since 2000 in a broad range of venues, including the top SE journals and conferences. The majority of taxonomies can be grouped into the following SWEBOK knowledge areas: construction (19.55%), design (19.55%), requirements (15.50%) and maintenance (11.81%). Illustration (45.76%) is the most frequently used approach for taxonomy validation. Hierarchy (53.14%) and faceted analysis (39.48%) are the most frequently used classification structures. Most taxonomies rely on qualitative procedures to classify subject matter instances, but in most cases (86.53%) these procedures are not described in sufficient detail. The majority of the taxonomies (97%) target unique subject matters and many taxonomy-papers are cited frequently. Most SE taxonomies are designed in an ad-hoc way. To address this issue, we have revised an existing method for developing taxonomies in a more systematic way.

Conclusion: There is a strong interest in taxonomies in SE, but few taxonomies are extended or revised. Taxonomy design decisions regarding the used classification structures, procedures and descriptive bases are usually not well described and motivated.},
  publisher = {Elsevier},
}

@Article{Pai2004,
  author   = {Pai, Madhukar and McCulloch, Michael and Gorman, Jennifer D and Pai, Nitika and Enanoria, Wayne and Kennedy, Gail and Tharyan, Prathap and Colford, Jr JM},
  journal  = {The National medical journal of India},
  title    = {Systematic reviews and meta-analyses: an illustrated, step-by-step guide.},
  year     = {2004},
  number   = {2},
  pages    = {86--95},
  volume   = {17},
  abstract = {Systematic reviews and meta-analyses synthesize data from existing primary research, and well-conducted reviews offer clinicians a practical solution to the problem of staying current in their fields of interest. A whole generation of secondary journals, pre-appraised evidence libraries and periodically updated electronic texts are now available to clinicians. However, not all systematic reviews are of high quality, and it is important to be able to critically assess their validity and applicability. This article is an illustrated guide for conducting systematic reviews. A clear understanding of the process will provide clinicians with the tools to judiciously appraise reviews and interpret them. We hope that it will enable clinicians to conduct systematic reviews, generate high-quality evidence, and contribute to the evidence-based medicine movement.},
  keywords = {rank3},
  ranking  = {rank3},
}

@Article{Wieringa2006,
  author    = {Wieringa, Roel and Maiden, Neil and Mead, Nancy and Rolland, Colette},
  journal   = {Requirements engineering},
  title     = {Requirements engineering paper classification and evaluation criteria: a proposal and a discussion},
  year      = {2006},
  number    = {1},
  pages     = {102--107},
  volume    = {11},
  abstract  = {In recent years, members of the steering committee of the IEEE Requirements Engineering (RE) Conference have discussed paper classification and evaluation criteria for RE papers. The immediate trigger for this discussion was our concern about differences in opinion that sometimes arise in program committees about the criteria to be used in evaluating papers. If program committee members do not all use the same criteria, or if they use criteria different from those used by authors, then papers might be rejected or accepted for the wrong reasons. Surely not all papers should be evaluated according to the same criteria. Some papers describe new techniques but do not report on empirical research; others describe new conceptual frameworks for investigating certain RE problems; others report on industrial experience with existing RE techniques. Other kinds of papers can also be easily recognized. All of these types of papers should be evaluated according to different criteria. But we are far from a consensus about what classes of paper we should distinguish, and what the criteria are for each of these classes.

We see a variety of evaluation criteria in journals too. At one extreme is the set of nine genres used by IEEE Software [15], all of which have different evaluation criteria. At the other extreme is the single paper class recognized by the Requirements Engineering Journal, which has the following evaluation criteria: originality, utility, technical contribution, and relation to previous work. Apparently, the only paper class recognized by the Requirements Engineering Journal is a paper describing an original and useful solution technique. This corresponds to the “how to” genre of IEEE Software. This leaves authors and reviewers for the Requirements Engineering Journal in the dark about how other classes of papers should be judged, such as experience reports, empirical studies, or tutorials, none of which describe an original technique. This might lead to the use, by reviewers, of evaluation criteria unknown to authors, or even to the use of mutually inconsistent evaluation criteria by different reviewers of the same submission.

The calls for papers of successive RE conferences, in which some of us acted as program chair, show an evolution of paper classification and evaluation schemes. Each scheme was based on the experience of the previous chair, and we tried to pass on our experience to the next chair. We also discussed our ideas with other members of the Steering Committee of the RE conferences, and with RE researchers outside the Steering Committee. This short note presents the outcome of those discussions in the form of a proposal for paper classification and a set of evaluation criteria for different paper classes. We hope to include more people in the discussion and thereby further improve the classification and evaluation scheme.

In Section 2, we sketch the rationale for our classification. Section 3 presents the classification, and Section 4 concludes with a discussion of background ideas and related work.},
  keywords  = {rank3},
  publisher = {Springer},
  ranking   = {rank3},
}

@InProceedings{Martini2016,
  author       = {Martini, Antonio and Bosch, Jan},
  booktitle    = {2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C)},
  title        = {An empirically developed method to aid decisions on architectural technical debt refactoring: AnaConDebt},
  year         = {2016},
  organization = {IEEE},
  pages        = {31--40},
  abstract     = {Architectural Technical Debt is regarded as sub-optimal architectural solutions that need to be refactored in order to avoid the payment of a costly interest in the future. However, decisions on if and when to refactor architecture are extremely important and difficult to take, since changing software at the architectural level is quite expensive. Therefore it is important, for software organizations, to have methods and tools that aid architects and managers to understand if Architecture Technical Debt will generate a costly and growing interest to be paid or not. Current knowledge, especially empirically developed and evaluated, is quite scarce. In this paper we developed and evaluated a method, AnaConDebt, by analyzing, together with several practitioners, 12 existing cases of Architecture Debt in 6 companies. The method has been refined several times in order to be useful and effective in practice. We also report the evaluation of the method with a final case, for which we present anonymized results and subsequent refactoring decisions. The method consists of several components that need to be analyzed, combining the theoretical Technical Debt framework and the practical experience of the practitioners, in order to identify the key factors involved in the growth of interest. The output of the method shows summarized indicators that visualizes the factors in a useful way for the stakeholders. This analysis aids the practitioners in deciding on if and when to refactor Architectural Technical Debt items. The method has been evaluated and has been proven useful to support the architects into systematically analyze and decide upon a case.},
  keywords     = {rank5},
  ranking      = {rank5},
}

@InProceedings{Brown2010,
  author    = {Brown, Nanette and Cai, Yuanfang and Guo, Yuepu and Kazman, Rick and Kim, Miryung and Kruchten, Philippe and Lim, Erin and MacCormack, Alan and Nord, Robert and Ozkaya, Ipek and others},
  booktitle = {Proceedings of the FSE/SDP workshop on Future of software engineering research},
  title     = {Managing technical debt in software-reliant systems},
  year      = {2010},
  pages     = {47--52},
  abstract  = {Delivering increasingly complex software-reliant systems demands better ways to manage the long-term effects of short- term expedients. The technical debt metaphor is gaining significant traction in the agile development community as a way to understand and communicate such issues. The idea is that developers sometimes accept compromises in a system in one dimension (e.g., modularity) to meet an urgent demand in some other dimension (e.g., a deadline), and that such compromises incur a “debt”: on which “interest” has to be paid and which the “principal” should be repaid at some point for the long-term health of the project. We argue that the software engineering research community has an opportunity to study and improve this concept. We can offer software engineers a foundation for managing such trade-offs based on models of their economic impacts. Therefore, we propose managing technical debt as a part of the future research agenda for the software engineering field.},
  keywords  = {rank4},
  ranking   = {rank4},
}

@InCollection{Li2014,
  author    = {Li, Zengyang and Liang, Peng and Avgeriou, Paris},
  booktitle = {Economics-Driven Software Architecture},
  publisher = {Elsevier},
  title     = {Architectural debt management in value-oriented architecting},
  year      = {2014},
  pages     = {183--204},
  abstract  = {Architectural technical debt (ATD) may be incurred when making architecture decisions. In most cases, ATD is not effectively managed in the architecting process: It is not made explicit, and architecture decision making does not consider the ATD incurred by the different design options. This chapter proposes a conceptual model of ATD and an architectural technical debt management process applying this ATD conceptual model in order to facilitate decision making in a value-oriented perspective of architecting. We also demonstrate how ATD management can be employed in architectural synthesis and evaluation in a case study. The contribution of this work provides a controllable and predictable balance between the value and cost of architecture design in the long term.},
  keywords  = {rank5},
  ranking   = {rank5},
}

@Article{Tom2013,
  author    = {Tom, Edith and Aurum, Ayb{\"u}Ke and Vidgen, Richard},
  journal   = {Journal of Systems and Software},
  title     = {An exploration of technical debt},
  year      = {2013},
  number    = {6},
  pages     = {1498--1516},
  volume    = {86},
  abstract  = {Context
Whilst technical debt is considered to be detrimental to the long term success of software development, it appears to be poorly understood in academic literature. The absence of a clear definition and model for technical debt exacerbates the challenge of its identification and adequate management, thus preventing the realisation of technical debt's utility as a conceptual and technical communication device.

Objective
To make a critical examination of technical debt and consolidate understanding of the nature of technical debt and its implications for software development.

Method
An exploratory case study technique that involves multivocal literature review, supplemented by interviews with software practitioners and academics to establish the boundaries of the technical debt phenomenon.

Result
A key outcome of this research is the creation of a theoretical framework that provides a holistic view of technical debt comprising a set of technical debts dimensions, attributes, precedents and outcomes, as well as the phenomenon itself and a taxonomy that describes and encompasses different forms of the technical debt phenomenon.

Conclusion
The proposed framework provides a useful approach to understanding the overall phenomenon of technical debt for practical purposes. Future research should incorporate empirical studies to validate heuristics and techniques that will assist practitioners in their management of technical debt.},
  keywords  = {rank4},
  publisher = {Elsevier},
  ranking   = {rank4},
}

@Article{Curtis2012,
  author    = {Curtis, Bill and Sappidi, Jay and Szynkarski, Alexandra},
  journal   = {IEEE software},
  title     = {Estimating the principal of an application's technical debt},
  year      = {2012},
  number    = {6},
  pages     = {34--42},
  volume    = {29},
  abstract  = {This article characterizes technical debt across 700 business applications, comprising 357 MLOC. These applications were analyzed against more than 1,200 rules of good architectural and coding practice. The authors present a formula with adjustable parameters for estimating the principal of technical debt from structural quality data.},
  keywords  = {rank5},
  publisher = {IEEE},
  ranking   = {rank5},
}

@InProceedings{Potdar2014,
  author       = {Potdar, Aniket and Shihab, Emad},
  booktitle    = {2014 IEEE International Conference on Software Maintenance and Evolution},
  title        = {An exploratory study on self-admitted technical debt},
  year         = {2014},
  organization = {IEEE},
  pages        = {91--100},
  abstract     = {Throughout a software development life cycle, developers knowingly commit code that is either incomplete, requires rework, produces errors, or is a temporary workaround. Such incomplete or temporary workarounds are commonly referred to as 'technical debt'. Our experience indicates that self-admitted technical debt is common in software projects and may negatively impact software maintenance, however, to date very little is known about them. Therefore, in this paper, we use source-code comments in four large open source software projects-Eclipse, Chromium OS, Apache HTTP Server, and ArgoUML to identify self-admitted technical debt. Using the identified technical debt, we study 1) the amount of self-admitted technical debt found in these projects, 2) why this self-admitted technical debt was introduced into the software projects and 3) how likely is the self-admitted technical debt to be removed after their introduction. We find that the amount of self-admitted technical debt exists in 2.4%-31% of the files. Furthermore, we find that developers with higher experience tend to introduce most of the self-admitted technical debt and that time pressures and complexity of the code do not correlate with the amount of self-admitted technical debt. Lastly, although self-admitted technical debt is meant to be addressed or removed in the future, only between 26.3%-63.5% of self-admitted technical debt gets removed from projects after introduction.},
  keywords     = {rank3},
  ranking      = {rank3},
}

% Architectural Smells

@Article{Sharma2020,
  author    = {Sharma, Tushar and Singh, Paramvir and Spinellis, Diomidis},
  journal   = {Empirical Software Engineering},
  title     = {An empirical investigation on the relationship between design and architecture smells},
  year      = {2020},
  number    = {5},
  pages     = {4020--4068},
  volume    = {25},
  abstract  = {Context:
Architecture of a software system represents the key design decisions and therefore its quality plays an important role to keep the software maintainable. Code smells are indicators of quality issues in a software system and are classified based on their granularity, scope, and impact. Despite a plethora of existing work on smells, a detailed exploration of architecture smells, their characteristics, and their relationships with smells in other granularities is missing.

Objective:
The paper aims to study architecture smells characteristics, investigate correlation, collocation, and causation relationships between architecture and design smells.

Method:
We implement smell detection support for seven architecture smells. We mine 3 073 open-source repositories containing more than 118 million lines of C# code and empirically investigate the relationships between seven architecture and 19 design smells.

Results:
We find that smell density does not depend on repository size. Cumulatively, architecture smells are highly correlated with design smells. Our collocation analysis finds that the majority of design and architecture smell pairs do not exhibit collocation. Finally, our causality analysis reveals that design smells cause architecture smells.},
  publisher = {Springer},
}

% Comformance checking

@InProceedings{Knodel2006,
  author       = {Knodel, Jens and Lindvall, Mikael and Muthig, Dirk and Naab, Matthias},
  booktitle    = {Conference on Software Maintenance and Reengineering (CSMR'06)},
  title        = {Static evaluation of software architectures},
  year         = {2006},
  organization = {IEEE},
  pages        = {10--pp},
  abstract     = {The software architecture is one of the most crucial artifacts within the lifecycle of a software system. Decisions made at the architectural level directly enable, facilitate, hamper, or interfere with the achievement of business goals, functional and quality requirements. Architecture evaluations play an important role in the development and evolution of software systems since they determine how adequate the architecture is for its intended usage. This paper summarizes our practical experience with using architecture evaluations and gives an overview on when and how static architecture evaluations contribute to architecture development. We identify ten distinct purposes and needs for static architecture evaluations and illustrate them using a set of industrial and academic case studies. In particular, we show how subsequent steps in architecture development are influenced by the results from architecture evaluations},
  keywords     = {rank4},
  ranking      = {rank4},
}

@Article{Brooks1974,
  author   = {Brooks, Frederick P},
  journal  = {Datamation},
  title    = {The mythical man-month},
  year     = {1974},
  number   = {12},
  pages    = {44--52},
  volume   = {20},
  abstract = {The more complex is a problem, it does not always put more people to help solve the problem.},
  keywords = {rank3},
  ranking  = {rank3},
}

@Book{Kruchten2019,
  author    = {Kruchten, Philippe and Nord, Robert and Ozkaya, Ipek},
  publisher = {Addison-Wesley Professional},
  title     = {Managing Technical Debt: Reducing Friction in Software Development},
  year      = {2019},
  keywords  = {rank5},
  ranking   = {rank5},
}

@InProceedings{Eliasson2015,
  author       = {Eliasson, Ulf and Martini, Antonio and Kaufmann, Robert and Odeh, Sam},
  booktitle    = {2015 IEEE 7th International Workshop on Managing Technical Debt (MTD)},
  title        = {Identifying and visualizing Architectural Debt and its efficiency interest in the automotive domain: A case study},
  year         = {2015},
  organization = {IEEE},
  pages        = {33--40},
  abstract     = {Architectural Technical Debt has recently received the attention of the scientific community, as a suitable metaphor for describing sub-optimal architectural solutions having short- term benefits but causing a long-term negative impact. We study such phenomenon in the context of Volvo Car Group, where the development of modern cars includes complex systems with mechanical components, electronics and software working together in a complicated network to perform an increasing number of functions and meet the demands of many customers. This puts high requirements on having an architecture and design that can handle these demands. Therefore, it is of utmost importance to manage Architecture Technical Debt, in order to make sure that the advantages of sub-optimal solutions do not lead to the payment of a large interest. We conducted a case study at Volvo Car Group and we discovered that architectural violations in the detailed design had an impact on the efficiency of the communication between components, which is an essential quality in cars and other embedded systems. Such interest is not studied in literature, which usually focuses on the maintainability aspects of Technical Debt. To explore how this Architectural Technical Debt and its interest could be communicated to stakeholders, we developed a visual tool. We found that not only was the Architectural Debt highly interesting for the architects and other stakeholders at VCG, but the proposed visualization was useful in increasing the awareness of the impact that Architectural Technical Debt had on efficiency.},
  keywords     = {rank4},
  ranking      = {rank4},
}

@InProceedings{Xiao2014,
  author    = {Xiao, Lu and Cai, Yuanfang and Kazman, Rick},
  booktitle = {Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
  title     = {Titan: A toolset that connects software architecture with quality analysis},
  year      = {2014},
  pages     = {763--766},
  abstract  = {In this tool demo, we will illustrate our tool---Titan---that supports a new architecture model: design rule spaces (DRSpaces). We will show how Titan can capture both architecture and evolutionary structure and help to bridge the gap between architecture and defect prediction. We will demo how to use our toolset to capture hundreds of buggy files into just a few architecturally related groups, and to reveal architecture issues that contribute to the error-proneness and change-proneness of these groups. Our tool has been used to analyze dozens of large-scale industrial projects, and has demonstrated its ability to provide valuable direction on which parts of the architecture are problematic, and on why, when, and how to refactor. The video demo of Titan can be found at https://art.cs.drexel.edu/~lx52/titan.mp4},
  keywords  = {rank4},
  ranking   = {rank4},
}

@InProceedings{Hassan2008,
  author       = {Hassan, Ahmed E},
  booktitle    = {2008 Frontiers of Software Maintenance},
  title        = {The road ahead for mining software repositories},
  year         = {2008},
  organization = {IEEE},
  pages        = {48--57},
  abstract     = {Source control repositories, bug repositories, archived communications, deployment logs, and code repositories are examples of software repositories that are commonly available for most software projects. The mining software repositories (MSR) field analyzes and cross-links the rich data available in these repositories to uncover interesting and actionable information about software systems. By transforming these repositories from static record-keeping ones into active repositories, we can guide decision processes in modern software projects. For example, data in source control repositories, traditionally used to archive code, could be linked with data in bug repositories to help practitioners propagate complex changes and to warn them about risky code based on prior changes and bugs. In this paper, we present a brief history of the MSR field and discuss several recent achievements and results of using MSR techniques to support software research and practice. We then discuss the various opportunities and challenges that lie in the road ahead for this important and emerging field.},
  keywords     = {rank3},
  ranking      = {rank3},
}

@InProceedings{Robles2010,
  author       = {Robles, Gregorio},
  booktitle    = {2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010)},
  title        = {Replicating msr: A study of the potential replicability of papers published in the mining software repositories proceedings},
  year         = {2010},
  organization = {IEEE},
  pages        = {171--180},
  abstract     = {This paper is the result of reviewing all papers published in the proceedings of the former International Workshop on Mining Software Repositories (MSR) (2004-2006) and now Working Conference on MSR (2007-2009). We have analyzed the papers that contained any experimental analysis of software projects for their potentiality of being replicated. In this regard, three main issues have been addressed: i) the public availability of the data used as case study, ii) the public availability of the processed dataset used by researchers and iii) the public availability of the tools and scripts. A total number of 171 papers have been analyzed from the six workshops/working conferences up to date. Results show that MSR authors use in general publicly available data sources, mainly from free software repositories, but that the amount of publicly available processed datasets is very low. Regarding tools and scripts, for a majority of papers we have not been able to find any tool, even for papers where the authors explicitly state that they have built one. Lessons learned from the experience of reviewing the whole MSR literature and some potential solutions to lower the barriers of replicability are finally presented and discussed.},
}

@InProceedings{Zhang2014,
  author    = {Zhang, Feng and Mockus, Audris and Keivanloo, Iman and Zou, Ying},
  booktitle = {Proceedings of the 11th Working Conference on Mining Software Repositories},
  title     = {Towards building a universal defect prediction model},
  year      = {2014},
  pages     = {182--191},
  abstract  = {To predict files with defects, a suitable prediction model must be built for a software project from either itself (within-project) or other projects (cross-project). A universal defect prediction model that is built from the entire set of diverse projects would relieve the need for building models for an individual project. A universal model could also be interpreted as a basic relationship between software metrics and defects. However, the variations in the distribution of predictors pose a formidable obstacle to build a universal model. Such variations exist among projects with different context factors (e.g., size and programming language). To overcome this challenge, we propose context-aware rank transformations for predictors. We cluster projects based on the similarity of the distribution of 26 predictors, and derive the rank transformations using quantiles of predictors for a cluster. We then fit the universal model on the transformed data of 1,398 open source projects hosted on SourceForge and GoogleCode. Adding context factors to the universal model improves the predictive power. The universal model obtains prediction performance comparable to the within-project models and yields similar results when applied on five external projects (one Apache and four Eclipse projects). These results suggest that a universal defect prediction model may be an achievable goal.},
}

@InProceedings{Steidl2014,
  author    = {Steidl, Daniela and Hummel, Benjamin and Juergens, Elmar},
  booktitle = {Proceedings of the 11th Working Conference on Mining Software Repositories},
  title     = {Incremental origin analysis of source code files},
  year      = {2014},
  pages     = {42--51},
  abstract  = {The history of software systems tracked by version control systems is often incomplete because many file movements are not recorded. However, static code analyses that mine the file history, such as change frequency or code churn, produce precise results only if the complete history of a source code file is available. In this paper, we show that up to 38.9% of the files in open source systems have an incomplete history, and we propose an incremental, commit-based approach to reconstruct the history based on clone information and name similarity. With this approach, the history of a file can be reconstructed across repository boundaries and thus provides accurate information for any source code analysis. We evaluate the approach in terms of correctness, completeness, performance, and relevance with a case study among seven open source systems and a developer survey.},
}

@InProceedings{Gil2012,
  author       = {Gil, Joseph and Goldstein, Maayan and Moshkovich, Dany},
  booktitle    = {2012 9th IEEE Working Conference on Mining Software Repositories (MSR)},
  title        = {An empirical investigation of changes in some software properties over time},
  year         = {2012},
  organization = {IEEE},
  pages        = {227--236},
  abstract     = {Software metrics are easy to define, but not so easy to justify. It is hard to prove that a metric is valid, i.e., that measured numerical values imply anything on the vaguely defined, yet crucial software properties such as complexity and maintainability. This paper employs statistical analysis and tests to check some plausible assumptions on the behavior of software and metrics measured for this software in retrospective on its versions evolution history. Among those are the reliability assumption implicit in the application of any code metric, and the assumption that the magnitude of change, i.e., increase or decrease of its size, in a software artifact is correlated with changes to its version number. Putting a suite of 36 metrics to the trial, we confirm most of the assumptions on a large repository of software artifacts. Surprisingly, we show that a substantial portion of the reliability of some metrics can be observed even in random changes to architecture. Another surprising result is that Boolean-valued metrics tend to flip their values more often in minor software version increments than in major increments.},
}

@InProceedings{Hemmati2013,
  author       = {Hemmati, Hadi and Nadi, Sarah and Baysal, Olga and Kononenko, Oleksii and Wang, Wei and Holmes, Reid and Godfrey, Michael W},
  booktitle    = {2013 10th Working Conference on Mining Software Repositories (MSR)},
  title        = {The msr cookbook: Mining a decade of research},
  year         = {2013},
  organization = {IEEE},
  pages        = {343--352},
  abstract     = {The Mining Software Repositories (MSR) research community has grown significantly since the first MSR workshop was held in 2004. As the community continues to broaden its scope and deepens its expertise, it is worthwhile to reflect on the best practices that our community has developed over the past decade of research. We identify these best practices by surveying past MSR conferences and workshops. To that end, we review all 117 full papers published in the MSR proceedings between 2004 and 2012. We extract 268 comments from these papers, and categorize them using a grounded theory methodology. From this evaluation, four high-level themes were identified: data acquisition and preparation, synthesis, analysis, and sharing/replication. Within each theme we identify several common recommendations, and also examine how these recommendations have evolved over the past decade. In an effort to make this survey a living artifact, we also provide a public forum that contains the extracted recommendations in the hopes that the MSR community can engage in a continuing discussion on our evolving best practices.},
  keywords     = {rank3},
  ranking      = {rank3},
}

@InProceedings{lehman1996laws,
  author       = {Lehman, Manny M},
  booktitle    = {European Workshop on Software Process Technology},
  title        = {Laws of software evolution revisited},
  year         = {1996},
  organization = {Springer},
  pages        = {108--124},
  abstract     = {Data obtained during a 1968 study of the software process [8] led to an investigation of the evolution of OS/360 [13] and and, over a period of twenty years, to formulation of eight Laws of Software Evolution. The FEAST project recently initiated (see sections 4–6 below) is expected to throw additional light on the phenomenology underlying these laws, to increase understanding of them, to explore their finer detail, to expose their wider relevance and implications and to develop means for their beneficial exploitation. This paper is intended to trigger wider interest in the laws and in the FEAST study of feedback and feedback control in the context of the software process and its improvement to ensure beneficial exploitation of their potential},
}

@article{allman2012managing,
  title={Managing technical debt},
  author={Allman, Eric},
  journal={Communications of the ACM},
  volume={55},
  number={5},
  pages={50--55},
  year={2012},
  publisher={ACM New York, NY, USA}
}

@Article{minku2016data,
  author    = {Minku, Leandro L and Mendes, Emilia and Turhan, Burak},
  journal   = {Progress in Artificial Intelligence},
  title     = {Data mining for software engineering and humans in the loop},
  year      = {2016},
  number    = {4},
  pages     = {307--314},
  volume    = {5},
  abstract  = {The field of data mining for software engineering has been growing over the last decade. This field is concerned with the use of data mining to provide useful insights into how to improve software engineering processes and software itself, supporting decision-making. For that, data produced by software engineering processes and products during and after software development are used. Despite promising results, there is frequently a lack of discussion on the role of software engineering practitioners amidst the data mining approaches. This makes adoption of data mining by software engineering practitioners difficult. Moreover, the fact that experts’ knowledge is frequently ignored by data mining approaches, together with the lack of transparency of such approaches, can hinder the acceptability of data mining by software engineering practitioners. To overcome these problems, this position paper provides a discussion of the role of software engineering experts when adopting data mining approaches. It also argues that this role can be extended to increase experts’ involvement in the process of building data mining models. We believe that such extended involvement is not only likely to increase software engineers’ acceptability of the resulting models, but also improve the models themselves. We also provide some recommendations aimed at increasing the success of experts involvement and model acceptability.},
  publisher = {Springer},
}

@InProceedings{van2011using,
  author    = {Van Eyck, Jo and Bouck{\'e}, Nelis and Helleboogh, Alexander and Holvoet, Tom},
  booktitle = {Proceedings of the 6th International Workshop on SHAring and Reusing Architectural Knowledge},
  title     = {Using code analysis tools for architectural conformance checking},
  year      = {2011},
  pages     = {53--54},
  abstract  = {Architectural conformance checking verifies whether a system conforms to its intended architecture, which is essential to safeguard the quality attributes of the system. Due to the size of many systems, performing conformance checking by means of manual code inspections is often practically infeasible. Code analysis tools can be used to automatically check architectural conformance.

In this paper, we investigate several code analysis tools that offer support for Java and compare them on their usefulness for architectural conformance checking: Architecture Rules, Macker, Lattix DSM, SonarJ, Structure101 and XDepend.},
}

@book{bass2003software,
  title={Software architecture in practice},
  author={Bass, Len and Clements, Paul and Kazman, Rick},
  year={2003},
  publisher={Addison-Wesley Professional}
}

@InProceedings{gurgel2014blending,
  author    = {Gurgel, Alessandro and Macia, Isela and Garcia, Alessandro and von Staa, Arndt and Mezini, Mira and Eichberg, Michael and Mitschke, Ralf},
  booktitle = {Proceedings of the 13th international conference on Modularity},
  title     = {Blending and reusing rules for architectural degradation prevention},
  year      = {2014},
  pages     = {61--72},
  abstract  = {As software systems are maintained, their architecture often de-grades through the processes of architectural drift and erosion. These processes are often intertwined and the same modules in the code become the locus of both drift and erosion symptoms. Thus, architects should elaborate architecture rules for detecting occur-rences of both degradation symptoms. While the specification of such rules is time-consuming, they are similar across software projects adhering to similar architecture decompositions. Unfortu-nately, existing anti-degradation techniques are limited as they focus only on detecting either drift or erosion symptoms. They also do not support the reuse of recurring anti-degradation rules. In this context, the contribution of this paper is twofold. First, it presents TamDera, a domain-specific language for: (i) specifying rule-based strategies to detect both erosion and drift symptoms, and (ii) promoting the hierarchical and compositional reuse of design rules across multiple projects. The language was designed with usual concepts from programming languages in mind such as, inheritance and modularization. Second, we evaluated to what extent developers would benefit from the definition and reuse of hybrid rules. Our study involved 21 versions pertaining to 5 software projects, and more than 600 rules. On average 45% of classes that had drift symptoms in first versions presented inter-related erosion problems in latter versions or vice-versa. Also, up to 72% of all the TamDera rules in a project are from a pre-defined library of reusable rules. They were responsible for detecting on average of 73% of the inter-related degradation symptoms across the projects.},
}

@InProceedings{medvidovic2010software,
  author       = {Medvidovic, Nenad and Taylor, Richard N},
  booktitle    = {2010 ACM/IEEE 32nd International Conference on Software Engineering},
  title        = {Software architecture: foundations, theory, and practice},
  year         = {2010},
  organization = {IEEE},
  pages        = {471--472},
  volume       = {2},
  abstract     = {Software architecture has become a centerpiece subject for software engineers, both researchers and practitioners alike. At the heart of every software system is its software architecture, i.e., "the set of principal design decisions about the system". Architecture permeates all major facets of a software system, for principal design decisions may potentially be made at any time during a system's lifetime, and potentially by any stakeholder. Such decisions encompass structural concerns, such as the system's high-level building blocks -components, connectors, and configurations; the system's deployment; the system's non-functional properties; and the system's evolution patterns, including runtime adaptation. Software architectures found particularly useful for families of systems - product lines - are often codified into architectural patterns, architectural styles, and reusable, parameterized reference architectures. This tutorial affords the participant an extensive treatment of the field of software architecture, its foundation, principles, and elements, including those mentioned above. Additionally, the tutorial introduces the participants to the state-of-the-art as well as the state-of-the-practice in software architecture, and looks at emerging and likely future trends in this field. The discussion is illustrated with numerous real-world examples. One example given prominent treatment is the architecture of the World Wide Web and its underlying architectural style, REpresentational State Transfer (REST).},
}

@Article{maccormack2016technical,
  author    = {MacCormack, Alan and Sturtevant, Daniel J},
  journal   = {Journal of Systems and Software},
  title     = {Technical debt and system architecture: The impact of coupling on defect-related activity},
  year      = {2016},
  pages     = {170--182},
  volume    = {120},
  abstract  = {Technical Debt is created when design decisions that are expedient in the short term increase the costs of maintaining and adapting this system in future. An important component of technical debt relates to decisions about system architecture. As systems grow and evolve, their architectures can degrade, increasing maintenance costs and reducing developer productivity. This raises the question if and when it might be appropriate to redesign (“refactor”) a system, to reduce what has been called “architectural debt”. Unfortunately, we lack robust data by which to evaluate the relationship between architectural design choices and system maintenance costs, and hence to predict the value that might be released through such refactoring efforts.

We address this gap by analyzing the relationship between system architecture and maintenance costs for two software systems of similar size, but with very different structures; one has a “Hierarchical” design, the other has a “Core-Periphery” design. We measure the level of system coupling for the 20,000+ components in each system, and use these measures to predict maintenance efforts, or “defect-related activity.” We show that in both systems, the tightly-coupled Core or Central components cost significantly more to maintain then loosely-coupled Peripheral components. In essence, a small number of components generate a large proportion of system costs. However, we find major differences in the potential benefits available from refactoring these systems, related to their differing designs. Our results generate insight into how architectural debt can be assessed by understanding patterns of coupling among components in a system.},
  publisher = {Elsevier},
}

@article{witten2005practical,
  title={Practical machine learning tools and techniques},
  author={Witten, Ian H and Frank, Eibe and Hall, Mark A and Pal, Christopher J},
  journal={Morgan Kaufmann},
  volume={578},
  pages={1},
  year={2005},
}

@PhdThesis{anichecontext,
  author   = {Aniche, Maur{\'\i}cio Finavaro},
  school   = {Universidade de S{\~a}o Paulo},
  title    = {Context-based code quality assessment},
  year     = {2016},
  abstract = {Two tasks that software engineers constantly perform are writing code that is easy to evolve and maintain, and detecting poorly written pieces of code. For the former, software engineers commonly rely on well-known software architecture styles, such as Model-View-Controller (MVC). To the latter, they rely on code metrics and code smell detection approaches. However, up to now, these code metrics and code smell approaches do not take into account underlying architectureall classes are assessed as if they were the same. In practice, software developers know that classes differ in terms of responsibilities and implementation, and thus, we expect these classes to present different levels of coupling, cohesion, and complexity. As an example, in an MVC system, Controllers are responsible for the flow between the Model and the View, and Models are responsible for representing the systems business concepts. Thus, in this thesis, we evaluate the impact of architectural roles within a system architecture on code metrics and code smells. We performed an empirical analysis in 120 open source systems, and interviewed and surveyed more than 50 software developers. Our findings show that each architectural role has a different code metric values distribution, which is a likely consequence of their specific responsibilities. Thus, we propose SATT, an approach that provides specific thresholds for architectural roles that are significantly different from others in terms of code smells. We also show that classes that play a specific architectural role contain specific code smells, which developers perceive as problems, and can impact class' change- and defect-proneness. Based on our findings, we suggest that developers understand the responsibilities of each architectural role in their system architecture, so that code metrics and code smells techniques can provide more accurate feedback.},
}

@Article{maffort2016mining,
  author    = {Maffort, Cristiano and Valente, Marco Tulio and Terra, Ricardo and Bigonha, Mariza and Anquetil, Nicolas and Hora, Andr{\'e}},
  journal   = {Empirical Software Engineering},
  title     = {Mining architectural violations from version history},
  year      = {2016},
  number    = {3},
  pages     = {854--895},
  volume    = {21},
  abstract  = {Software architecture conformance is a key software quality control activity that aims to reveal the progressive gap normally observed between concrete and planned software architectures. However, formally specifying an architecture can be difficult, as it must be done by an expert of the system having a high level understanding of it. In this paper, we present a lightweighted approach for architecture conformance based on a combination of static and historical source code analysis. The proposed approach relies on four heuristics for detecting absences (something expected was not found) and divergences (something prohibited was found) in source code based architectures. We also present an architecture conformance process based on the proposed approach. We followed this process to evaluate the architecture of two industrial-strength information systems, achieving an overall precision of 62.7 % and 53.8 %. We also evaluated our approach in an open-source information retrieval library, achieving an overall precision of 59.2 %. We envision that an heuristic-based approach for architecture conformance can be used to rapidly raise architectural warnings, without deeply involving experts in the process.},
  publisher = {Springer},
}

@Article{basili1996validation,
  author    = {Basili, Victor R and Briand, Lionel C. and Melo, Walc{\'e}lio L},
  journal   = {IEEE Transactions on software engineering},
  title     = {A validation of object-oriented design metrics as quality indicators},
  year      = {1996},
  number    = {10},
  pages     = {751--761},
  volume    = {22},
  abstract  = {This paper presents the results of a study in which we empirically investigated the suite of object-oriented (OO) design metrics introduced in (Chidamber and Kemerer, 1994). More specifically, our goal is to assess these metrics as predictors of fault-prone classes and, therefore, determine whether they can be used as early quality indicators. This study is complementary to the work described in (Li and Henry, 1993) where the same suite of metrics had been used to assess frequencies of maintenance changes to classes. To perform our validation accurately, we collected data on the development of eight medium-sized information management systems based on identical requirements. All eight projects were developed using a sequential life cycle model, a well-known OO analysis/design method and the C++ programming language. Based on empirical and quantitative analysis, the advantages and drawbacks of these OO metrics are discussed. Several of Chidamber and Kemerer's OO metrics appear to be useful to predict class fault-proneness during the early phases of the life-cycle. Also, on our data set, they are better predictors than "traditional" code metrics, which can only be collected at a later phase of the software development processes.},
  publisher = {IEEE},
}

@article{lees2010theoretical,
  title={Theoretical maximum capacity as benchmark for empty vehicle redistribution in personal rapid transit},
  author={Lees-Miller, John and Hammersley, John and Wilson, R},
  journal={Transportation Research Record: Journal of the Transportation Research Board},
  number={2146},
  pages={76--83},
  year={2010},
  publisher={Transportation Research Board of the National Academies}
}

@article{michael2010transformation,
  title={Transformation patterns for curing the human causes of technical debt},
  author={Michael Golden, Jonathon},
  journal={Cutter IT Journal},
  volume={23},
  number={10},
  pages={30},
  year={2010}
}

@Article{ampatzoglou2015financial,
  author    = {Ampatzoglou, Areti and Ampatzoglou, Apostolos and Chatzigeorgiou, Alexander and Avgeriou, Paris},
  journal   = {Information and Software Technology},
  title     = {The financial aspect of managing technical debt: A systematic literature review},
  year      = {2015},
  pages     = {52--73},
  volume    = {64},
  abstract  = {Context
Technical debt is a software engineering metaphor, referring to the eventual financial consequences of trade-offs between shrinking product time to market and poorly specifying, or implementing a software product, throughout all development phases. Based on its inter-disciplinary nature, i.e. software engineering and economics, research on managing technical debt should be balanced between software engineering and economic theories.

Objective
The aim of this study is to analyze research efforts on technical debt, by focusing on their financial aspect. Specifically, the analysis is carried out with respect to: (a) how financial aspects are defined in the context of technical debt and (b) how they relate to the underlying software engineering concepts.

Method
In order to achieve the abovementioned goals, we employed a standard method for SLRs and applied it on studies retrieved from seven general-scope digital libraries. In total we selected 69 studies relevant to the financial aspect of technical debt.

Results
The most common financial terms that are used in technical debt research are principal and interest, whereas the financial approaches that have been more frequently applied for managing technical debt are real options, portfolio management, cost/benefit analysis and value-based analysis. However, the application of such approaches lacks consistency, i.e., the same approach is differently applied in different studies, and in some cases lacks a clear mapping between financial and software engineering concepts.

Conclusion
The results are expected to prove beneficial for the communication between technical managers and project managers, in the sense that they will provide a common vocabulary, and will help in setting up quality-related goals, during software development. To achieve this we introduce: (a) a glossary of terms and (b) a classification scheme for financial approaches used for managing technical debt. Based on these, we have been able to underline interesting implications for researchers and practitioners.},
  publisher = {Elsevier},
}

@InProceedings{xiao2016identifying,
  author       = {Xiao, Lu and Cai, Yuanfang and Kazman, Rick and Mo, Ran and Feng, Qiong},
  booktitle    = {2016 IEEE/ACM 38th International Conference on Software Engineering (ICSE)},
  title        = {Identifying and quantifying architectural debt},
  year         = {2016},
  organization = {IEEE},
  pages        = {488--498},
  abstract     = {Our prior work showed that the majority of error-prone source files in a software system are architecturally connected. Flawed architectural relations propagate defectsamong these files and accumulate high maintenance costs over time, just like debts accumulate interest. We model groups of architecturally connected files that accumulate high maintenance costs as architectural debts. To quantify such debts, we formally define architectural debt, and show how to automatically identify debts, quantify their maintenance costs, and model these costs over time. We describe a novel history coupling probability matrix for this purpose, and identify architecture debts using 4 patterns of architectural flaws shown to correlate with reduced software quality. We evaluate our approach on 7 large-scale open source projects, and show that a significant portion of total project maintenance effort is consumed by paying interest on architectural debts. The top 5 architectural debts, covering a small portion (8% to 25%) of each project's error-prone files, capture a significant portion (20% to 61%) of each project's maintenance effort. Finally, we show that our approach reveals how architectural issues evolve into debts over time.},
}

@book{wohlin2012experimentation,
  title={Experimentation in software engineering},
  author={Wohlin, Claes and Runeson, Per and Host, Martin and Ohlsson, Magnus C and Regnell, Bjorn and Wesslen, Anders},
  year={2012},
  publisher={Springer Science \& Business Media}
}

@InProceedings{verdecchia2020architectural,
  author       = {Verdecchia, Roberto and Kruchten, Philippe and Lago, Patricia},
  booktitle    = {European Conference on Software Architecture},
  title        = {Architectural technical debt: A grounded theory},
  year         = {2020},
  organization = {Springer},
  pages        = {202--219},
  abstract     = {Architectural technical debt in a software-intensive system is driven by design decisions about its structure, frameworks, technologies, languages, etc. Unlike code-level technical debt, which can be readily detected by static analysers, and can often be refactored with minimal efforts, architectural debt is hard to detect, and its remediation is wide-ranging, daunting, and often avoided. The objective of this study is to develop a better understanding of how software development organisations conceptualize their architectural debt, and how they deal with it, if at all. We used a grounded theory method, eliciting qualitative data from software architects and senior technical staff from a wide range of software development organizations. The result of the study, i.e., the theory emerging from the collected data, constitutes an encompassing conceptual theory of architectural debt, identifying and relating concepts such as symptoms, causes, consequences, and management strategies. By grounding the findings in empirical data, the theory provides researchers and practitioners with evidence of which crucial factors of architectural technical debt are experienced in industrial contexts.},
}

@Article{martini2017interest,
  author    = {Martini, Antonio and Bosch, Jan},
  journal   = {Journal of Software: Evolution and Process},
  title     = {On the interest of architectural technical debt: Uncovering the contagious debt phenomenon},
  year      = {2017},
  number    = {10},
  pages     = {e1877},
  volume    = {29},
  abstract  = {A known problem in large software companies is to balance the prioritization of short-term and long-term business goals. As an example, architecture suboptimality (Architectural Technical Debt), incurred to deliver fast, might hinder future feature development. However, some technical debt generates more interest to be paid than other. We conducted a multi-phase, multiple-case embedded case study comprehending 9 sites at 6 large international software companies. We have investigated which architectural technical debt items generate more interest , how the interest occurs during software development and which costly extra-activities are triggered as a result. We presented a taxonomy of the most dangerous items identified during the qualitative investigation and a model of their effects that can be used for prioritization, for further investigation and as a quality model for extracting more precise and context-specific metrics. We found that some architectural technical debt items are contagious, causing the interest to be not only fixed, but potentially compound, which leads to the hidden growth of interest (possibly exponential). We found important factors to be monitored to refactor the debt before it becomes too costly. Instances of these phenomena need to be identified and stopped before the development reaches a crises.},
  publisher = {Wiley Online Library},
}

@Article{martini2015investigating,
  author    = {Martini, Antonio and Bosch, Jan and Chaudron, Michel},
  journal   = {Information and Software Technology},
  title     = {Investigating Architectural Technical Debt accumulation and refactoring over time: A multiple-case study},
  year      = {2015},
  pages     = {237--253},
  volume    = {67},
  abstract  = {Context
A known problem in large software companies is to balance the prioritization of short-term with long-term feature delivery speed. Specifically, Architecture Technical Debt is regarded as sub-optimal architectural solutions taken to deliver fast that might hinder future feature development, which, in turn, would hinder agility.

Objective
This paper aims at improving software management by shedding light on the current factors responsible for the accumulation of Architectural Technical Debt and to understand how it evolves over time.

Method
We conducted an exploratory multiple-case embedded case study in 7 sites at 5 large companies. We evaluated the results with additional cross-company interviews and an in-depth, company-specific case study in which we initially evaluate factors and models.

Results
We compiled a taxonomy of the factors and their influence in the accumulation of Architectural Technical Debt, and we provide two qualitative models of how the debt is accumulated and refactored over time in the studied companies. We also list a set of exploratory propositions on possible refactoring strategies that can be useful as insights for practitioners and as hypotheses for further research.

Conclusion
Several factors cause constant and unavoidable accumulation of Architecture Technical Debt, which leads to development crises. Refactorings are often overlooked in prioritization and they are often triggered by development crises, in a reactive fashion. Some of the factors are manageable, while others are external to the companies. ATD needs to be made visible, in order to postpone the crises according to the strategic goals of the companies. There is a need for practices and automated tools to proactively manage ATD.},
  publisher = {Elsevier},
}

@InProceedings{li2014empirical,
  author    = {Li, Zengyang and Liang, Peng and Avgeriou, Paris and Guelfi, Nicolas and Ampatzoglou, Apostolos},
  booktitle = {Proceedings of the 10th international ACM Sigsoft conference on Quality of software architectures},
  title     = {An empirical investigation of modularity metrics for indicating architectural technical debt},
  year      = {2014},
  pages     = {119--128},
  abstract  = {Architectural technical debt (ATD) is incurred by design decisions that consciously or unconsciously compromise system-wide quality attributes, particularly maintainability and evolvability. ATD needs to be identified and measured, so that it can be monitored and eventually repaid, when appropriate. In practice, ATD is difficult to identify and measure, since ATD does not yield observable behaviors to end users. One indicator of ATD, is the average number of modified components per commit (ANMCC): a higher ANMCC indicates more ATD in a software system. However, it is difficult and sometimes impossible to calculate ANMCC, because the data (i.e., the log of commits) are not always available. In this work, we propose to use software modularity metrics, which can be directly calculated based on source code, as a substitute of ANMCC to indicate ATD. We validate the correlation between ANMCC and modularity metrics through a holistic multiple case study on thirteen open source software projects. The results of this study suggest that two modularity metrics, namely Index of Package Changing Impact (IPCI) and Index of Package Goal Focus (IPGF), have significant correlation with ANMCC, and therefore can be used as alternative ATD indicators.},
}

@InProceedings{li2015architectural,
  author       = {Li, Zengyang and Liang, Peng and Avgeriou, Paris},
  booktitle    = {2015 12th Working IEEE/IFIP Conference on Software Architecture},
  title        = {Architectural technical debt identification based on architecture decisions and change scenarios},
  year         = {2015},
  organization = {IEEE},
  pages        = {65--74},
  abstract     = {Architectural technical debt (ATD) is incurred by design decisions that intentionally or unintentionally compromise system-wide quality attributes, particularly maintainability and evolvability. ATD is harmful to the system's long-term health, thus it needs to be identified for further management. However, existing ATD identification approaches are mainly based on source code analysis and thus suffer from certain shortcomings: they can only identify issues at the system implementation, they can only be employed after the systems is implemented in code, they lack a mechanism to confirm whether the potential ATD identified is real ATD or not. To address these issues, we proposed an ATD identification approach based on architecture decisions and change scenarios. To evaluate the effectiveness and usability of this approach, we conducted a case study with an information system in a large telecommunications company. The results show that the proposed approach is useful and easy to use, and it supports release planning and ATD interest measurement.},
}

@Article{martini2018semi,
  author    = {Martini, Antonio and Sikander, Erik and Madlani, Niel},
  journal   = {Information and Software Technology},
  title     = {A semi-automated framework for the identification and estimation of architectural technical debt: A comparative case-study on the modularization of a software component},
  year      = {2018},
  pages     = {264--279},
  volume    = {93},
  abstract  = {Context
Research and industry's attention has been focusing on developing systems that enable fast time to market in the short term, but would assure a sustainable delivery of business value and maintenance operations in the long run. A related phenomenon has been identified in Architectural Technical Debt: if the system architecture is sub-optimal for long-term business goals, it might need to be refactored. A key property of the system assuring long-term goals is its modularity, or else the degree to which components are decoupled: such property allows the product to be evolved without costly changes pervading the whole system. However, understanding the business benefits of refactoring to achieve modularity is not trivial, especially for large refactorings involving substantial architectural changes.

Objective
The aim of this study was to develop a technique to identify Architectural Technical Debt in the form of a non-modularized component and to quantify the convenience of its repayment.

Method
We have conducted a single, embedded case study in a large company, comparing a component before and after it was refactored to achieve modularity. We have developed a holistic framework for the semi-automated identification and estimation of Architectural Technical Debt in the form of non-modularized components. We then evaluate the technique reporting a comparative study of the difference in maintenance and development costs in two coexisting systems, one including the refactored component and one including the non-refactored one.

Results
The main contributions are a measurement system for the identification of the Architectural Technical Debt according to the stakeholders’ goals, a mathematical relationship for calculating and quantifying its interest in terms of extra-effort spent in additional development and maintenance, and an overall decision framework to assess the benefit of refactoring. We also report context-specific results that show the estimated benefits of refactoring the specific case of Architectural Technical Debt.

Conclusion
We found that it is possible to identify this kind of Architectural Technical Debt and to quantify its repayment convenience. Thanks to the developed framework, it was possible to estimate that the Architectural Technical Debt present in the component was causing substantial continuous extra-effort, and that the modularization would be repaid in several months of development and maintenance.},
  publisher = {Elsevier},
}

@InProceedings{verdecchia2020atdx,
  author    = {Verdecchia, Roberto and Lago, Patricia and Malavolta, Ivano and Ozkaya, Ipek},
  booktitle = {ENASE},
  title     = {ATDx: Building an Architectural Technical Debt Index.},
  year      = {2020},
  pages     = {531--539},
  abstract  = {Architectural technical debt (ATD) in software-intensive systems refers to the architecture design decisions
which work as expedient in the short term, but later negatively impact system evolvability and maintainability.
Over the years numerous approaches have been proposed to detect particular types of ATD at a refined level
of granularity via source code analysis. Nevertheless, how to gain an encompassing overview of the ATD
present in a software-intensive system is still an open question. In this study, we present a multi-step approach
designed to build an ATD index (ATDx), which provides insights into a set of ATD dimensions building
upon existing architectural rules by leveraging statistical analysis. The ATDx approach can be adopted by
researchers and practitioners alike in order to gain a better understanding of the nature of the ATD present in
software-intensive systems, and provides a systematic framework to implement concrete instances of ATDx
according to specific project and organizational needs},
}

@InCollection{li2016architecture,
  author    = {Li, Zengyang and Liang, Peng and Avgeriou, Paris},
  booktitle = {Software Quality Assurance},
  publisher = {Elsevier},
  title     = {Architecture viewpoints for documenting architectural technical debt},
  year      = {2016},
  pages     = {85--132},
  abstract  = {Technical debt (TD) has attracted an increasing interest from researchers and practitioners in the software engineering domain. Currently, most approaches to managing TD focus on dealing with TD at source code level, while few methods deal with TD at architecture level. If architectural technical debt (ATD) is not effectively managed in the architecting process, the knowledge about ATD is not made available to involved stakeholders and the impact of ATD is not considered during architecture decision-making. Thus, the system’s maintainability and evolvability can be intentionally or unintentionally compromised. As a result, architectures are costly to maintain and new features are difficult to introduce. To facilitate the management of ATD, it needs to be documented so that it becomes explicit to stakeholders. To this end, we propose a set of architecture viewpoints related to ATD (ATD viewpoints in short). Each viewpoint frames a number of concerns related to ATD. These ATD viewpoints together help to get a comprehensive understanding of ATD in a software system, thereby providing support for architecture decision-making. To evaluate the effectiveness of the ATD viewpoints in documenting ATD, we conducted a case study in a large telecommunications company. The results of this case study show that the documented ATD views can effectively facilitate the documentation of ATD. Specifically, the ATD viewpoints are relatively easy to understand; it takes an acceptable amount of effort to document ATD using the ATD viewpoints; and the documented ATD views are useful for stakeholders to understand the ATD in the software project.},
}

@InProceedings{verdecchia2018identifying,
  author       = {Verdecchia, Roberto},
  booktitle    = {2018 IEEE/ACM 5th International Conference on Mobile Software Engineering and Systems (MOBILESoft)},
  title        = {Identifying architectural technical debt in android applications through automated compliance checking},
  year         = {2018},
  organization = {IEEE},
  pages        = {35--36},
  abstract     = {By considering the fast pace at which mobile applications need to evolve, Architectural Technical Debt results to be a crucial yet implicit factor of success. In this research we present an approach to automatically identify Architectural Technical Debt in Android applications. The approach takes advantage of architectural guidelines extraction and modeling, architecture reverse engineering, and compliance checking. As future work, we plan to fully automate the process and empirically evaluate it via large-scale experiments.},
}

@Article{de2021identifying,
  author    = {de Toledo, Saulo S and Martini, Antonio and Sj{\o}berg, Dag IK},
  journal   = {Journal of Systems and Software},
  title     = {Identifying architectural technical debt, principal, and interest in microservices: A multiple-case study},
  year      = {2021},
  pages     = {110968},
  volume    = {177},
  abstract  = {Background:
Using a microservices architecture is a popular strategy for software organizations to deliver value to their customers fast and continuously. However, scientific knowledge on how to manage architectural debt in microservices is scarce.

Objectives:
In the context of microservices applications, this paper aims to identify architectural technical debts (ATDs), their costs, and their most common solutions.

Method:
We conducted an exploratory multiple case study by conducting 25 interviews with practitioners working with microservices in seven large companies.

Results:
We found 16 ATD issues, their negative impact (interest), and common solutions to repay each debt together with the related costs (principal). Two examples of critical ATD issues found were the use of shared databases that, if not properly planned, leads to potential breaks on services every time the database schema changes and bad API designs, which leads to coupling among teams. We identified ATDs occurring in different domains and stages of development and created a map of the relationships among those debts.

Conclusion:
The findings may guide organizations in developing microservices systems that better manage and avoid architectural debts.},
  publisher = {Elsevier},
}

@InProceedings{besker2017impact,
  author       = {Besker, Terese and Martini, Antonio and Bosch, Jan},
  booktitle    = {2017 43rd Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
  title        = {Impact of architectural technical debt on daily software development work—a survey of software practitioners},
  year         = {2017},
  organization = {IEEE},
  pages        = {278--287},
  abstract     = {The negative consequences of Technical Debt is an area of increasing interest, and more specifically the Architectural aspects of it have received increased attention in the last few years. Besides the negative effects of Architectural Technical Debt on the overall software product quality in terms of hindering evolution and causing high maintenance costs, Architectural Technical Debt also has a significant negative impact on software practitioners' daily work. Although a great deal of theoretical work on Architectural Technical Debt has been undertaken, there is a lack of empirical studies that examine the negative effects of Architectural Technical Debt during the software development lifecycle. The aim of this study is to investigate how practitioners perceive and estimate the impact of Architectural Technical Debt during the software development process. This paper reports the results of an online web survey providing quantitative data from 258 participants. The contribution of this paper is threefold: First, it shows that practitioners experience that the Architectural type of Technical Debt has the highest negative impact on daily software development work. Secondly, we provide evidence that does not support the commonly held belief that Architectural Technical Debt increases with the age of the software. Thirdly, we show that despite different responsibilities and working tasks of software professionals, Architectural Technical Debt negatively affects all roles without any significant difference between the roles.},
}

@InProceedings{perez2019proposed,
  author       = {P{\'e}rez, Boris and Correal, Dar{\'\i}o and Astudillo, Hern{\'a}n},
  booktitle    = {2019 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  title        = {A proposed model-driven approach to manage architectural technical debt life cycle},
  year         = {2019},
  organization = {IEEE},
  pages        = {73--77},
  abstract     = {Architectural Technical Debt (ATD) is a metaphor used to describe consciously decisions taken by software architects to accomplish short-term goals but possibly negatively affecting the long-term health of the system. However, difficulties arise when repayment strategies are defined because software architects need to be aware of the consequences of these strategies over others decisions in the software architecture. This article proposes REBEL, a semi-automated model-driven approach that exploits natural language processing, machine learning and model checking techniques on heterogeneous project artifacts to build a model that allows to locate and visualize the impact produced by the consciously injected ATD and its repayment strategy on the other architectural decisions. The technique is illustrated with a data analytics project in Colombia where software architects are unaware of the consequences of the repayment strategies. This proposal seeks to support teams of architects to make explicit the current and future impact of the ATD injected as a result of decisions taken, focusing on the architectural level rather than code level.},
}

@InProceedings{vogel2015applicability,
  author       = {Vogel-Heuser, Birgit and R{\"o}sch, Susanne},
  booktitle    = {2015 IEEE International Conference on Systems, Man, and Cybernetics},
  title        = {Applicability of technical debt as a concept to understand obstacles for evolution of automated production systems},
  year         = {2015},
  organization = {IEEE},
  pages        = {127--132},
  abstract     = {Automated production systems (aPS), a specific class of mechatronic systems, are complex, long living, software intensive, evolving systems designed according to customer request. Often, the evolution of such systems has to cope with imponderables and sudden disturbances of the systematic development or maintenance process. In software engineering, the concept of technical debt and, in more detail, architectural technical debt has been introduced recently to describe phenomena, which increase software development costs over time. This paper tries to adapt and apply the classification of technical debt and architectural technical debt to automated production systems, identifying similar dimensions but adding specific challenges, causes and their effects. Once the causes and effects are identified, management and recovery strategies coping with technical debt and architectural technical debt shall be developed in the future, thereby enlarging the strategies from software engineering. The adapted classification and adaptations are based on the experience of several industrial projects in aPS.},
}
@techreport{ozkaya2012strategic,
  title={Strategic management of architectural technical debt},
  author={Ozkaya, Ipek},
  year={2012},
  institution={CARNEGIE-MELLON UNIV PITTSBURGH PA SOFTWARE ENGINEERING INST}
}

@InProceedings{martini2014architecture,
  author       = {Martini, Antonio and Bosch, Jan and Chaudron, Michel},
  booktitle    = {2014 40th EUROMICRO Conference on Software Engineering and Advanced Applications},
  title        = {Architecture technical debt: Understanding causes and a qualitative model},
  year         = {2014},
  organization = {IEEE},
  pages        = {85--92},
  abstract     = {A known problem in large software companies is to balance the prioritization of short-term with long-term responsiveness. Specifically, architecture violations (Architecture Technical Debt) taken to deliver fast might hinder future feature development, which would hinder agility. We conducted a multiple-case embedded case study in 7 sites at 5 large companies in order to shed light on the current causes for the accumulation of Architectural Technical Debt that causes effort. We provide a taxonomy of the factors and their influence in the accumulation of debt, and we provide a qualitative model of how the debt is accumulated and recovered over time.},
}

@Article{martini2019architectural,
  author    = {Martini, Antonio and Bosch, Jan},
  journal   = {Systems Engineering in the Fourth Industrial Revolution},
  title     = {Architectural technical debt in embedded systems},
  year      = {2019},
  pages     = {77--103},
  abstract  = {Agile software development (ASD) has been employed effectively in the development of embedded systems, contributing to speeding up the delivery of value to the customers. However, some obstacles have been found, limiting the application of ASD to such a domain. This chapter focuses on one such challenges, the degradation of the system architecture over time, which is called, in literature, Architectural Technical Debt (ATD). Software engineering is an individual activity and the causes for ATD accumulation can be related to suboptimal decision taken by individual employees. New employees as well are more subjected to accumulating ATD due to the natural noncomplete understanding of the architecture and patterns. The chapter summarizes the causes, trends, consequences, and possible solutions related to the management of ATD. The results are all based on a strong collaboration with several software-intensive systems industries located in northern Europe and, consequently, relevant to all Industry 4.0 companies.},
  publisher = {Wiley Online Library},
}

@InProceedings{perez2020semiautomatic,
  author       = {P{\'e}rez, Boris},
  booktitle    = {European Conference on Software Architecture},
  title        = {A Semiautomatic Approach to Identify Architectural Technical Debt from Heterogeneous Artifacts},
  year         = {2020},
  organization = {Springer},
  pages        = {5--16},
  abstract     = {Architectural Technical Debt (ATD) is a metaphor used to describe decisions taken by software architects to accomplish short-term goals but possibly negatively affecting the long-term health of the system. However, ATD doesn’t receive enough attention for the architect teams because it is hard to identify, to measure, to prioritize, and its value is related to long-term maintenance and evolution of a system. In this research, we propose a model-driven approach that focuses on building a binary classification model for ATD identification based on the information gathered from artifacts produced during architecture design. This model will allow software architects to support the managing of conscious and unconscious ATD in their software projects. This proposal focuses on TD at the architecture-level only without considering source code. The effectiveness of this proposal will be evaluated using case studies and expert interviews.},
}

@InProceedings{martini2015towards,
  author       = {Martini, Antonio and Bosch, Jan},
  booktitle    = {2015 41St euromicro conference on software engineering and advanced applications},
  title        = {Towards prioritizing architecture technical debt: information needs of architects and product owners},
  year         = {2015},
  organization = {IEEE},
  pages        = {422--429},
  abstract     = {Architectural Technical Debt is a metaphor for representing sub-optimal architectural solutions that might cause an interest, in terms of effort or quality, to be paid by the organization in the long run. Such metaphor has been regarded as useful for communicating risks of suboptimal solutions between technical and non-technical stakeholders. However, it's fundamental to understand the information needs of the involved stakeholders in order to produce technical debt measurements that would allow proper communication and informed prioritization. We have investigated, through a combination of interviews, observations and a survey, what key information is needed by agile product owners and software architects in order to prioritize the refactoring of risky architectural technical debt items with respect to feature development.},
}

@InProceedings{de2019architectural,
  author       = {de Toledo, Saulo Soares and Martini, Antonio and Przybyszewska, Agata and Sj{\o}berg, Dag IK},
  booktitle    = {2019 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  title        = {Architectural technical debt in microservices: a case study in a large company},
  year         = {2019},
  organization = {IEEE},
  pages        = {78--87},
  abstract     = {Introduction: Software companies aim to achieve continuous delivery to constantly provide value to their customers. A popular strategy is to use microservices architecture. However, such an architecture is also subject to debt, which hinders the continuous delivery process and thus negatively affects the software released to the customers. Objectives: The aim of this study is to identify issues, solutions and risks related to Architecture Technical Debt in microservices. Method: We conducted an exploratory case study of a real life project with about 1000 services in a large, international company. Through qualitative analysis of documents and interviews, we investigated Architecture Technical Debt in the communication layer of a system with microservices architecture. Results: Our main contributions are a list of Architecture Technical Debt issues specific for the communication layer in a system with microservices architecture, as well as their associated negative impact (interest), a solution to repay the debt and the its cost (principal). Among the found Architecture Technical Debt issues were the existence of business logic in the communication layer and a high amount of point-to-point connections between services. The studied solution consists of the implementation of different canonical models specific to different domains, the removal of business logic from the communication layer, and migration from services to use the communication layer correctly. We also contributed with a list of possible risks that can affect the payment of the debt, as lack of funding and inadequate prioritization. Conclusion: We found issues, solutions and possible risks that are specific for microservices architectures not yet encountered in the current literature. Our results may be useful for practitioners that want to avoid or repay Technical Debt in their microservices architecture.},
}

@Article{deeb2021refactoring,
  author    = {Deeb, Samir and BenIdris, Mrwan and Ammar, Hany and Dzielski, Dale},
  journal   = {International Journal of Software Engineering and Knowledge Engineering},
  title     = {Refactoring Cost Estimation for Architectural Technical Debt},
  year      = {2021},
  number    = {02},
  pages     = {269--288},
  volume    = {31},
  abstract  = {Paying-off the Architectural Technical Debt by refactoring the flawed code is important to control the debt and to keep it as low as possible. Project Managers tend to delay paying off this debt because they face difficulties in comparing the cost of the refactoring against the benefits gained. These managers need to estimate the cost and the efforts required to conduct these refactoring activities as well as to decide which flaws have higher priority to be refactored.

Our research is based on a dataset used by other researchers that study the technical debt. It includes more than 18,000 refactoring operations performed on 33 apache java projects. We applied the COCOMO II:2000 model to calculate the refactoring cost in person-months units per release. Furthermore, we investigated the correlation between the refactoring efforts and two static code metrics of the refactored code. The research revealed a weak correlation between the refactoring efforts and the size of the project, and a moderate correlation with the code complexity. Finally, we applied the DesigniteJava tool to verify our research results. From the analysis we found a significant correlation between the ranking of the architecture smells and the ranking of refactoring efforts for each package. Using machine learning practices, we took the architecture smells level and the code metrics of each release as an input to predict the levels of the refactoring effort of the next release. We calculated the results using our model and found that we can predict the ‘High’ and ‘Very High’ levels, the most significant levels from managers’ perspective, with 93% accuracy.},
  publisher = {World Scientific},
}

@InProceedings{perez2020computational,
  author       = {Perez, B and Castellanos, C and Correal, D},
  booktitle    = {Journal of Physics: Conference Series},
  title        = {A computational model of a natural language processing system for architectural technical debt management},
  year         = {2020},
  number       = {1},
  organization = {IOP Publishing},
  pages        = {012020},
  volume       = {1587},
  abstract     = {Technical debt is a concept applied to decisions taken to favor rapid production, at the expense of future capacities to evolve or improve the product or service. This concept is transversal to all sciences, especially in experimental physics and systems. However, technical debt is difficult to manage because there is a lack of time, expertise, or knowledge on how to perform it. This paper proposes a computational model of technical debt management in software architecture, based on observations made in software teams in their daily work. This computational model exploits natural language processing and model-testing techniques on software project artifacts to build a model that allows localizing and visualizing the impact produced by the technical debt and its payment strategies. This proposal aims to support teams of architects to explain the current and future impact of the debt injected as a result of decisions made.},
}

@InProceedings{del2016identification,
  author       = {del Carpio, Paul Mendoza},
  booktitle    = {2016 8th Euro American Conference on Telematics and Information Systems (EATIS)},
  title        = {Identification of architectural technical debt: An analysis based on naming patterns},
  year         = {2016},
  organization = {IEEE},
  pages        = {1--8},
  abstract     = {Hasty software development can produce immediate implementations with source code unnecessarily complex and hardly readable. These small kinds of software decay generate a technical debt that could be big enough to seriously affect future maintenance activities. This work presents an analysis technique for identifying architectural technical debt related to non-uniformity of naming patterns; the technique is based on term frequency over package hierarchies. The proposal has been evaluated on projects of two popular organizations, Apache and Eclipse. The results have shown that most of the projects have frequent occurrences of the proposed naming patterns, and using a graph model and aggregated data could enable the elaboration of simple queries for debt identification. The technique has features that favor its applicability on emergent architectures and agile software development.},
}

@InProceedings{skiada2018exploring,
  author       = {Skiada, Peggy and Ampatzoglou, Apostolos and Arvanitou, Elvira-Maria and Chatzigeorgiou, Alexander and Stamelos, Ioannis},
  booktitle    = {2018 44th Euromicro Conference on software engineering and advanced applications (SEAA)},
  title        = {Exploring the relationship between software modularity and technical debt},
  year         = {2018},
  organization = {IEEE},
  pages        = {404--407},
  abstract     = {Modularity is one of the key principles of software design. In order for a software system to be modular, it should be organized into modules that are highly coherent internally, whereas at the same time as independent from other modules as possible. In this paper we explore coupling and cohesion metrics at the software package level-i.e., one of most basic levels of software functional decomposition in object-oriented (OO) systems, with the aim of investigating their relation to the technical debt of each package. Current state-of-the-art tools in TD measurement are working on the source code level, and the extent to which they can unveil limitations at the architecture level (e.g., violations of the modularity principle), has not been explored so far. To achieve this goal, we conducted a case study on 1,200 packages retrieved from 20 well-known open source software projects. The results of the study suggested that current measures of technical debt are able to identify / predict modules that lack modularity, and therefore suffer from Architectural Technical Debt (ATD). The results of the study are discussed both from the practitioners' and re-searchers' point of view.},
}

@Article{olsson2019measuring,
  author   = {OLSSON, JESPER and RISFELT, ERIK},
  title    = {Measuring affective states from architectural technical debt},
  year     = {2019},
  abstract = {Context: While the technological and financial aspects of technical debt have been extensively researched, the consequences on human aspects remain mostly uncharted. At the same time, recent psychoempirical software engineering research links the affects of software practitioners to organisational performance. Objective: To empirically investigate the causal relationship between architectural technical debt and the affects of software practitioners. Method: A mixed-methods approach with 40 software practitioners from 12 companies was used, combining repeated measurements laboratory experiments and semi-structured interviews. Result: Based on a set of 200 data points, the existence of tiny tangles negatively impacts the valence of software practitioners with more than 99 % certainty. No links were found between professional background and variations in affective state. Moreover, software practitioners receive positive affects from challenging software engineering tasks and negative affects from architectural technical debt and deadlines. Limitation: The subjects were industry professionals obtained through convenience sampling. Additionally, the treatments, albeit similar to industry code, were small and isolated examples that lacked the full spread and severity of technical debt encountered in practice. Conclusion: By combining our results with the existing literature on psychoempirical software engineering, strong arguments can be made in favour of the hypothesis that the effects of technical debt on industry professionals carry high technological and financial risks.},
}

@InProceedings{martini2017revealing,
  author       = {Martini, Antonio and Bosch, Jan},
  booktitle    = {2017 IEEE International Conference on Software Architecture Workshops (ICSAW)},
  title        = {Revealing social debt with the CAFFEA framework: An antidote to architectural debt},
  year         = {2017},
  organization = {IEEE},
  pages        = {179--181},
  abstract     = {Large software companies need a well-managed Software Architecture to support continuous and fast delivery of customer value both in the short and long term. However, this can be hindered if both evolution and maintenance of existing systems are hampered by Architectural Technical Debt. To avoid the accumulation and the costly consequences of ATD, it is critical that the responsibilities to minimize it are well understood and shared in a large software organization. In this paper, we argue that an organizational model, based on a well validated framework such as CAFFEA, can be used to reveal sub-optimalities in the social structure of the organization: in other words, it can reveal Social Debt. Such sub-optimality, according to previous work, leads to the accumulation of ATD. In conclusion, using the CAFFEA framework as an organizational analysis tool, can reveal weak spots (Social Debt) in the organization and can help preventing costly ATD and its consequences.},
}
@book{besker2018empirical,
  title={An Empirical Investigation of the Harmfulness of Architectural Technical Debt},
  author={Besker, Terese},
  year={2018},
  publisher={Chalmers Tekniska Hogskola (Sweden)}
}

@Article{martiniarchitectural,
  author   = {Martini, Antonio},
  title    = {Architectural Technical Debt: Models and Impact},
  year={0},
  abstract = {problem and motivation
A known problem in large software companies is to balance the prioritization of
short-term with long-term responsiveness. To illustrate such a phenomenon, a
financial metaphor has been coined, which relates taking sub-optimal decisions in
order to meet short-term goals to taking a financial debt, which has to be repaid with
interests in the long term. Such a concept is referred to as Technical Debt (TD), and
recently it has been recognized as a useful basis for the development of theoretical
and practical frameworks (Kruchten et al., 2012). Tom et al. (Tom et al., 2013) have
explored the TD metaphor and outlined a first framework in 2013. Part of the overall
TD is to be related to architecture sub-optimal decisions, and it’s regarded as
Architecture Technical Debt (ADT). ATD is regarded as violations in the code
towards an intended architecture.
The problem of visualizing and communicating the ATD is particularly relevant
for large companies, where the architecture documentation is not capable of capturing
all the updated information for compliance checking of the source code. It’s therefore
difficult, both for software architects and managers not involved directly in the
development of parts of the system, to monitor and understand the level of current
ATD. This, in turn, affects negatively their ability of taking informed decision about
the prioritization of architectural improvements and refactorings and about estimating
the time needed for product development.
ATD has been recognized as part of TD, but the specific phenomenon of
accumulation of ATD, its recovery to avoid the later payment of interest (in terms of
effort) and the impact (effects) of such interest in future development has not been
tackled yet.},
}

@MastersThesis{dahl2017estimating,
  author   = {Dahl, Gustav},
  title    = {Estimating Architectural Technical Debt: A design research},
  year     = {2017},
  abstract = {Technical debt(TD) and the sub-category architectural technical debt (ATD) are two software related buzzwords frequently used in both academia and in the software industry. The purpose of these terms is to make it easier to understand that a software decision might lead to an expected or unexpected consequence that could have an impact in the long-run. Hence, the TD level in a project needs to be under control. However, the common approach towards refactoring of a TD is to handle it when it is too late and a crisis has emerged due to its presence. In order to solve this and make the stakeholders able to determine when a TD should be refactored a tool has been developed. This tool incorporates the newly developed AnaConDebt model, which is an ATD refactoring decision model. The outcome from building and evaluating this proof-of-concept is that there is potential for such a tool but it is not yet there. The underlying model needs to be further developed incorporating more info used by the industry.},
}
@article{mendoza2017using,
  title={Using Naming Patterns for Identifying Architectural Technical Debt},
  author={Mendoza del Carpio, Paul},
  year={2017},
  publisher={Technology and Engineering Systems Journal}
}

@InProceedings{martini2018identifying,
  author       = {Martini, Antonio and Fontana, Francesca Arcelli and Biaggi, Andrea and Roveda, Riccardo},
  booktitle    = {European Conference on Software Architecture},
  title        = {Identifying and prioritizing architectural debt through architectural smells: a case study in a large software company},
  year         = {2018},
  organization = {Springer},
  pages        = {320--335},
  abstract     = {Architectural technical debt can have a huge impact on software maintainability and evolution. Hence, different architectural violations, detected as architectural smells, need to be identified and refactored. In this paper, we conducted a multiple case-study on several architectural smells detected in four industrial projects. We conducted an in-depth investigation with a questionnaire, interviews and thorough inspection of the code with the practitioners. We evaluated the negative impact of the technical debt detected by the architectural smells, their difficulty to be refactored and the usefulness of the detection tool. The results show that practitioners appreciated the help of automatic detection, and that they prioritize refactoring architectural debt that causes more negative impact despite the higher refactoring effort.},
}

@MastersThesis{kaufmann2015addressing,
  author   = {Kaufmann, Robert and Odeh, Sam},
  title    = {Addressing efficiency interest in architectural technical debt-A measurement and visualization approach for embedded software},
  year     = {2015},
  abstract = {Addressing and managing technical debt is an important part of software development. Unmanaged technical debt, especially architectural technical debt, can lead to additional development overhead and expensive refactoring. However, most research that address architectural technical debt does so by analyzing source code; very little research focus on a more abstract level. The problem with analyzing source code to identify debt is that it is not enough to cover all debt. Similarly, most visualisation of software architecture target lower level artifacts based on static code analysis. Therefore there is a gap in both addressing architectural technical debt and software visualisation on a more abstract level. By utilizing a case study at a company, followed by design research, we contribute to filling this gap by identifying, measuring, and visualizing architectural debt on a higher abstraction level. Specifically, we identify occurring debt items related to efficiency interest and propose methodologies to measure and visualize them utilizing architectural models. Thus, we provide novel techniques of},
}

@PhdThesis{hsu2018investigating,
  author   = {Hsu, Jen Tsu},
  school   = {University of British Columbia},
  title    = {Investigating the causes of software technical debt at the architectural level},
  year     = {2018},
  abstract = {Architectural technical debt (ATD) describes the consequences of intentionally or unintentionally making architectural design decisions that compromise the internal quality of a software system. These consequences include long-term software evolution and maintenance issues that jeopardize software developer productivity. The architectural aspect of technical debt has been receiving significant interest from technical debt researchers, but many questions concerning architectural technical debt itself have yet to be answered. The main goal of this exploratory multiple-case study is to investigate architectural technical debt’s causes and accumulations at the design decision-level by examining software practitioners’ experiences with architectural technical debt and creating taxonomies that would aid software practitioners and technical debt researchers in the future. We conducted semi-structured interviews with 18 participants and an interview-style online questionnaire with 10},
}

@Article{sikander2016decision,
  author   = {Sikander, Erik and Madlani, Neil},
  title    = {A Decision Framework on Refactoring Architectural Technical Debt: Paying Back in Modularity-An Industrial Case Study},
  year     = {2016},
  abstract = {Technical debt refers to sub-optimal solutions during software development where there is a trade-o between short-term and long-term goals. Lately there has been a few studies which identi es technical debt, however most of the do not estimate the interest which is associated with the identi ed debt. Knowing how much interest is being paid allows the developers to make informed decisions of what will bene t the development. One example is knowing if a onetime cost of a repaying the debt outweighs the cost of paying the interest of that debt. This would mean that the repayment can be seen as an investment for future development. This thesis aims to develop a decision framework that can be used when deciding if part of a component would bene t from being modularized into a new component or framework to repay a debt. To accomplish this, the study developed two methods that are used by the decision framework. The rst method is to nd out if the analysed part of the components would bene t from such a modularization. The second method estimates how much e ort can be saved by doing a modularization. It was found that for the rst method, a measurement system which analysed the component's source code was a good approach in deciding if a modularization would be bene cial. For the second method an approach which used data regarding the current e ort distribution to estimate the e ort saved by modularizing was chosen. The result of combining the two methods was found to be an adequate decision framework which provides useful information in the decision if to modularize part of a component or not.},
}

@Article{klimczyk2020technical,
  author   = {Klimczyk, Pawe{\l} and Madeyski, Lech},
  journal  = {e-Informatica Software Engineering Journal},
  title    = {Technical Debt Aware Estimations in Software Engineering: A Systematic Mapping Study},
  year     = {2020},
  number   = {1},
  volume   = {14},
  abstract = {Context: The Technical Debt metaphor has grown in popularity. More software is being created and has to be maintained. Agile methodologies, in particular Scrum, are widely used by development teams around the world. Estimation is an often practised step in sprint planning. The subject matter of this paper is the impact technical debt has on estimations. Objective: The goal of this research is to identify estimation problems and their solutions due to previously introduced technical debt in software projects. Method: The Systematic mapping study (SMS) method was applied in the research. Papers were selected from the popular digital databases (IEEE, ACM, Scopus, etc.) using defined search criteria. Afterwards, a snowballing procedure was performed and the final publication set was filtered using inclusion/exclusion criteria. Results: 42 studies were selected and evaluated. Five categories of problems and seven proposed solutions to the problems have been extracted from the papers. Problems include items related to business perspective (delivery pressure or lack of technical debt understanding by business decision-makers) and technical perspective (difficulties in forecasting architectural technical debt impact or limits of source code analysis). Solutions were categorized in: more sophisticated decision-making tools for business managers, better tools for estimation support and technical debt management tools on an architectural-level, portfolio approach to technical debt, code audit and technical debt reduction routine conducted every sprint. Conclusion: The results of this mapping study can help taking the appropriate approach in technical debt mitigation in organizations. However, the outcome of the conducted research shows that the problem of measuring technical debt impact on estimations has not yet been solved. We propose several directions for further investigation. In particular, we would focus on more sophisticated decision-making tools.},
}
@article{deeb2020estimating,
  title={Estimating Refactoring Efforts for Architecture Technical Debt},
  author={Deeb, Samir},
  year={2020}
}

@InProceedings{hanssen2019identifying,
  author       = {Hanssen, Geir Kjetil and Brataas, Gunnar and Martini, Antonio},
  booktitle    = {2019 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  title        = {Identifying scalability debt in open systems},
  year         = {2019},
  organization = {IEEE},
  pages        = {48--52},
  abstract     = {Architectural technical debt can be generated by changes in the business and the environment of an organization. In this paper, we emphasize the change in scalability requirements due to new regulations. Scalability is the ability of a system to handle an increased workload. For complex systems that are abruptly exposed via open interfaces and hence a greater workload, the scalability requirements may quickly increase, leading to technical debt. We term this scalability debt. This paper describes scalability triage, a light-weight, novel technique for identifying scalability threats as a form of technical debt. We illustrate this technique with an open banking case from a large software organization. Open banking is partly caused by the new European PSD2 regulative that enforce banks to open interfaces to unknown third-party actors. Banking systems are well-established, mature systems. However, with the advent of open banking and PSD2, the workload may quickly rocket. This leads to tougher scalability requirements and accumulated architectural debt, despite previously sound architectural decisions. Using scalability triage, such risks may be identified fast. It will then be possible to prevent this form of technical debt with timely reengineering.},
}

@InProceedings{biaggi2018architectural,
  author       = {Biaggi, Andrea and Fontana, Francesca Arcelli and Roveda, Riccardo},
  booktitle    = {2018 44th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
  title        = {An architectural smells detection tool for c and c++ projects},
  year         = {2018},
  organization = {IEEE},
  pages        = {417--420},
  abstract     = {Architectural smells gained great attention in the past few years since they directly affect software quality and increase architectural technical debt. However, while it is straightforward to understand why they are important, it is more difficult to find techniques and tools to detect and remove architectural smells. The purpose of this paper is to introduce an open-source tool for automatic architectural smells detection for C/C++ projects, by creating an abstraction of the project and defining the concept of dependency between elements belonging to the project in order to identify architectural smells. The tool has been validated on some open-source projects with promising results.},
}

@InProceedings{azadi2019architectural,
  author       = {Azadi, Umberto and Fontana, Francesca Arcelli and Taibi, Davide},
  booktitle    = {2019 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  title        = {Architectural smells detected by tools: a catalogue proposal},
  year         = {2019},
  organization = {IEEE},
  pages        = {88--97},
  abstract     = {Architectural smells can negatively impact on different software qualities and can represent a relevant source of architectural debt. Several architectural smells have been defined by different researchers. Moreover, both academia and industry proposed several tools for software quality analysis, but it is not always clear to understand which tools provide also support for architectural smells detection and if the tools developed for this specific purpose are effectively available or not. In this paper we propose a catalogue of architectural smells for which, at least one tool able to detect the smell exists. We outline the main differences in the detection techniques exploited by the tools and we propose a classification of these architectural smells according to the violation of three design principles.},
}

@InProceedings{fernandez2015analysis,
  author       = {Fern{\'a}ndez-S{\'a}nchez, Carlos and Garbajosa, Juan and Vidal, Carlos and Yag{\"u}e, Agust{\'\i}n},
  booktitle    = {2015 IEEE/ACM 2nd International Workshop on Software Architecture and Metrics},
  title        = {An analysis of techniques and methods for technical debt management: a reflection from the architecture perspective},
  year         = {2015},
  organization = {IEEE},
  pages        = {22--28},
  abstract     = {Technical debt is a metaphor referring to the consequences of weak software development. Managing technical debt is necessary in order to keep it under control, and several techniques have been developed with the goal of accomplishing this. However, available techniques have grown disperse and managers lack guidance. This paper covers this gap by providing a systematic mapping of available techniques and methods for technical debt management, covering architectural debt, and identifying existing gaps that prevent to manage technical debt efficiently.},
}

@InProceedings{kruchten2012strategic,
  author       = {Kruchten, Philippe},
  booktitle    = {2012 12th International Conference on Quality Software},
  title        = {Strategic management of technical debt: Tutorial synopsis},
  year         = {2012},
  organization = {IEEE},
  pages        = {282--284},
  abstract     = {The technical debt metaphor acknowledges that software development teams sometimes accept compromises in a system in one dimension (for example, modularity) to meet an urgent demand in some other dimension (for example, a deadline), and that such compromises incur a "debt". If not properly managed the interest on this debt may continue to accrue, severely hampering system stability and quality and impacting the team's ability to deliver enhancements at a pace that satisfies business needs. Although unmanaged debt can have disastrous results, strategically managed debt can help businesses and organizations take advantage of time-sensitive opportunities, fulfill market needs and acquire stakeholder feedback. Because architecture has such leverage within the overall development life cycle, strategic management of architectural debt is of primary importance. Some aspects of technical debt - but not all technical debt - affects product quality. This tutorial introduces the technical debt metaphor, the various types of technical debt, and in particular structural or architectural debt, the techniques for measuring and communicating this technical debt, and its relationship with software quality, both internal and external quality.},
}

@InProceedings{rosser2021systems,
  author       = {Rosser, Larri Ann and Norton, John H},
  booktitle    = {2021 IEEE Aerospace Conference (50100)},
  title        = {A Systems Perspective on Technical Debt},
  year         = {2021},
  organization = {IEEE},
  pages        = {1--10},
  abstract     = {This paper explores applications of the Technical Debt metaphor, which originated in the agile software community, at a systems level. We present a summary of current understanding of the technical debt concept and propose a broader application of the approach at a system level. The technical debt metaphor provides a method to identify cases when design or implementation decisions are being made for expediency and assess their long term impact on productivity and risk. In addition, technical debt management offers a logical approach to tracking expedient decisions and determining when it makes sense to carry the debt and when it's better to pay it off by updating designed and retrofitting units. In this paper, we describe various kinds of technical debt that may be present in a system baseline and consider how the presence of debt impacts further evolution of the system. Types of debt include architectural debt, configuration debt, testing debt and deprecation debt among others. We also present use case studies that illustrate how technical debt assessment and management can have a positive impact on system realization. Cases include moving a baseline from R&D to operations, reusing a baseline in a new context, and planning a technical refresh. We discuss methods of managing technical debt in a baseline including identification, quantification, tracking and payoff.},
}


@InProceedings{fontana2016tool,
  author    = {Fontana, Francesca Arcelli and Roveda, Riccardo and Zanoni, Marco},
  booktitle = {Proceedings of the 31st Annual ACM Symposium on Applied Computing},
  title     = {Tool support for evaluating architectural debt of an existing system: An experience report},
  year      = {2016},
  pages     = {1347--1349},
  abstract  = {During software development, maintenance and evolution, we can assess the quality of code, design and architecture to capture hints of possible problems and face them as soon as possible. We can capture signals of architecture erosion in different ways by exploiting several tools with the aim to identify architectural violations, architectural smells or other relevant features. In this paper, we provide our experience report in using three known tools to capture information that can be useful to identify and evaluate the architectural debt of an application. We outline the main differences among these tools and the results they produce.},
}
@inproceedings{macit2020methods,
  title={Methods for Identifying Architectural Debt: A Systematic Mapping Study},
  author={Macit, Yagup and Giray, G{\"o}rkem and T{\"u}z{\"u}n, Eray},
  booktitle={2020 Turkish National Software Engineering Symposium (UYMS)},
  pages={1--6},
  year={2020},
  organization={IEEE}
}

@Article{soliman2021architectural,
  author    = {Soliman, Mohamed and Avgeriou, Paris and Li, Yikun},
  journal   = {Information and Software Technology},
  title     = {Architectural design decisions that incur technical debt—An industrial case study},
  year      = {2021},
  pages     = {106669},
  abstract  = {Context:
During software development, some architectural design decisions incur technical debt, either deliberately or inadvertently. These have serious impact on the quality of a software system, and can cost significant time and effort to be changed. While current research efforts have explored general concepts of architectural design decisions and technical debt separately, debt-incurring architectural design decisions have not been specifically explored in practice.

Objective:
In this case study, we explore debt-incurring architectural design decisions (DADDs) in practice. Specifically, we explore the main types of DADDs, why and how they are incurred in a software system, and how practitioners deal with these types of design decisions.

Method:
We performed interviews and a focus group with practitioners working in embedded and enterprise software companies, discussing their concrete experience with such architectural design decisions.

Results:
We provide the following contributions: 1) A categorization for the types of DADDs, which extend a current ontology on architectural design decisions. 2) A process on how deliberate DADDs are made in practice. 3) A conceptual model which shows the relationships between the causes and triggers of inadvertent DADDs. 4) The main factors that influence the way of dealing with DADDs.},
  publisher = {Elsevier},
}

@InProceedings{martini2018anacondebt,
  author       = {Martini, Antonio},
  booktitle    = {2018 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  title        = {Anacondebt: A tool to assess and track technical debt},
  year         = {2018},
  organization = {IEEE},
  pages        = {55--56},
  abstract     = {It is challenging to assess and manage Technical Debt. Technical Debt is avoided or refactored if the long-term bene ts, such as preventing extra-costs, exceed the cost of repaying the debt. Some tools have been recently proposed for the identification of Technical Debt, but most of them do not help in assessing the cost-bene ts of repaying the Debt. Besides, it is challenging to track, visualize and plan Technical Debt refactoring systematically. Although practitioners might use simple tracking tools, calculating and communicating Technical Debt is currently not supported. Based on the results of previous research, combined with several practical experiences in collaboration with large software companies, we have developed and evaluated a lightweight tool, AnaCon-Debt, to track and assess Technical Debt.},
}

@InProceedings{perez2020software,
  author       = {P{\'e}rez, B and Correal, D and Vera-Rivera, FH},
  booktitle    = {Journal of Physics: Conference Series},
  title        = {How do software architects perceive technical debt in Colombian industry? An analysis of technical debt causes},
  year         = {2020},
  number       = {1},
  organization = {IOP Publishing},
  pages        = {012003},
  volume       = {1513},
  abstract     = {Technical debt is a metaphor used to describe technical decisions that can give the company a benefit in the short term but possibly hurting the overall quality of the software in the long term. Architectural decisions are considered one of the most common sources of technical debt, therefore, it becomes relevant to understand what causes lead to technical debt from the point of view of software architects. To accomplish this task, we used a survey research method to collect and analyze a corpus of 28 software architects from Colombia, as a part of the InsighTD project. Results showed that inappropriate planning is the most cited technical debt cause by software architects. However, results differ when comparison against engineers and manager are performed. Innacurate time estimate and producing more without quality were the most selected causes of technical debt according to engineers and managers. To improve this comparison, the rank-biased overlapping technique was used. As more elements were compared, more similar were these lists of causes among all three roles.},
}

@InProceedings{roveda2018towards,
  author       = {Roveda, Riccardo and Fontana, Francesca Arcelli and Pigazzini, Ilaria and Zanoni, Marco},
  booktitle    = {2018 44th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
  title        = {Towards an architectural debt index},
  year         = {2018},
  organization = {IEEE},
  pages        = {408--416},
  abstract     = {Different indexes have been proposed to evaluate software quality and technical debt. Usually these indexes take into account different code level issues and several metrics, well known software metrics or new ones defined ad hoc for a specific purpose. In this paper we propose and define a new index, more oriented to the evaluation of architectural violations. We describe in detail the index, called Architectural Debt Index, that we integrated in a tool developed for architectural smell detection. The index is based on the detection of architectural smells, their criticality and their history. Currently only dependency architectural smells have been considered, but other architectural debt indicators can be considered and integrated in the index computation.},
}

@InProceedings{snipes2018case,
  author       = {Snipes, Will and Karlekar, Sunil and Mo, Ran},
  booktitle    = {2018 44th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
  title        = {A Case Study of the Effects of Architecture Debt on Software Evolution Effort},
  year         = {2018},
  organization = {IEEE},
  pages        = {400--403},
  abstract     = {In large-scale software systems, the majority of defective files are architecturally connected, and the architecture connections usually exhibit design flaws, which are associated with higher change-proneness among files and higher maintenance costs. As software evolves with bug fixes, new features, or improvements, unresolved architecture design flaws can contribute to maintenance difficulties. The impact on effort due to architecture design flaws has been difficult to quantify and justify. In this paper, we conducted a case study where we identified flawed architecture relations and quantified their effects on maintenance activities. Using data from this project's source code and revision history, we identified file groups where files are architecturally connected and participated in flawed architecture designs, quantified the maintenance activities in the detected files, and assessed the penalty related to these files.},
}

@InProceedings{nayebi2019longitudinal,
  author       = {Nayebi, Maleknaz and Cai, Yuanfang and Kazman, Rick and Ruhe, Guenther and Feng, Qiong and Carlson, Chris and Chew, Francis},
  booktitle    = {2019 IEEE/ACM 41st International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP)},
  title        = {A longitudinal study of identifying and paying down architecture debt},
  year         = {2019},
  organization = {IEEE},
  pages        = {171--180},
  abstract     = {Architecture debt is a form of technical debt that derives from the gap between the intended and the actual architecture design. In this study we measured architecture debt in two ways: 1) in terms of system-wide coupling measures, and 2) in terms of the number and severity of architecture flaws. In recent research it was shown that the amount of architecture debt has a huge impact on software maintainability and evolution. Consequently, reducing debt is expected to make software less costly and more amenable to change. This paper reports on a longitudinal study of a healthcare communications product created by BrightSquid Secure Communications Corp. This young company is facing the typical trade-off problem of desiring responsiveness to change requests, but wanting to avoid the ever-increasing effort that the accumulation of quick-and-dirty changes eventually incurs. In the first stage of the study, we analyzed the status of the "before" system, which showed the impacts of change requests. This initial study motivated a more in-depth analysis of architecture debt. The results of this debt analysis were used in the second stage of the work to motivate a comprehensive refactoring of the software system. The third stage was a follow-on architecture debt analysis which quantified the improvements realized. Using this quantitative evidence, augmented by qualitative evidence gathered from in-depth interviews with BrightSquid's architects, we present lessons learned about the costs and benefits of paying down architecture debt in practice.},
}

@InProceedings{feng2019active,
  author       = {Feng, Qiong and Cai, Yuanfang and Kazman, Rick and Cui, Di and Liu, Ting and Fang, Hongzhou},
  booktitle    = {2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
  title        = {Active hotspot: an issue-oriented model to monitor software evolution and degradation},
  year         = {2019},
  organization = {IEEE},
  pages        = {986--997},
  abstract     = {Architecture degradation has a strong negative impact on software quality and can result in significant losses. Severe software degradation does not happen overnight. Software evolves continuously, through numerous issues, fixing bugs and adding new features, and architecture flaws emerge quietly and largely unnoticed until they grow in scope and significance when the system becomes difficult to maintain. Developers are largely unaware of these flaws or the accumulating debt as they are focused on their immediate tasks of address individual issues. As a consequence, the cumulative impacts of their activities, as they affect the architecture, go unnoticed. To detect these problems early and prevent them from accumulating into severe ones we propose to monitor software evolution by tracking the interactions among files revised to address issues. In particular, we propose and show how we can automatically detect active hotspots, to reveal architecture problems. We have studied hundreds of hotspots along the evolution timelines of 21 open source projects and showed that there exist just a few dominating active hotspots per project at any given time. Moreover, these dominating active hotspots persist over long time periods, and thus deserve special attention. Compared with state-of-the-art design and code smell detection tools we report that, using active hotspots, it is possible to detect signs of software degradation both earlier and more precisely.},
}

@InProceedings{von2019mitigating,
  author       = {von Zitzewitz, Alexander},
  booktitle    = {2019 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  title        = {Mitigating Technical and Architectural Debt with Sonargraph},
  year         = {2019},
  organization = {IEEE},
  pages        = {66--67},
  abstract     = {Sonargraph is a static analyzer with a focus on software architecture and metrics. The motivation to create Sonargraph came from the assumption that architectural debt (aka structural debt) is the most toxic form of technical debt. Repairing a broken architecture requires global and high-risk changes, while fixing other forms of technical debt mostly involves low-risk local changes. Therefore, the tool enables architects and developers to formally describe their architectural blueprint using a custom DSL (domain specific language). Once defined architectural rules can be checked and enforced in an automated way in all stages of the development process. This guarantees that a software system will never end up as the notorious "big ball of mud". Sonargraph currently supports Java, C#, C/C++ and Python and is used by hundreds of organizations worldwide.},
}

@InProceedings{martini2016estimating,
  author       = {Martini, Antonio and Sikander, Erik and Medlani, Niel},
  booktitle    = {2016 42th Euromicro conference on software engineering and advanced applications (SEAA)},
  title        = {Estimating and quantifying the benefits of refactoring to improve a component modularity: a case study},
  year         = {2016},
  organization = {IEEE},
  pages        = {92--99},
  abstract     = {In recent years, research and industry's attention has been focused on maintaining a system that would both decrease time to market in the short term and assure a sustainable feature output and smooth maintenance operations in the long run. A related phenomenon has been identified in Architectural Technical Debt: if the system architecture is sub-optimal for long-term business goals, it needs to be refactored. A key property of the system assuring long-term goals consists on modularity, or else the ability to decouple different components: such property allows the product to be evolved without costly changes pervading the whole system. However, understanding the business benefits of refactoring to achieve modularity is not trivial, especially for large refactorings involving substantial architectural changes. We have conducted a case study in a large company, analyzing a case of refactoring a component to achieve modularity. We report a comparative study of a refactored against a non-refactored component. We found that the modularization would be repaid in several months of development and maintenance. We present a method to calculate the effort saved by the modularization and an equation for calculating and quantifying the development and maintenance benefits of refactoring.},
}

@InProceedings{cai2016software,
  author    = {Cai, Yuanfang and Kazman, Rick},
  booktitle = {Proceedings of the 1st International Workshop on Bringing Architectural Design Thinking into Developers' Daily Activities},
  title     = {Software architecture health monitor},
  year      = {2016},
  pages     = {18--21},
  abstract  = {In this paper, we first discuss the concept of architecture debt and how this debt grows in virtually every software-intensive project. Next we propose a methodology for developers to monitor the health of a project's architecture through an analysis of the development artifacts that a project produces. Our objective is to monitor and manage architecture debt by leveraging an architecture model that we proposed recently, called the Design Rule Space (DRSpace). We use DRSpaces to split a complex system into smaller subsystems based on features, patterns, refactoring targets, etc., so that we can monitor and analyze the evolution and interaction of each subsystem separately. We also employ a recently proposed architectural metric---Decoupling Level---to quantitatively monitor changes in a project's overall level of architecture maintainability. Using these tools, we describe our vision for a software architecture "health monitor", on analogy with a health monitor used in a hospital, to continuously monitor the health of the "patient" and alert staff to any potential danger signs.},
}

@InProceedings{tommasel2019applying,
  author       = {Tommasel, Antonela},
  booktitle    = {2019 IEEE International Conference on Software Architecture Companion (ICSA-C)},
  title        = {Applying Social Network Analysis Techniques to Architectural Smell Prediction},
  year         = {2019},
  organization = {IEEE},
  pages        = {254--261},
  abstract     = {As a software system evolves, the amount and complexity of the interactions amongst its components is likely to increase, which negatively affects the system design structure and also its quality. For instance, certain modules might become coupled due to a new user feature being added or to suboptimal development decisions. Design degradation symptoms are often related to high coupling and unwanted dependencies, such as: cyclic dependencies or violations to design rules, amongst other architectural smells. Thus, the early detection of such symptoms is important for architects to: i) anticipate dependency-related design problems in different parts of the system, ii) assess possible situations of technical debt, and iii) proactively look for solutions to preserve the quality of the system. Although there are approaches that analyse design dependencies in code bases and flag smell occurrences, very few of them have dealt with the prediction of dependency relations amongst software components. This research hypothesises that a predictive approach can warn architects about dependency-related problems before they appear. To this end, a particular graph-based approach is social networks analysis (SNA), which has been used for modelling both nature and human phenomena. Specifically, SNA techniques can predict links that do not yet exist between pairs of nodes in a network. SNA applications have shown evidence that the topological features of dependency graphs can reveal interesting properties of the software system under analysis. Nonetheless, SNA techniques have not yet been extensively exploited in the Software Architecture community. In this context, the question that motivates this research is to what extent SNA can leverage on information from a software design (and its evolution over time) for inferring new dependencies and likely configurations of architectural smells out of those dependencies.},
}

@InProceedings{cai2019dv8,
  author       = {Cai, Yuanfang and Kazman, Rick},
  booktitle    = {2019 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  title        = {DV8: automated architecture analysis tool suites},
  year         = {2019},
  organization = {IEEE},
  pages        = {53--54},
  abstract     = {This paper present our tool suite called DV8. The objective of DV8 is to measure software modularity, detect architecture anti-patterns as technical debts, quantify the maintenance cost of each instance of an anti-pattern, and enable return on investment analyses of architectural debts. Different from other tools, DV8 integrates data from both source code and revision history. We now elaborate on each of DV8's capabilities.},
}

@InProceedings{fontana2016technical,
  author       = {Fontana, Francesca Arcelli and Roveda, Riccardo and Zanoni, Marco},
  booktitle    = {2016 IEEE 8th International Workshop on Managing Technical Debt (MTD)},
  title        = {Technical debt indexes provided by tools: a preliminary discussion},
  year         = {2016},
  organization = {IEEE},
  pages        = {28--31},
  abstract     = {In software maintenance and evolution, it is important to assess both code and architecture in order to identify issues to be solved to improve software quality. Different tools provide some kind of index giving us an overall evaluation of a project to be used when managing its technical debt. In this paper, we outline how the indexes, that we call in general Technical Debt Indexes, provided by five different tools are computed. We describe their principal features and differences, what aspects they are missing, and we outline if (and how) the indexes take into account architectural problems that could have a major impact on the architectural debt. We show that the indexes rely on different information sources and measure different quantities.},
}

@InProceedings{sas2019investigating,
  author       = {Sas, Darius and Avgeriou, Paris and Fontana, Francesca Arcelli},
  booktitle    = {2019 IEEE International Conference on software maintenance and evolution (ICSME)},
  title        = {Investigating instability architectural smells evolution: an exploratory case study},
  year         = {2019},
  organization = {IEEE},
  pages        = {557--567},
  abstract     = {Architectural smells may substantially increase maintenance effort and thus require extra attention for potential refactoring. While we currently understand this concept and have identified different types of such smells, we have not yet studied their evolution in depth. This is necessary to inform their prioritisation and refactoring. This study analyses the evolution of individual architectural smell instances over time, and the characteristics that define these instances. Three different types of architectural smells are taken into consideration and mined from a total of 524 versions across 14 different projects. The results show how different smell types differ in multiple aspects, such as their growth rate, the importance of the affected elements over time in the dependency network of the system, and the time each instance affects the system. They also cast valuable insights on what aspects are the most important to consider during prioritisation and refactoring activities.},
}

@InProceedings{fontana2019pagerank,
  author    = {Fontana, Francesca Arcelli and Pigazzini, Ilaria and Raibulet, Claudia and Basciano, Stefano and Roveda, Riccardo},
  booktitle = {Proceedings of the 13th European Conference on Software Architecture-Volume 2},
  title     = {Pagerank and criticality of architectural smells},
  year      = {2019},
  pages     = {197--204},
  abstract  = {Architectural smells represent symptoms of problems at architectural level that can negatively impact internal software qualities and lead to architectural debt. Detecting architectural smells and identifying the most critical ones is the key to prioritize refactoring efforts and prevent software architecture erosion. In this paper we focus our attention on three architectural smells based on dependency issues, called Cyclic Dependency, Unstable Dependency, and Hub-Like Dependency. Moreover, we evaluate the PageRank and Criticality of these smells through the analysis of six projects. PageRank is a measure that estimates whether an architectural smell is located in an important part of the project, where the importance is evaluated according to how many parts of a project depend on the one involved in the architectural smell. We describe a case study on the analysis of the possible relation existing between the PageRank and Criticality of the smells. The results show how the two measures can be both used to locate the architectural smells that need particular inspections and attention.},
}

@Article{spinellis2019evolution,
  author    = {Spinellis, Diomidis and Avgeriou, Paris C},
  journal   = {IEEE Transactions on Software Engineering},
  title     = {Evolution of the Unix system architecture: an exploratory case study},
  year      = {2019},
  abstract  = {Unix has evolved for almost five decades, shaping modern operating systems, key software technologies, and development practices. Studying the evolution of this remarkable system from an architectural perspective can provide insights on how to manage the growth of large, complex, and long-lived software systems. Along main Unix releases leading to the FreeBSD lineage we examine core architectural design decisions, the number of features, and code complexity, based on the analysis of source code, reference documentation, and related publications. We report that the growth in size has been uniform, with some notable outliers, while cyclomatic complexity has been religiously safeguarded. A large number of Unix-defining design decisions were implemented right from the very early beginning, with most of them still playing a major role. Unix continues to evolve from an architectural perspective, but the rate of architectural innovation has slowed down over the system's lifetime. Architectural technical debt has accrued in the forms of functionality duplication and unused facilities, but in terms of cyclomatic complexity it is systematically being paid back through what appears to be a self-correcting process. Some unsung architectural forces that shaped Unix are the emphasis on conventions over rigid enforcement, the drive for portability, a sophisticated ecosystem of other operating systems and development organizations, and the emergence of a federated architecture, often through the adoption of third-party subsystems. These findings have led us to form an initial theory on the architecture evolution of large, complex operating system software.},
  publisher = {IEEE},
}

@InProceedings{izurieta2018position,
  author       = {Izurieta, Clemente and Kimball, Kali and Rice, David and Valentien, Tessa},
  booktitle    = {2018 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  title        = {A position study to investigate technical debt associated with security weaknesses},
  year         = {2018},
  organization = {IEEE},
  pages        = {138--142},
  abstract     = {Context: Managing technical debt (TD) associated with potential security breaches found during design can lead to catching vulnerabilities (i.e., exploitable weaknesses) earlier in the software lifecycle; thus, anticipating TD principal and interest that can have decidedly negative impacts on businesses. Goal: To establish an approach to help assess TD associated with security weaknesses by leveraging the Common Weakness Enumeration (CWE) and its scoring mechanism, the Common Weakness Scoring System (CWSS). Method: We present a position study with a five-step approach employing the Quamoco quality model to operationalize the scoring of architectural CWEs. Results: We use static analysis to detect design level CWEs, calculate their CWSS scores, and provide a relative ranking of weaknesses that help practitioners identify the highest risks in an organization with a potential to impact TD. Conclusion: CWSS is a community agreed upon method that should be leveraged to help inform the ranking of security related TD items.},
}

@InProceedings{martini2016introduction,
  author       = {Martini, Antonio and Besker, Terese and Bosch, Jan},
  booktitle    = {2016 23rd Asia-Pacific Software Engineering Conference (APSEC)},
  title        = {The introduction of technical debt tracking in large companies},
  year         = {2016},
  organization = {IEEE},
  pages        = {161--168},
  abstract     = {Large software companies need to support continuous and fast delivery of customer value both in the short and long term. However, this can be hindered if both evolution and maintenance of existing systems are hampered by Technical Debt. Although a lot of theoretical work on Technical Debt has been recently produced, its practical management lacks empirical studies. In this paper we investigate the state of practice in several companies in order to understand how they start tracking Technical Debt. We combined different methodologies: we conducted a survey, involving 226 respondents from 15 organizations and a more in-depth multiple case-study in three organizations, where Technical Debt was tracked: we involved 13 interviews and 79 Technical Debt issues analysis. We found that the development time dedicated to manage Technical Debt is substantial (around 25% of the overall development) but not systematic: only a few participants methodically track Technical Debt. By studying the approaches in the companies participating in the case-study, we understood how companies start tracking Technical Debt and what are the initial benefits and challenges. Finally, we propose a Strategic Adoption Model based to define and adopt a dedicated process for tracking Technical Debt.},
}

@InProceedings{aaramaa2017requirements,
  author    = {Aaramaa, Sanja and Dasanayake, Sandun and Oivo, Markku and Markkula, Jouni and Saukkonen, Samuli},
  booktitle = {Proceedings of the 2017 International Conference on Software and System Process},
  title     = {Requirements volatility in software architecture design: an exploratory case study},
  year      = {2017},
  pages     = {40--49},
  abstract  = {Requirements volatility is a major issue in software (SW) development, causing problems such as project delays and cost overruns. Even though there is a considerable amount of research related to requirement volatility, the majority of it is inclined toward project management aspects. The relationship between SW architecture design and requirements volatility has not been researched widely, even though changing requirements may for example lead to higher defect density during testing. An exploratory case study was conducted to study how requirements volatility affects SW architecture design. Fifteen semi-structured, thematic interviews were conducted in the case company, which provides the selection of software products for business customers and consumers. The research revealed the factors, such as requirements uncertainty and dynamic business environment, causing requirements volatility in the case company. The study identified the challenges that requirements volatility posed to SW architecture design, including scheduling and architectural technical debt. In addition, this study discusses means of mitigating the factors that cause requirements volatility and addressing the challenges posed by requirements volatility. SW architects are strongly influenced by requirement volatility. Thus understanding the factors causing requirements volatility as well as means to mitigate the challenges has high industrial relevance.},
}

@Article{cai2018design,
  author    = {Cai, Yuanfang and Xiao, Lu and Kazman, Rick and Mo, Ran and Feng, Qiong},
  journal   = {IEEE Transactions on Software Engineering},
  title     = {Design rule spaces: A new model for representing and analyzing software architecture},
  year      = {2018},
  number    = {7},
  pages     = {657--682},
  volume    = {45},
  abstract  = {In this paper, we propose an architecture model called Design Rule Space (DRSpace). We model the architecture of a software system as multiple overlapping DRSpaces, reflecting the fact that any complex software system must contain multiple aspects, features, patterns, etc. We show that this model provides new ways to analyze software quality. In particular, we introduce an Architecture Root detection algorithm that captures DRSpaces containing large numbers of a project's bug-prone files, which are called Architecture Roots (ArchRoots). After investigating ArchRoots calculated from 15 open source projects, the following observations become clear: from 35 to 91 percent of a project's most bug-prone files can be captured by just 5 ArchRoots, meaning that bug-prone files are likely to be architecturally connected. Furthermore, these ArchRoots tend to live in the system for significant periods of time, serving as the major source of bug-proneness and high maintainability costs. Moreover, each ArchRoot reveals multiple architectural flaws that propagate bugs among files and this will incur high maintenance costs over time. The implication of our study is that the quality, in terms of bug-proneness, of a large, complex software project cannot be fundamentally improved without first fixing its architectural flaws.},
  publisher = {IEEE},
}

@InProceedings{bogner2019assuring,
  author       = {Bogner, Justus and Fritzsch, Jonas and Wagner, Stefan and Zimmermann, Alfred},
  booktitle    = {2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
  title        = {Assuring the evolvability of microservices: insights into industry practices and challenges},
  year         = {2019},
  organization = {IEEE},
  pages        = {546--556},
  abstract     = {While Microservices promise several beneficial characteristics for sustainable long-term software evolution, little empirical research covers what concrete activities industry applies for the evolvability assurance of Microservices and how technical debt is handled in such systems. Since insights into the current state of practice are very important for researchers, we performed a qualitative interview study to explore applied evolvability assurance processes, the usage of tools, metrics, and patterns, as well as participants' reflections on the topic. In 17 semi-structured interviews, we discussed 14 different Microservice-based systems with software professionals from 10 companies and how the sustainable evolution of these systems was ensured. Interview transcripts were analyzed with a detailed coding system and the constant comparison method. We found that especially systems for external customers relied on central governance for the assurance. Participants saw guidelines like architectural principles as important to ensure a base consistency for evolvability. Interviewees also valued manual activities like code review, even though automation and tool support was described as very important. Source code quality was the primary target for the usage of tools and metrics. Despite most reported issues being related to Architectural Technical Debt (ATD), our participants did not apply any architectural or service-oriented tools and metrics. While participants generally saw their Microservices as evolvable, service cutting and finding an appropriate service granularity with low coupling and high cohesion were reported as challenging. Future Microservices research in the areas of evolution and technical debt should take these findings and industry sentiments into account.},
}

@InProceedings{ludwig2017compiling,
  author       = {Ludwig, Jeremy and Xu, Steven and Webber, Frederick},
  booktitle    = {2017 IEEE International Conference on Systems, Man, and Cybernetics (SMC)},
  title        = {Compiling static software metrics for reliability and maintainability from GitHub repositories},
  year         = {2017},
  organization = {IEEE},
  pages        = {5--9},
  abstract     = {this paper identifies a small, essential set of static software code metrics linked to the software product quality characteristics of reliability and maintainability and to the most commonly identified sources of technical debt. A plug-in is created for the Understand code visualization and static analysis tool that calculates and aggregates the metrics. The plug-in produces a high-level interactive html report as well as developer-level information needed to address quality issues using Understand. A script makes use of Git, Understand, and the plug-in to compile results for a list of GitHub repositories into a single file. The primary contribution of this work is to describe an open-source plug-in to measure and visualize architectural complexity based on the propagation cost and core size metrics, which are not currently found in other tools. The plug-in should be useful to researchers and practitioners interested in these two metrics and as an expedient starting point to experimentation with metric collection and aggregation for groups of GitHub repositories. The plug-in was developed as a first step in an ongoing project aimed at applying case-based reasoning to the issue of software product quality.},
}

@InCollection{kumar2018exploring,
  author    = {Kumar, M Manoj and Nandakumar, AN},
  booktitle = {Smart Computing and Informatics},
  publisher = {Springer},
  title     = {Exploring multilateral Cloud computing security architectural design debt in terms of technical debt},
  year      = {2018},
  pages     = {567--579},
  abstract  = {This work identifies various design debt causes in a cloud computing system from various dimensions of design debt. Even though immature, un-ripen coded service accessible over the Internet using the cloud computing paradigm may work fine and be wholly tolerable to the patron; but excess quantities will make a service progression that may lead to extreme specialist of software developers and finally an inflexible product. Delivery of the earliest primary beginning coded service without ripeness or maturity is like going into debts or arrears or due to obligation. A petite tiny debt rates progress so protracted as it is paid or rewarded back punctually with a rewrite/redraft/revising/reworking. The risk arises when the debt is not repaid and settled. Every miniature infinitesimal effort spent on imprecise code reckons as interest on that arrears/debt. Intact engineering business can be brought to be idle under the balance load of an unconsolidated, non-solicit implementation, execution, and performance discharging object-oriented, functional or procedural or otherwise. This work uses refactoring as a solution for the identified debt in the multilateral cloud security architecture to secure the cloud services.},
}

@InProceedings{sierra2019self,
  author       = {Sierra, Giancarlo and Tahmid, Ahmad and Shihab, Emad and Tsantalis, Nikolaos},
  booktitle    = {2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
  title        = {Is self-admitted technical debt a good indicator of architectural divergences?},
  year         = {2019},
  organization = {IEEE},
  pages        = {534--543},
  abstract     = {Large software systems tend to be highly complex and often contain unaddressed issues that evolve from bad design practices or architectural implementations that drift from definition. These design flaws can originate from quick fixes, hacks or shortcuts to a solution, hence they can be seen as Technical Debt. Recently, new work has focused on studying source code comments that indicate Technical Debt, i.e., Self-Admitted Technical Debt (SATD). However, it is not known if addressing information left by developers in the form source code comments can give insight about the design flaws in a system and have the potential to provide fixes for bad architectural implementations. This paper investigates the possibility of using SATD comments to resolve architectural divergences. We leverage a data set of previously classified SATD comments to trace them to the architectural divergences of a large open source system, namely ArgoUML. We extract its conceptual and concrete architectures based on available design documentation and source code, and contrast both to expose divergences, trace them to SATD comments, and investigate their resolution. We found 7 high-level divergences in ArgoUML and 22 others among its subsystems, observing that merely 4 out of 29 (14%) divergences can be directly traced to SATD. Although using SATD as an indicator of architectural divergences is viable, the effort of doing so is time-intensive, and in general, will not lend to a significant reduction of architectural flaws in a software system.},
}

@InProceedings{bogner2018limiting,
  author    = {Bogner, Justus and Fritzsch, Jonas and Wagner, Stefan and Zimmermann, Alfred},
  booktitle = {Proceedings of the 2018 International Conference on Technical Debt},
  title     = {Limiting technical debt with maintainability assurance: an industry survey on used techniques and differences with service-and microservice-based systems},
  year      = {2018},
  pages     = {125--133},
  abstract  = {Maintainability assurance techniques are used to control this quality attribute and limit the accumulation of potentially unknown technical debt. Since the industry state of practice and especially the handling of Service- and Microservice-Based Systems in this regard are not well covered in scientific literature, we created a survey to gather evidence for a) used processes, tools, and metrics in the industry, b) maintainability-related treatment of systems based on service-orientation, and c) influences on developer satisfaction w.r.t. maintainability. 60 software professionals responded to our online questionnaire. The results indicate that using explicit and systematic techniques has benefits for maintainability. The more sophisticated the applied methods the more satisfied participants were with the maintainability of their software while no link to a hindrance in productivity could be established. Other important findings were the absence of architecture-level evolvability control mechanisms as well as a significant neglect of service-oriented particularities for quality assurance. The results suggest that industry has to improve its quality control in these regards to avoid problems with long-living service-based software systems.},
}

@InProceedings{zalewski2017risk,
  author       = {Zalewski, Andrzej},
  booktitle    = {2017 IEEE International Conference on Software Architecture Workshops (ICSAW)},
  title        = {Risk Appetite in Architectural Decision-Making},
  year         = {2017},
  organization = {IEEE},
  pages        = {149--152},
  abstract     = {This paper is an exploratory study on architects' attitudes towards risk and its influences on the architectural decision-making process. A classification of architects' attitude to risk-taking has been developed on the basis of Fowler's Technical Debt Quadrants. The core proposition of the paper is that the well-established concept of `risk appetite' can be equally well applied to characterise and classify architects' attitudes towards risk. This enables the aspects of the decision-making process that are influenced by architects' attitudes towards risks to be identified, and reveals what these influences are. It has been shown that the proposed classifications reflect many real-world situations.},
}

@Article{tamburri2019software,
  author    = {Tamburri, Damian A},
  journal   = {IEEE Transactions on Computational Social Systems},
  title     = {Software architecture social debt: managing the incommunicability factor},
  year      = {2019},
  number    = {1},
  pages     = {20--37},
  volume    = {6},
  abstract  = {Architectural technical debt is the additional project cost connected to technical issues nested in software architectures. Similarly, many practitioners have already experienced that there exists within software architectures a form of social debt, that is, the additional project cost connected to sociotechnical and organizational issues evident in or related to software architectures. This paper illustrates four recurrent antipatterns or community smells connected to such architectural social debt and outlines a means to measure the additional project cost connected to their underlying cause: decision incommunicability. Evaluating the results in multiple focus groups, this paper concludes that studying social debt and community smells at the architecture level may prove vital to rid software development communities of critical organizational flaws incurring considerable additional cost.},
  publisher = {IEEE},
}

@InProceedings{pujols2020skuld,
  author    = {Pujols, Josep Burgaya and Bas, Pieter and Mart{\'\i}nez-Fernandez, Silverio and Martini, Antonio and Trendowicz, Adam},
  booktitle = {Proceedings of the 3rd International Conference on Technical Debt},
  title     = {Skuld: a self-learning tool for impact-driven technical debt management},
  year      = {2020},
  pages     = {113--114},
  abstract  = {As the development progresses, software projects tend to accumulate Technical Debt and become harder to maintain. Multiple tools exist with the mission to help practitioners to better manage Technical Debt. Despite this progress, there is a lack of tools providing actionable and self-learned suggestions to practitioners aimed at mitigating the impact of Technical Debt in real projects. We aim to create a data-driven, lightweight, and self-learning tool positioning highly impactful refactoring proposals on a Jira backlog. Bearing this goal in mind, the first two authors have founded a startup, called Skuld.ai, with the vision of becoming the go-to software renovation company. In this tool paper, we present the software architecture and demonstrate the main functionalities of our tool. It has been showcased to practitioners, receiving positive feedback. Currently, its release to the market is underway thanks to an industry-research institute collaboration with Fraunhofer IESE to incorporate self-learning technical debt capabilities.},
}

@InProceedings{molnar2020long,
  author    = {Molnar, Arthur-Jozsef and Motogna, Simona},
  booktitle = {Proceedings of the 14th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
  title     = {Long-Term Evaluation of Technical Debt in Open-Source Software},
  year      = {2020},
  pages     = {1--9},
  abstract  = {Background: A consistent body of research and practice have identified that technical debt provides valuable and actionable insight into the design and implementation deficiencies of complex software systems. Existing software tools enable characterizing and measuring the amount of technical debt at selective granularity levels; by providing a computational model, they enable stakeholders to measure and ultimately control this phenomenon. Aims: In this paper we aim to study the evolution and characteristics of technical debt in open-source software. For this, we carry out a longitudinal study that covers the entire development history of several complex applications. The goal is to improve our understanding of how the amount and composition of technical debt changes in evolving software. We also study how new technical debt is introduced in software, as well as identify how developers handle its accumulation over the long term. Method: We carried out our evaluation using three complex, open-source Java applications. All 110 released versions, covering more than 10 years of development history for each application were analyzed using SonarQube. We studied how the amount, composition and history of technical debt changed during development, compared our results across the studied applications and present our most important findings. Results: For each application, we identified key versions during which large amounts of technical debt were added, removed or both. This had significantly more impact when compared to the lines of code or class count increases that generally occurred during development. However, within each version, we found high correlation between file lines of code and technical debt. We observed that the Pareto principle was satisfied for the studied applications, as 20% of issue types generated around 80% of total technical debt. Interestingly, there was a large degree of overlap between the issues that generated most of the debt across the studied applications. Conclusions: Early application versions showed greater fluctuation in the amount of existing technical debt. We found application size to be an unreliable predictor for the quantity of technical debt. Most debt was introduced in applications as part of milestone releases that expanded their feature set; likewise, we identified releases where extensive refactoring significantly reduced the level of debt. We also discovered that technical debt issues persist for a long time in source code, and their removal did not appear to be prioritized according to type or severity.},
}

@InProceedings{janes2020towards,
  author       = {Janes, Andrea and Lenarduzzi, Valentina},
  booktitle    = {2020 46th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
  title        = {Towards an Approach to Identify Obsolete Features based on Importance and Technical Debt},
  year         = {2020},
  organization = {IEEE},
  pages        = {389--393},
  abstract     = {Many of today's software systems are maintained over years or even decades. To ensure that software remains useful, new features have to be added or old features have to be adapted to respond to new or changed requirements. As time goes on, some of the features become obsolete, i.e., are not needed anymore. Typically, these features are not removed because of various reasons, e.g., because removing them might be considered too costly, the costs of keeping unused features is considered low, or because of the "sunk cost fallacy", i.e., that a feature is considered worth to keep because of the previously invested resources (time, money or effort) to build it. The consequences of keeping unused source code can impact maintainability, technical debt, performance, and extensibility of the system. This can lead to lower development productivity and to a reduced innovation ability, consequently reducing competitiveness on the market. This paper aims to present an approach to identify features based on their value and on costs for keeping or removing them.},
}

@InProceedings{maikantis2020software,
  author    = {Maikantis, Theodoros and Tsintzira, Angeliki-Agathi and Ampatzoglou, Apostolos and Arvanitou, Elvira-Maria and Chatzigeorgiou, Alexander and Stamelos, Ioannis and Bibi, Stamatia and Deligiannis, Ignatios},
  booktitle = {24th Pan-Hellenic Conference on Informatics},
  title     = {Software Architecture Reconstruction via a Genetic Algorithm: Applying the Move Class Refactoring},
  year      = {2020},
  pages     = {135--139},
  abstract  = {Modularity is one of the four key principles of software design and architecture. According to this principle, software should be organized into modules that are tightly linked internally (high cohesion), whereas at the same time as independent from other modules as possible (low coupling). However, in practice, this principle is violated due to poor architecting design decisions, lack of time, or coding shortcuts, leading to a phenomenon termed as architectural technical debt (ATD). To alleviate this problem (lack of architectural modularity), the most common solution is the application of a software refactoring, namely Move Class—i.e., moving classes (the core artifact in object-oriented systems) from one module to another. To identify Move Class refactoring opportunities, we employ a search-based optimization process, relying on optimization metrics, through which optimal moves are derived. Given the extensive search space required for applying a brute-force search strategy, in this paper, we propose the use of a genetic algorithm that re-arranges existing software classes into existing or new modules (software packages in Java, or folders in C++). To validate the usefulness of the proposed refactorings, we performed an industrial case study on three projects (from the Aviation, Healthcare, and Manufacturing application domains). The results of the study indicate that the proposed architecture reconstruction is able to improve modularity, improving both coupling and cohesion. The obtained results can be useful to practitioners through an open source tool; whereas at the same point, they open interesting future work directions.},
}

@InProceedings{san2020characterizing,
  author       = {San Mart{\'\i}n, Daniel and Siqueira, Bento and de Camargo, Valter Vieira and Ferrari, Fabiano},
  booktitle    = {2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
  title        = {Characterizing Architectural Drifts of Adaptive Systems},
  year         = {2020},
  organization = {IEEE},
  pages        = {389--399},
  abstract     = {An adaptive system (AS) evaluates its own behavior and changes it when the evaluation indicates that the system is not accomplishing what it is intended to do, or when better functionality or performance is possible. MAPE-K is a reference model that prescribes the adaptation mechanism of ASs by means of high-level abstractions such as Monitors, Analyzers, Planners and Executors and the relationships among them. Since the abstractions and the relationships provided by MAPE-K are generic, other reference models were proposed focusing on providing lower level abstractions to support software engineers in a more suitable way. However, after the analysis of seven representative ASs, we realized the abstractions prescribed by the existing reference models are not properly implemented, thus leading to architectural drifts. Therefore, in this paper we characterized three of these drifts by describing them with a template and showing practical examples. The three architectural drifts of ASs are Scattered Reference Inputs, Mixed Executors and Effectors, and Obscure Alternatives. We expect that by identifying and characterizing these drifts, we can help software architects improve their design and, as a consequence, increase the reliability of this type of systems.},
}

@InProceedings{de2020improving,
  author       = {de Toledo, Saulo S and Martini, Antonio and Sj{\o}berg, Dag IK},
  booktitle    = {International Conference on Agile Software Development},
  title        = {Improving agility by managing shared libraries in microservices},
  year         = {2020},
  organization = {Springer},
  pages        = {195--202},
  abstract     = {Using microservices is a way of supporting an agile architecture. However, if the microservices development is not properly managed, the teams’ development velocity may be affected, reducing agility and increasing architectural technical debt. This paper investigates how to manage the use of shared libraries in microservices to improve agility during development. We interviewed practitioners from four large international companies involved in microservices projects to identify problems when using shared libraries. Our results show that the participating companies had issues with shared libraries as follows: coupling among teams, delays on fixes due to overhead on libraries development teams, and need to maintain many versions of the libraries. Our results highlight that the use of shared libraries may hinder agility on microservices. Thus, their use should be restricted to situations where shared libraries cannot be replaced by a microservice and the costs of replicating the code on each service is very high.},
}

@InCollection{rademacher2020modeling,
  author    = {Rademacher, Florian and Sachweh, Sabine and Z{\"u}ndorf, Albert},
  booktitle = {Enterprise, Business-Process and Information Systems Modeling},
  publisher = {Springer},
  title     = {A modeling method for systematic architecture reconstruction of microservice-based software systems},
  year      = {2020},
  pages     = {311--326},
  abstract  = {Microservice Architecture (MSA) is an approach to architecting service-based software systems, which aims for decreasing service coupling to enable independent service development and deployment. Consequently, the adoption of MSA is expected to particularly benefit the scalability, maintainability, and reliability of monolithic systems. However, MSA adoption also increases architectural complexity in service design, implementation, and operation. As a result, Software Architecture Reconstruction (SAR) of microservice architectures is aggravated. This paper presents a modeling method that systematizes SAR of microservice architectures with the goal to facilitate its execution. The method yields reconstruction models for certain architecture viewpoints in MSA to enable efficient architecture analysis. We validate the method’s applicability by means of a case study architecture and the assessment of its risk in technical debt using derived reconstruction models.},
}

@Article{larrucea2020managing,
  author    = {Larrucea, Xabier and Santamaria, Izaskun and Fernandez-Gauna, Borja},
  journal   = {Journal of Software: Evolution and Process},
  title     = {Managing security debt across PLC phases in a VSE context},
  year      = {2020},
  number    = {3},
  pages     = {e2214},
  volume    = {32},
  abstract  = {Nowadays, security and safety aspects are two of the major concerns for any software system development, especially while developing safety critical systems. This is especially relevant for very small entities because they have a limited amount of resources for dealing with all these aspects at the same time. In addition, these systems are highly regulated domains, and they involve a huge set of standards focused on safety and security-related issues. Therefore, these small entities are not only facing hurdles related to technical aspects but also from the so-called technical debt when overarching a critical development. This paper extends the assurance cases approach by integrating security aspects within the life cycle, and it proposes a framework for managing the associated security technical debt for very small entities. A tool chain is outlined, and the approach is illustrated with an industrial use case.},
  publisher = {Wiley Online Library},
}

@article{raibulet2020preliminary,
  title={A preliminary analysis of self-adaptive systems according to different issues},
  author={Raibulet, Claudia and Fontana, Francesca Arcelli and Carettoni, Simone},
  journal={Software Quality Journal},
  pages={1--31},
  year={2020},
  publisher={Springer}
}

@Article{verdecchia2021building,
  author    = {Verdecchia, Roberto and Kruchten, Philippe and Lago, Patricia and Malavolta, Ivano},
  journal   = {Journal of Systems and Software},
  title     = {Building and evaluating a theory of architectural technical debt in software-intensive systems},
  year      = {2021},
  pages     = {110925},
  volume    = {176},
  abstract  = {Architectural technical debt in software-intensive systems is a metaphor used to describe the “big” design decisions (e.g., choices regarding structure, frameworks, technologies, languages, etc.) that, while being suitable or even optimal when made, significantly hinder progress in the future. While other types of debt, such as code-level technical debt, can be readily detected by static analyzers, and often be refactored with minimal or only incremental efforts, architectural debt is hard to be identified, of wide-ranging remediation cost, daunting, and often avoided.

In this study, we aim at developing a better understanding of how software development organizations conceptualize architectural debt, and how they deal with it. In order to do so, in this investigation we apply a mixed empirical method, constituted by a grounded theory study followed by focus groups. With the grounded theory method we construct a theory on architectural technical debt by eliciting qualitative data from software architects and senior technical staff from a wide range of heterogeneous software development organizations. We applied the focus group method to evaluate the emerging theory and refine it according to the new data collected.

The result of the study, i.e., a theory emerging from the gathered data, constitutes an encompassing conceptual model of architectural technical debt, identifying and relating concepts such as its symptoms, causes, consequences, management strategies, and communication problems. From the conducted focus groups, we assessed that the theory adheres to the four evaluation criteria of classic grounded theory, i.e., the theory fits its underlying data, is able to work, has relevance, and is modifiable as new data appears.

By grounding the findings in empirical evidence, the theory provides researchers and practitioners with novel knowledge on the crucial factors of architectural technical debt experienced in industrial contexts.},
  publisher = {Elsevier},
}

@InProceedings{borowa2021influence,
  author       = {Borowa, Klara and Zalewski, Andrzej and Kijas, Szymon},
  booktitle    = {2021 IEEE 18th International Conference on Software Architecture (ICSA)},
  title        = {The influence of cognitive biases on architectural technical debt},
  year         = {2021},
  organization = {IEEE},
  pages        = {115--125},
  abstract     = {Cognitive biases exert a significant influence on human thinking and decision-making. In order to identify how they influence the occurrence of architectural technical debt, a series of semi-structured interviews with software architects was performed. The results show which classes of architectural technical debt originate from cognitive biases, and reveal the antecedents of technical debt items (classes) through biases. This way, we analysed how and when cognitive biases lead to the creation of technical debt. We also identified a set of debiasing techniques that can be used in order to prevent the negative influence of cognitive biases. The observations of the role of organisational culture in the avoidance of inadvertent technical debt throw a new light on that issue.},
}

@Article{verdecchia2022empirical,
  author    = {Verdecchia, Roberto and Malavolta, Ivano and Lago, Patricia and Ozkaya, Ipek},
  journal   = {PeerJ Computer Science},
  title     = {Empirical evaluation of an architectural technical debt index in the context of the Apache and ONAP ecosystems},
  year      = {2022},
  pages     = {e833},
  volume    = {8},
  abstract  = {Background
Architectural Technical Debt (ATD) in a software-intensive system denotes architectural design choices which, while being suitable or even optimal when adopted, lower the maintainability and evolvability of the system in the long term, hindering future development activities. Despite the growing research interest in ATD, how to gain an informative and encompassing viewpoint of the ATD present in a software-intensive system is still an open problem.

Objective
In this study, we evaluate ATDx, a data-driven approach providing an overview of the ATD present in a software-intensive system. The approach, based on the analysis of a software portfolio, calculates severity levels of architectural rule violations via a clustering algorithm, and aggregates results into different ATD dimensions.

Method
To evaluate ATDx, we implement an instance of the approach based on SonarQube, and run the analysis on the Apache and ONAP ecosystems. The analysis results are then shared with the portfolio contributors, who are invited to participate in an online survey designed to evaluate the representativeness and actionability of the approach.

Results
The survey results confirm the representativeness of the ATDx, in terms of both the ATDx analysis results and the used architectural technical debt dimensions. Results also showed the actionability of the approach, although to a lower extent when compared to the ATDx representativeness, with usage scenarios including refactoring, code review, communication, and ATD evolution analysis.

Conclusions
With ATDx, we strive for the establishment of a sound, comprehensive, and intuitive architectural view of the ATD identifiable via source code analysis. The collected results are promising, and display both the representativeness and actionability of the approach. As future work, we plan to consolidate the approach via further empirical experimentation, by considering other development contexts (e.g., proprietary portfolios and other source code analysis tools), and enhancing the ATDx report capabilities.},
  publisher = {PeerJ Inc.},
}

@InProceedings{ospina2021atdx,
  author    = {Ospina, Sebastian and Verdecchia, Roberto and Malavolta, Ivano and Lago, Patricia},
  booktitle = {European Conference on Software Architecture (to appear)},
  title     = {ATDx: A tool for providing a data-driven overview of architectural technical debt in software-intensive systems},
  year      = {2021},
  abstract  = {Architectural technical debt (ATD) in software-intensive systems is mostly invisible to software developers, can be widespread throughout entire code-bases, and its remediation cost is often steep. In
recent years, numerous approaches have been proposed to identify, keep track, and ultimately manage
ATD. The variety of approaches available opens a new problem, namely how to gain an encompassing
overview of the ATD identified in a software-intensive system. With this paper we make available the
ATDx tool, an implementation of ATDx written in Python, designed in a plug-in fashion. ATDx is an
approach designed to provide a data-driven, intuitive, and actionable overview of the ATD present in
a portfolio of software projects. ATDx is based on third-party source code analysis tools, architectural
issue severity calculation via clustering, and aggregation of measurements into different architectural
technical debt dimensions. The ATDx tool allows users to automatically run the ATDx analysis, generate reports containing the ATDx analysis results, and is integrated with GitHub. In addition to the tool,
we provide two already implemented plugins, allowing users to run the ATDx tool out-of-the-box.
GitHub repository: https://github.com/S2-group/ATDx
Video: https://youtu.be/ULT9fgxuB7E},
}

@InProceedings{de2021reducing,
  author       = {de Toledo, Saulo S and Martini, Antonio and Sj{\o}berg, Dag IK and Przybyszewska, Agata and Frandsen, Johannes Skov},
  booktitle    = {2021 47th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
  title        = {Reducing Incidents in Microservices by Repaying Architectural Technical Debt},
  year         = {2021},
  organization = {IEEE},
  pages        = {196--205},
  abstract     = {Architectural technical debt (ATD) may create a substantial extra effort in software development, which is called interest. There is little evidence about whether repaying ATD in microservices reduces such interest. Objectives: We wanted to conduct a first study on investigating the effect of removing ATD on the occurrence of incidents in a microservices architecture. Method: We conducted a quantitative and qualitative case study of a project with approximately 1000 microservices in a large, international financing services company. We measured and compared the number of software incidents of different categories before and after repaying ATD. Results: The total number of incidents was reduced by 84%, and the numbers of critical- and high-priority incidents were both reduced by approximately 90% after the architectural refactoring. The number of incidents in the architecture with the ATD was mainly constant over time, but we observed a slight increase of low priority incidents related to inaccessibility and the environment in the architecture without the ATD. Conclusion: This study shows evidence that refactoring ATDs, such as lack of communication standards, poor management of dead-letter queues, and the use of inadequate technologies in microservices, reduces the number of critical- and high-priority incidents and, thus, part of its interest, although some low priority incidents may increase.},
}

@article{verdecchia2021architectural,
  title={Architectural Technical Debt: Identification and Management},
  author={Verdecchia, Roberto},
  year={2021},
  publisher={Gran Sasso Science Institute}
}

@Article{pigazzini2021architectural,
  author   = {Pigazzini, Ilaria and Briola, Daniela and Fontana, Francesca Arcelli},
  title    = {Architectural Technical Debt of Multiagent Systems Development Platforms},
  year     = {2021},
  abstract = {Technical debt is candidate to be the next buzzword in software engineering, and the number of studies
evaluating the technical debt of software projects is increasing. A particular and dangerous type of debt
is the architectural debt, i.e., the consequences of sub-optimal design decisions. Currently, there are no
studies about the evaluation of architectural debt in MultiAgent Systems (MAS) and platforms. Hence,
in this paper we propose the analysis of four well-known MAS development platforms, with the aim of
evaluating their architectural debt and open the discussion in this field. We exploit a tool, named Arcan,
developed for architectural smell detection and for the computation of an architectural debt index. The
results show that MAS development platforms are subjected to architectural debt, and in particular to
the presence of Cyclic Dependency smells. However, there is evidence that the minimum amount of
debt is reached when developers report “bug fixes” and “Improvements},
}

@Article{das2022technical,
  author    = {Das, Dipta and Maruf, Abdullah Al and Islam, Rofiqul and Lambaria, Noah and Kim, Samuel and Abdelfattah, Amr S and Cerny, Tomas and Frajtak, Karel and Bures, Miroslav and Tisnovsky, Pavel},
  journal   = {ACM SIGAPP Applied Computing Review},
  title     = {Technical debt resulting from architectural degradation and code smells: a systematic mapping study},
  year      = {2022},
  number    = {4},
  pages     = {20--36},
  volume    = {21},
  abstract  = {Poor design choices, bad coding practices, or the need to produce software quickly can stand behind technical debt. Unfortunately, manually identifying and managing technical debt gets more difficult as the software matures. Recent research offers various techniques to automate the process of detecting and managing technical debt to address these challenges. This manuscript presents a mapping study of the many aspects of technical debt that have been discovered in this field of study. This includes looking at the various forms of technical debt, as well as detection methods, the financial implications, and mitigation strategies. The findings and outcomes of this study are applicable to a wide range of software development life-cycle decisions.},
  publisher = {ACM New York, NY, USA},
}

@article{perez2021rebel,
  title={REBEL: A Semiautomatic Approach to Identify Architectural Technical Debt from Heterogeneous Artifacts},
  author={Perez Gutierrez, Boris Rainiero and others},
  year={2021},
  publisher={Universidad de los Andes}
}

@inproceedings{verdecchia2021summary,
  title={Summary: Building and evaluating a theory of architectural technical debt in software-intensive systems},
  author={Verdecchia, Roberto and Kruchten, Philippe and Lago, Patricia and Malavolta, Ivano},
  booktitle={15th European Conference on Software Architecture-Companion, ECSA-C 2021},
  year={2021},
  organization={CEUR-WS}
}

@Article{ahrariarchitectural,
  author   = {Ahrari, Sara and Baasan, Tselmeg},
  title    = {Architectural Technical Debt-can it be prevented with a software project generator?},
  year={0},
  abstract = {Architectural Technical Debt (ATD) is a challenge that many of today’s companies
aim to overcome. ATD concerns the overall structure and architecture of a softwareintensive system and can be described as the unresolved shortcuts developers take under circumstances of e.g. time pressure and uncertain requirements. Planning and constructing a well-thought-out architecture is time consuming and resource-intensive
and if not done carefully, it can cause ATD. This thesis aims to investigate if it is possible to prevent the rise of ATD with a software project generator and how to maintain it. We have carried out a study following the design science research paradigm at a case company, Jayway by Devoteam. We conducted both literature and empirical studies to
better understand the current situation at the case company and based on that proposed a feasible solution. According to our findings, a project generator tool can mitigate the causes of ATD at the beginning of a project. However, ATD can be introduced later on due to various factors, for instance negligence of best practices. Moreover, we concluded that the most suitable way for maintaining such a tool is adopting Inner Source.},
}

@InProceedings{capilla2021impact,
  author       = {Capilla, Rafael and Mikkonen, Tommi and Carrillo, Carlos and Fontana, Francesca Arcelli and Pigazzini, Ilaria and Lenarduzzi, Valentina},
  booktitle    = {2021 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  title        = {Impact of Opportunistic Reuse Practices to Technical Debt},
  year         = {2021},
  organization = {IEEE},
  pages        = {16--25},
  abstract     = {Technical debt (TD) has been recognized as an important quality problem for both software architecture and code. The evolution of TD techniques over the past years has led to a number of research and commercial tools. In addition, the increasing trend of opportunistic reuse (as opposed to systematic reuse), where developers reuse code assets in popular repositories, is changing the way components are selected and integrated into existing systems. However, reusing software opportunistically can lead to a loss of quality and induce TD, especially when the architecture is changed in the process. However, to the best of our knowledge, no studies have investigated the impact of opportunistic reuse in TD. In this paper, we carry out an exploratory study to investigate to what extent reusing components opportunistically negatively affects the quality of systems. We use one commercial and one research tool to analyze the TD ratios of three case systems, before and after opportunistically extending them with open-source software.},
}

@article{lenarduzzi2021systematic,
  title={A systematic literature review on technical debt prioritization: Strategies, processes, factors, and tools},
  author={Lenarduzzi, Valentina and Besker, Terese and Taibi, Davide and Martini, Antonio and Fontana, Francesca Arcelli},
  journal={Journal of Systems and Software},
  volume={171},
  pages={110827},
  year={2021},
  publisher={Elsevier}
}

@InProceedings{malakuti2021need,
  author       = {Malakuti, Somayeh and Heuschkel, Jens},
  booktitle    = {2021 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  title        = {The Need for Holistic Technical Debt Management across the Value Stream: Lessons Learnt and Open Challenges},
  year         = {2021},
  organization = {IEEE},
  pages        = {109--113},
  abstract     = {The long lifetime and the evolving nature of industrial products make them subject to technical debt at different levels. Despite multiple years of research on technical debt management, our industrial experience shows that introducing systematic technical debt management in a large-scale company is very challenging. To identify the challenges, we provide a conceptual framework for holistic debt management across the product development value stream, which takes multiple categories of debt and their interplays into account. We use this framework to identify multiple challenges that are still open to be explored by the research community. Due to the practical nature of technical debt management, we believe this paper can guide the research community on the needs of industry for the effective application of technical debt management in practice.},
}

@Article{perez2021technical,
  author    = {P{\'e}rez, Boris and Castellanos, Camilo and Correal, Dar{\'\i}o and Rios, Nicolli and Freire, S{\'a}vio and Sp{\'\i}nola, Rodrigo and Seaman, Carolyn and Izurieta, Clemente},
  journal   = {Information and Software Technology},
  title     = {Technical debt payment and prevention through the lenses of software architects},
  year      = {2021},
  pages     = {106692},
  volume    = {140},
  abstract  = {Context:
Architectural decisions are considered one of the most common sources of technical debt (TD). Thus, it is necessary to understand how TD is perceived by software architects, particularly, the practices supporting the elimination of debt items from projects, and the practices used to reduce the chances of TD occurrence.

Objective:
This paper investigates the most commonly used practices to pay off TD and to prevent debt occurrence in software projects from the architect’s point of view.

Method:
We used the available data from InsighTD, which is a globally distributed family of industrial surveys on the causes, effects, and management of TD. We analyze responses from a corpus of 72 software architects from Brazil, Chile, Colombia, and the United States.

Results:
Results showed that refactoring (30.2%) was the main practice related to TD payment, followed by design improvements (14.0%). Refactoring, design improvements, and test improvements are the most cited payment practices among cases of code, design and test debt. Concerning the TD preventive practices, we find that having a well-defined architecture and design is the most cited practice (13.6%), followed by having a well-defined scope and requirements. This last practice is the most cited one for expert software architects. Finally, when comparing preventive practices among the three major roles derived from the survey (software architects, engineer roles, and management roles), we found that none of the roles shared the most cited practice, meaning that each role had its worries and focus on different strategies to reduce TD’s presence in the software.

Conclusion:
The lists of TD payment and prevention practices can guide software teams by having a catalog of practices to keep debt controlled or reduced.},
  publisher = {Elsevier},
}

@Article{de2022accumulation,
  author    = {De Toledo, Saulo S and Martini, Antonio and Nguyen, Phu H and Sj{\o}berg, Dag IK},
  journal   = {IEEE Access},
  title     = {Accumulation and prioritization of Architectural Debt in three companies migrating to microservices},
  year      = {2022},
  abstract  = {Many companies migrate to microservices because they help deliver value to customers quickly and continuously. However, like any architectural style, microservices are prone to architectural technical debt (ATD), which can be costly if the debts are not timely identified, avoided, or removed. During the early stages of migration, microservice-specific ATDs may accumulate. For example, practitioners may decide to continue using poorly defined APIs in microservices while attempting to maintain compatibility with old functionalities. The riskiest ATDs must be prioritized. Nevertheless, there is limited research regarding the prioritization of ATDs in companies migrating to microservices. This study aims to identify, during migration, which microservice-specific ATDs occur, are the most severe, and are the most challenging to solve. In addition, we propose a way to prioritize these debts. We conducted a multiple exploratory case study of three large companies that were early in the migration process to microservices. We interviewed 47 practitioners with several roles to identify the debts in their contexts.We report the ATDs detected during migration, the ATDs that practitioners estimate to occur in the future, and the ATDs that practitioners report as difficult to solve. We discuss the results in the context of the companies involved in this study. In addition, we used a risk assessment approach to propose a way for prioritizing ATDs. Practitioners from other organizations and researchers may use this approach to provide rankings to help identify and prioritize which ATDs should be avoided or solved in their contexts.},
  publisher = {IEEE},
}

@InProceedings{saraiva2021technical,
  author    = {Saraiva, Diego and Neto, Jos{\'e} Gameleira and Kulesza, Uir{\'a} and Freitas, Guilherme and Reboucas, Rodrigo and Coelho, Roberta},
  booktitle = {Proceedings of the 23rd International Conference on Enterprise Information Systems},
  title     = {Technical debt tools: a systematic mapping study},
  year      = {2021},
  pages     = {88--98},
  abstract  = {Context: The concept of technical debt is a metaphor that contextualizes problems faced during software evolution that reflect technical compromises in tasks that are not carried out adequately during their development
- they can yield short-term benefit to the project in terms of increased productivity and lower cost, but that may
have to be paid off with interest later. Objective: This work investigates the current state of the art of technical
debt tools by identifying which activities, functionalities and kind of technical debt are handled by existing
tools that support the technical debt management in software projects. Method: A systematic mapping study
is performed to identify and analyze available tools for managing technical debt based on a set of five research
questions. Results: The work contributes with (i) a systematic mappping of current research on the field, (ii)
a highlight of the most referenced tools, their main characteristics, their supported technical debt types and
activities, and (iii) a discussion of emerging findings and implications for future research. Conclusions: Our
study identified 50 TD tools where 42 of them are new tools, and 8 tools extend an existing one. Most of the
tools address technical debt related to code, design, and/or architecture artifacts. Besides, the different TD
management activities received different levels of attention. For example, TD identification is supported by
80% of the tools, whereas 30% of them handle the TD documentation activity. Tools that deal with TD identification and measurement activities are still predominant. However, we observed that recent tools focusing on
TD prevention, replacement, and prioritization activities represent emergent research trends.},
}

@InProceedings{pina2021technical,
  author       = {Pina, Diogo and Goldman, Alfredo and Tonin, Graziela},
  booktitle    = {2021 47th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
  title        = {Technical Debt Prioritization: Taxonomy, Methods Results, and Practical Characteristics},
  year         = {2021},
  organization = {IEEE},
  pages        = {206--213},
  abstract     = {Technical debt is the metaphor for shortcuts in software development that bring short-term benefits, but long-term consequences hinder the process of maintaining and developing software. It is important to manage these technical debt items, as not all of them need to be paid. Having a list of prioritized debts is an essential step in decision-making in the management process. This work aims at finding technical debt prioritization methods, providing a classification of them. That is, methods to identify whether and when a technical debt should be paid off. We performed a systematic mapping review to find and analyze the main papers of the area, covering the main bases. We selected 112 studies, resulting in 51 unique papers. We classified the methods in a two-level taxonomy containing 10 categories according to their different possible outcomes. In addition, we have identified three methods results: boolean, category and ordered list. Finally, we have also identified practical technical characteristics and requirements for a method to prioritize technical debt items in real projects. Although several methods have been found in literature, none of them are adaptive to the context and are language-independent, nor cover several technical debt types. Moreover, there is a clear lack of tools to use them. So, in conclusion, the research on technical debt prioritization is still wide open. From this study, a combination of the techniques used in these methods can be tested and automated to assist in the decision-making process on which debts should be paid.},
}

@InProceedings{de2021business,
  author       = {de Almeida, Rodrigo Rebou{\c{c}}as and do Nascimento Ribeiro, Rafael and Treude, Christoph and Kulesza, Uir{\'a}},
  booktitle    = {2021 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  title        = {Business-driven technical debt prioritization: An industrial case study},
  year         = {2021},
  organization = {IEEE},
  pages        = {74--83},
  abstract     = {Incorporating the business perspective into prioritizing technical debt is essential to contribute to decision making in industry. In this paper, we evolve and evaluate a business-driven approach for technical debt prioritization. The approach was evaluated during a five-months industrial case study with business and technical stakeholders' active participation. The results show that the approach contributed to aligning business criteria between the business and technical stakeholders. We also observed a downward trend in the amount of technical debt that affects high-value business assets. Moreover, we identified eight business factors that affect the decision making related to the prioritization of technical debt. The study results suggest that the proposed business-driven technical debt prioritization approach can help teams to focus their efforts on paying off the business' most relevant debt.},
}

@inproceedings{bogner2021characterizing,
  title={Characterizing technical debt and antipatterns in ai-based systems: A systematic mapping study},
  author={Bogner, Justus and Verdecchia, Roberto and Gerostathopoulos, Ilias},
  booktitle={2021 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  pages={64--73},
  year={2021},
  organization={IEEE}
}

@Article{sas2021perception,
  author    = {Sas, Darius and Pigazzini, Ilaria and Avgeriou, Paris and Fontana, Francesca Arcelli},
  journal   = {Ieee software},
  title     = {The perception of Architectural Smells in industrial practice},
  year      = {2021},
  number    = {6},
  pages     = {35--41},
  volume    = {38},
  abstract  = {Architectural technical debt (TD) is the most significant type of TD in industrial practice. Our goals in this study were to better understand the phenomenon of architectural smells, help practitioners better manage them, and offer relevant support to researchers.},
  publisher = {IEEE},
}

@article{vogel2021interdisciplinary,
  title={Interdisciplinary effects of technical debt in companies with mechatronic products—a qualitative study},
  author={Vogel-Heuser, Birgit and Bi, Fandi},
  journal={Journal of Systems and Software},
  volume={171},
  pages={110809},
  year={2021},
  publisher={Elsevier}
}

@article{ramavc2022prevalence,
  title={Prevalence, common causes and effects of technical debt: Results from a family of surveys with the IT industry},
  author={Rama{\v{c}}, Robert and Mandi{\'c}, Vladimir and Tau{\v{s}}an, Neboj{\v{s}}a and Rios, Nicolli and Freire, S{\'a}vio and P{\'e}rez, Boris and Castellanos, Camilo and Correal, Dar{\'\i}o and Pacheco, Alexia and Lopez, Gustavo and others},
  journal={Journal of Systems and Software},
  volume={184},
  pages={111114},
  year={2022},
  publisher={Elsevier}
}

@InProceedings{al2021using,
  author       = {Al Maruf, Abdullah and Lambaria, Noah and Abdelfattah, Amr S and Cerny, Tomas},
  booktitle    = {2021 36th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
  title        = {Using Version Control and Issue Tickets to detect Code Debt and Economical Cost},
  year         = {2021},
  organization = {IEEE},
  pages        = {1208--1209},
  abstract     = {Despite the fact that there are numerous classifications of technical debt based on various criteria, Code Debt or code smells is a category that appears in the majority of current research. One of the primary causes of code debt is the urgency to deliver software quickly, as well as bad coding practices. Among many approaches, static code analysis has received the most attention in studies to detect code-smell/code debt. However, most of them examine the same programming language, although today’s software company utilizes many development stacks with various languages and tools. This problem can be resolved by detecting code debt with Issue/Ticket cards. This paper presents a method for detecting code debt leveraging natural language processing on issue tickets. It also proposes a method for calculating the average amount of time that a code debt was present in the software. This method is implemented utilizing git mining.},
}

@article{binamungu4040641empirical,
  title={An Empirical Study of the Extent and Causes of Technical Debt in Public Organizations Software Systems},
  author={Binamungu, Leonard Peter and Phiri, Danford Ephrahim and Simba, Fatuma},
  year         = {0},
  journal={Available at SSRN 4040641}
}

@article{glasmanaging,
  title={Managing Technical Debt in XP Teams},
  year         = {0},
  author={Glas, Tilda and Hed{\'e}n, Filip}
}

@inproceedings{aversano2021technical,
  title={Technical Debt predictive model through Temporal Convolutional Network},
  author={Aversano, Lerina and Bernardi, Mario Luca and Cimitile, Marta and Iammarino, Martina},
  booktitle={2021 International Joint Conference on Neural Networks (IJCNN)},
  pages={1--8},
  year={2021},
  organization={IEEE}
}

@InProceedings{fontana2021evaluating,
  author       = {Fontana, Francesca Arcelli and Pigazzini, Ilaria},
  booktitle    = {2021 IEEE/ACM 3rd International Workshop on Software Engineering Research and Practices for the IoT (SERP4IoT)},
  title        = {Evaluating the Architectural Debt of IoT Projects},
  year         = {2021},
  organization = {IEEE},
  pages        = {27--31},
  abstract     = {We observed a great and increasing interest in the last few years towards the evaluation of technical debt of software projects, in particular in the direction of code and architectural debt evaluation. This kind of analysis has not yet been performed for IoT projects. Hence, in this paper we start this exploration through the analysis of four Open Source IoT projects. We focus our attention on architectural debt and we exploit a tool, called Arcan, developed for architectural smell detection and for the computation of an architectural debt index. The results show that also IoT projects are subjected to architectural debt, and in particular to the presence of Cyclic Dependency and Unstable Dependency smells. However, there is evidence that the continuous refactoring of the code helps in avoiding the increase of debt, hence also developers of IoT projects should schedule periodical clean-ups of their code.},
}

@article{al2021towards,
  title={Towards a comprehensive self-admitted technical debt extraction technique from source code comments},
  author={Al-Slais, Yaqoob Salman},
  year={2021},
  publisher={IET}
}

@Article{guaman2021supporting,
  author   = {Guam{\'a}n, Daniel and P{\'e}rez, Jennifer},
  title    = {Supporting Sustainability and Technical Debt-Driven Design Decisions in Software Architectures},
  year     = {2021},
  abstract = {Degraded software usually incurs higher energy consumption, therefore suboptimal decisions in software architectures may lead to higher technical debt and less sustainable software products. There are metrics and tools to calculate technical debt and energy consumption of software, but it is required to provide mechanisms to store their relationship and how they change depending on the design decisions. In addition, there are different models for calculating the same metric and different metrics to measure technical debt and power consumption, and software engineers require selecting the most suitable model and metric depending on the software product context. This work presents a metamodel called ARCMEL to provide the required base of knowledge for supporting green-aware design decisions and to flexibly configure and select metrics and their models. ARCMEL has been implemented as part of the ARCMEL SCAT tool. Its validation is also presented in terms of completeness and flexibility.},
}

@article{benidris2021technical,
  title={The Technical Debt Density Over Multiple Releases and the Refactoring Story},
  author={BenIdris, Mrwan and Ammar, Hany and Dzielski, Dale},
  journal={International Journal of Software Engineering and Knowledge Engineering},
  volume={31},
  number={01},
  pages={99--116},
  year={2021},
  publisher={World Scientific}
}

@inproceedings{freire2021experience,
  title={How Experience Impacts Practitioners' Perception of Causes and Effects of Technical Debt},
  author={Freire, S{\'a}vio and Rios, Nicolli and P{\'e}rez, Boris and Castellanos, Camilo and Correal, Dar{\'\i}o and Rama{\v{c}}, Robert and Mandi{\'c}, Vladimir and Tau{\v{s}}an, Neboj{\v{s}}a and L{\'o}pez, Gustavo and Pacheco, Alexia and others},
  booktitle={2021 IEEE/ACM 13th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE)},
  pages={21--30},
  year={2021},
  organization={IEEE}
}

% SAS, Darius, et al. On the relation between architectural smells and source code changes. Journal of %Software: Evolution and Process, 2022, 34.1: e2398.

@Article{sas2022relation,
  author    = {Sas, Darius and Avgeriou, Paris and Pigazzini, Ilaria and Arcelli Fontana, Francesca},
  journal   = {Journal of Software: Evolution and Process},
  title     = {On the relation between architectural smells and source code changes},
  year      = {2022},
  number    = {1},
  pages     = {e2398},
  volume    = {34},
  abstract  = {Although architectural smells are one of the most studied type of architectural technical debt, their impact on maintenance effort has not been thoroughly investigated. Studying this impact would help to understand how much technical debt interest is being paid due to the existence of architecture smells and how this interest can be calculated. This work is a first attempt to address this issue by investigating the relation between architecture smells and source code changes. Specifically, we study whether the frequency and size of changes are correlated with the presence of a selected set of architectural smells. We detect architectural smells using the Arcan tool, which detects architectural smells by building a dependency graph of the system analyzed and then looking for the typical structures of the architectural smells. The findings, based on a case study of 31 open-source Java systems, show that 87% of the analyzed commits present more changes in artifacts with at least one smell, and the likelihood of changing increases with the number of smells. Moreover, there is also evidence to confirm that change frequency increases after the introduction of a smell and that the size of changes is also larger in smelly artifacts. These findings hold true especially in Medium–Large and Large artifacts.},
  publisher = {Wiley Online Library},
}

% The temporality of technical debt introduction on new code and confounding factors
@article{digkas2021temporality,
  title={The temporality of technical debt introduction on new code and confounding factors},
  author={Digkas, George and Ampatzoglou, Apostolos and Chatzigeorgiou, Alexander and Avgeriou, Paris},
  journal={Software Quality Journal},
  pages={1--23},
  year={2021},
  publisher={Springer}
}

% Exploring the Tensions Between Management of Architectural Debt and Digital Innovation: The Case of a Financial Organization

@InProceedings{rolland2021exploring,
  author    = {Rolland, Knut-H and Lyytinen, Kalle},
  booktitle = {Proceedings of the 54th Hawaii International Conference on System Sciences},
  title     = {Exploring the Tensions Between Management of Architectural Debt and Digital Innovation: The Case of a Financial Organization},
  year      = {2021},
  pages     = {6722},
  abstract  = {The metaphor Technical Debt describes the consequences of taking shortcuts
in the software development process for short-term benefit, at the expense of
higher maintenance in the future. Every large software system contains Technical
Debt in some way or another, the dicult question is to know when, where, and
how to repay the debt.
To answer this we conducted three main steps. A literature study on how
to identify, measure, and manage Technical Debt (i), interviews (ii), and finding
key software metrics based on the Goal-Question-Metric paradigm to build a
Technical Debt Model with a visualisation dashboard (iii). This was used for
a case study at an organisation where files from two projects were analysed and
the model was evaluated by comparing the results with opinions from developers
who created the system.
The final model used 8 metrics as input and had a total success rate of 80%
when comparing the model’s ranking with mutual opinion of the developers.
The dashboard was seen to be a useful tool for discussion and a quick way
to identify areas in the code with Technical Debt. It was also discovered that
measuring Technical Debt with only software metrics is a hard to impossible task,
and many sources of information must be used in conjunction. To circumvent
this, an implementation model for the organisation using several information
channels together with the dashboard was created},
}

% Multiclass Classification for Self-Admitted Technical Debt Based on XGBoost
@article{chen2021multiclass,
  title={Multiclass Classification for Self-Admitted Technical Debt Based on XGBoost},
  author={Chen, Xin and Yu, Dongjin and Fan, Xulin and Wang, Lin and Chen, Jie},
  journal={IEEE Transactions on Reliability},
  year={2021},
  publisher={IEEE}
}

% Preventing Technical Debt by Technical Debt Aware Project Management
@inproceedings{wiese2021preventing,
  title={Preventing Technical Debt by Technical Debt Aware Project Management},
  author={Wiese, Marion and Riebisch, Matthias and Schwarze, Julian},
  booktitle={2021 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  pages={84--93},
  year={2021},
  organization={IEEE}
}

%  Identification of Technical Debt in Code using Software Metrics
@article{schillstromidentification,
  title={Identification of Technical Debt in Code using Software Metrics},
  year={0},
  author={Schillstr{\"o}m, Erica and Wahlin, Dan}
}

% How to get away with technical debt: An explorative multiple-case study on autonomous teams and technical debt management
@mastersthesis{skeimo2021get,
  title={How to get away with technical debt: An explorative multiple-case study on autonomous teams and technical debt management},
  author={Skeimo, Karl Omar},
  year={2021}
}

% Technical Debt Guild: When experience and engagement improve Technical Debt Management
@inproceedings{detofeno2021technical,
  title={Technical Debt Guild: When experience and engagement improve Technical Debt Management},
  author={Detofeno, Thober and Reinehr, Sheila and Andreia, Malucelli},
  booktitle={XX Brazilian Symposium on Software Quality},
  pages={1--10},
  year={2021}
}

% How do technical debt payment practices relate to the effects of the presence of debt items in software projects?
@inproceedings{freire2021technical,
  title={How do technical debt payment practices relate to the effects of the presence of debt items in software projects?},
  author={Freire, S{\'a}vio and Rios, Nicolli and P{\'e}rez, Boris and Torres, Dar{\'\i}o and Mendon{\c{c}}a, Manoel and Izurieta, Clemente and Seaman, Carolyn and Sp{\'\i}nola, Rodrigo},
  booktitle={2021 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)},
  pages={605--609},
  year={2021},
  organization={IEEE}
}

% Technical Debt Impacting Lead-Times: An Exploratory Study (muito bom)

@InProceedings{lenarduzzi2021technical,
  author       = {Lenarduzzi, Valentina and Martini, Antonio and Saarim{\"a}ki, Nyyti and Tamburri, Damian Andrew},
  booktitle    = {2021 47th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
  title        = {Technical Debt Impacting Lead-Times: An Exploratory Study},
  year         = {2021},
  organization = {IEEE},
  pages        = {188--195},
  abstract     = {Background: Technical Debt is a consolidated notion in software engineering research and practice. However, the estimation of its impact (interest of the debt) is still imprecise and requires heavy empirical and experimental inquiry. Objective: We aim at developing a data-driven approach to calculate the interest of Technical Debt in terms of delays in resolving affected tasks.Method: We conducted a case study to estimate the Technical Debt interest by analyzing its association with the lead time variation of resolving related Jira issues.Results: Data-driven approaches could significantly change the Technical Debt estimation and improve the removing Technical Debt prioritization. Our case study shows that the presence of Code Technical Debt did not affect the lead time for resolving the issues.Conclusion: Future works include the further refinement of this approach and its application to a larger data-set and on different type of issues.},
}

% Worst smells and their worst reasons
@inproceedings{falessi2021worst,
  title={Worst smells and their worst reasons},
  author={Falessi, Davide and Kazman, Rick},
  booktitle={2021 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  pages={45--54},
  year={2021},
  organization={IEEE}
}

% Systematically reviewing the layered architectural pattern principles and their use to reconstruct software architectures
@article{belle2021systematically,
  title={Systematically reviewing the layered architectural pattern principles and their use to reconstruct software architectures},
  author={Belle, Alvine B and Boussaidi, Ghizlane El and Lethbridge, Timothy C and Kpodjedo, Segla and Mili, Hafedh and Paz, Andres},
  journal={arXiv preprint arXiv:2112.01644},
  year={2021}
}

% CONCEPTUALISATION OF USING TECHNICAL DEBT TO MEASURE THE INNOVATION LEVEL OF NEW PRODUCT–SELECTED ISSUES
@article{pawel2021conceptualisation,
  title={Conceptualisation of using technical debt to measure the innovation level of new product--selected issues},
  author={Pawe{\l}, Filipowicz},
  journal={Zeszyty Naukowe. Organizacja i Zarz{\k{a}}dzanie/Politechnika {\'S}l{\k{a}}ska},
  year={2021}
}

% Identification and Measurement of Technical Debt Requirements in Software Development: a Systematic Literature Review
@article{melo2021identification,
  title={Identification and Measurement of Technical Debt Requirements in Software Development: a Systematic Literature Review},
  author={Melo, Ana and Fagundes, Roberta and Lenarduzzi, Valentina and Santos, Wylliams},
  journal={arXiv preprint arXiv:2105.14232},
  year={2021}
}

% Detecting the Locations and Predicting the Costs of Compound Architectural Debts (muito bom)

@Article{xiao2021detecting,
  author    = {Xiao, Lu and Cai, Yuanfang and Kazman, Rick and Mo, Ran and Feng, Qiong},
  journal   = {IEEE Transactions on Software Engineering},
  title     = {Detecting the Locations and Predicting the Costs of Compound Architectural Debts},
  year      = {2021},
  abstract  = {Architectural Technical Debt (ATD) refers to sub-optimal architectural design in a software system that incurs high maintenance ``interest" over time. Previous research revealed that ATD has significant negative impact on daily development. This paper contributes an approach to enable an architect to precisely locate ATDs, as well as capture the trajectory of maintenance cost on each debt, based on which, predict the cost of the debt in a future release. The ATDs are expressed in four typical patterns, which entail the core of each debt. Furthermore, we aggregate compound ATDs to capture the complicated relationship among multiple ATD instances, which should be examined together for effective refactoring solutions. We evaluate our approach on 18 real-world projects. We identified ATDs that persistently incur significant (up to 95% of) maintenance costs in most projects. The maintenance costs on the majority of debts fit into a linear regression model---indicating stable ``interest" rate. In five projects, 12.1% to 27.6% of debts fit into an exponential model, indicating increasing ``interest" rate, which deserve higher priority from architects. The regression models can accurately predict the costs of the majority of (82% to 100%) debts in the next release of a system. By aggregating related ATDs, architects can focus on a small number of cost-effective compound debts, which contain a relatively small number of source files, but account for a large portion of maintenance costs in their projects. With these capabilities, our approach can help architects make informed decisions regarding whether, where, and how to refactor for eliminating ATDs in their systems.},
  publisher = {IEEE},
}

% DebtFree: Minimizing Labeling Cost in Self-Admitted Technical Debt Identification using Semi-Supervised Learning
@article{tu2022debtfree,
  title={DebtFree: Minimizing Labeling Cost in Self-Admitted Technical Debt Identification using Semi-Supervised Learning},
  author={Tu, Huy and Menzies, Tim},
  journal={arXiv preprint arXiv:2201.10592},
  year={2022}
}

% Asset management taxonomy: A roadmap
@article{zabardast2021asset,
  title={Asset management taxonomy: A roadmap},
  author={Zabardast, Ehsan and Gonzalez-Huerta, Javier and Gorschek, Tony and {\v{S}}mite, Darja and Al{\'e}groth, Emil and Fagerholm, Fabian},
  journal={arXiv preprint arXiv:2102.09884},
  year={2021}
}
{chaniotaki2021architecture,
  author       = {Chaniotaki, Alexandra-Maria and Sharma, Tushar},
  booktitle    = {2021 IEEE/ACM 18th International Conference on Mining Software Repositories (MSR)},
  title        = {Architecture smells and Pareto principle: A preliminary empirical exploration},
  year         = {2021},
  organization = {IEEE},
  pages        = {190--194},
  abstract     = {Architecture smells represent violations of best practices recommended for software architecture that adversely impact various quality attributes of a software system. Though architecture quality is considered very important by the software engineering community, architecture refactoring, given involved high risk and effort, is often avoided by software development teams. In this paper, we empirically explore the properties of architecture smells in the context of the Pareto principle. We investigate the degree of adherence of architecture smell occurrences to the Pareto principle and explore the influence of other related factors i.e., programming language and size of the repositories. To this end, we analyzed 750 Java and 361 C} #  repositories containing more than 50 million lines of code to
  detect seven kinds of architecture smells. We found that approximately
  45% of the Java repositories follow the Pareto principle. Moreover,
  C #{ repositories show significantly higher adherence (66%) to the principle than the repositories written in Java. Our results indicate that the size of the repositories shows a low negative correlation with the Pareto categories. The results imply that software development teams can figure out a few vital components suffering from architecture smells by carrying out the Pareto analysis. It will allow them to optimize their efforts towards making their software architecture quality better},
}

% An Evolutionary Analysis of Software-Architecture Smells

@InProceedings{gnoyke2021evolutionary,
  author       = {Gnoyke, Philipp and Schulze, Sandro and Kr{\"u}ger, Jacob},
  booktitle    = {2021 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
  title        = {An Evolutionary Analysis of Software-Architecture Smells},
  year         = {2021},
  organization = {IEEE},
  pages        = {413--424},
  abstract     = {If software quality assurance is postponed or even abandoned for a software system, maintenance and evolution become harder or even impossible. One widely known symptom for the degradation of system quality are Architecture Smells (ASs), which violate fundamental principles of software design. In this paper, we present a study on the evolution of ASs as well as on how and when they foster system degradation. Thus, we provide valuable insights regarding what ASs are meaningful to assure system quality. To this end, we analyzed the evolution of three types of ASs in 14 open-source systems with a total of 485 versions. We adapted indicators used in previous studies to assess the severity of ASs (e.g., growth, lifetime), and relate ASs to technical debt as another established indicator. Our results indicate that 1) ASs remain mostly stable compared to the code size of a system, 2) certain types of ASs, such as cyclic dependencies, have a greater impact on system degradation, and 3) certain properties determine how much an AS contributes to software degradation. These findings are valuable for practitioners to identify and tackle system degeneration, as well as for researchers to scope new research on managing ASs and technical debt.},
}

% Modelling Industrial Technical Compromises in Production Systems with Causal Loop Diagrams
@article{dong2021modelling,
  title={Modelling Industrial Technical Compromises in Production Systems with Causal Loop Diagrams},
  author={Dong, Quang Huan and Vogel-Heuser, Birgit},
  journal={IFAC-PapersOnLine},
  volume={54},
  number={4},
  pages={212--219},
  year={2021},
  publisher={Elsevier}
}

% Challenges in Explaining Source Code Quality Assessment
@article{ludwigchallenges,
  title={Challenges in Explaining Source Code Quality Assessment},
  year={0},
  author={Ludwig, Jeremy and Cline, Devin}
}

%  A systematic mapping study on architectural smells detection

@Article{mumtaz2021systematic,
  author    = {Mumtaz, Haris and Singh, Paramvir and Blincoe, Kelly},
  journal   = {Journal of Systems and Software},
  title     = {A systematic mapping study on architectural smells detection},
  year      = {2021},
  pages     = {110885},
  volume    = {173},
  abstract  = {The recognition of the need for high-quality software architecture is evident from the increasing trend in investigating architectural smells. Detection of architectural smells is paramount because they can seep through to design and implementation stages if left unidentified. Many architectural smells detection techniques and tools are proposed in the literature. The diversity in the detection techniques and tools suggests the need for their collective analysis to identify interesting aspects for practice and open research areas. To fulfill this, in this paper, we unify the knowledge about the detection of architectural smells through a systematic mapping study. We report on the existing detection techniques and tools for architectural smells to identify their limitations. We find there has been limited investigation of some architectural smells (e.g., micro-service smells); many architectural smells are not detected by tools yet; and there are limited empirical validations of techniques and tools. Based on our findings, we suggest several open research problems, including the need to (1) investigate undetected architectural smells (e.g., Java package smells), (2) improve the coverage of architectural smell detection across architecture styles (e.g., service-oriented and cloud), and (3) perform empirical validations of techniques and tools in industry across different languages and project domains.},
  publisher = {Elsevier},
}

% Is knowledge the key? An experiment on debiasing architectural decision-making-a pilot study
@inproceedings{borowa2021knowledge,
  title={Is knowledge the key? An experiment on debiasing architectural decision-making-a pilot study},
  author={Borowa, Klara and Dwornik, Robert and Zalewski, Andrzej},
  booktitle={International Conference on Product-Focused Software Process Improvement},
  pages={207--214},
  year={2021},
  organization={Springer}
}

% Exploiting gated graph neural network for detecting and explaining self-admitted technical debts
@article{yu2022exploiting,
  title={Exploiting gated graph neural network for detecting and explaining self-admitted technical debts},
  author={Yu, Jiaojiao and Zhao, Kunsong and Liu, Jin and Liu, Xiao and Xu, Zhou and Wang, Xin},
  journal={Journal of Systems and Software},
  pages={111219},
  year={2022},
  publisher={Elsevier}
}

% Understanding architecture erosion: The practitioners' perceptive
@inproceedings{li2021understanding,
  title={Understanding architecture erosion: The practitioners’ perceptive},
  author={Li, Ruiyin and Liang, Peng and Soliman, Mohamed and Avgeriou, Paris},
  booktitle={2021 IEEE/ACM 29th International Conference on Program Comprehension (ICPC)},
  pages={311--322},
  year={2021},
  organization={IEEE}
}

% The Impact of Human Factors on Software Sustainability
@incollection{imran2021impact,
  title={The Impact of Human Factors on Software Sustainability},
  author={Imran, Asif and Kosar, Tevfik},
  booktitle={Software Sustainability},
  pages={287--300},
  year={2021},
  publisher={Springer}
}

% Exploring the relation between co-changes and architectural smells (muito bom)
@article{sas2021exploring,
  title={Exploring the relation between co-changes and architectural smells},
  author={Sas, Darius and Avgeriou, Paris and Kruizinga, Ronald and Scheedler, Ruben},
  journal={SN Computer Science},
  volume={2},
  number={1},
  pages={1--15},
  year={2021},
  publisher={Springer}
}

% Legacy Digital Transformation: TCO and ROI Analysis
@article{kiran2021legacy,
  title={Legacy Digital Transformation: TCO and ROI Analysis},
  author={Kiran Mallidi, Ravi and Sharma, Manmohan and Singh, Jagjit},
  journal={International journal of electrical and computer engineering systems},
  volume={12},
  number={3},
  pages={163--170},
  year={2021},
  publisher={Elektrotehni{\v{c}}ki fakultet Sveu{\v{c}}ili{\v{s}}ta JJ Strossmayera u Osijeku}
}

% Characterizing the architectural erosion metrics: A systematic mapping study
@article{baabad2022characterizing,
  title={Characterizing the architectural erosion metrics: A systematic mapping study},
  author={Baabad, Ahmed and Zulzalil, Hazura Binti and Baharom, Salmi Binti and others},
  journal={IEEE Access},
  year={2022},
  publisher={IEEE}
}

% Automatic Detection and Analysis of Technical Debts in Peer-Review Documentation of R Packages
@article{khan2022automatic,
  title={Automatic Detection and Analysis of Technical Debts in Peer-Review Documentation of R Packages},
  author={Khan, Junaed Younus and Uddin, Gias},
  journal={arXiv preprint arXiv:2201.04241},
  year={2022}
}

% Qualities of Quality: A Tertiary Review of Software Quality Measurement Research
@article{champion2021qualities,
  title={Qualities of Quality: A Tertiary Review of Software Quality Measurement Research},
  author={Champion, Kaylea and Khatri, Sejal and Hill, Benjamin Mako},
  journal={arXiv preprint arXiv:2107.13687},
  year={2021}
}

% Importance of software architectures in mobile projects
@inproceedings{dobrean2021importance,
  title={Importance of software architectures in mobile projects},
  author={Dobrean, Drago{\c{s}} and Dio{\c{s}}an, Laura},
  booktitle={2021 IEEE 15th International Symposium on Applied Computational Intelligence and Informatics (SACI)},
  pages={000281--000286},
  year={2021},
  organization={IEEE}
}

% Understanding software architecture erosion: A systematic mapping study
@article{li2022understanding,
  title={Understanding software architecture erosion: A systematic mapping study},
  author={Li, Ruiyin and Liang, Peng and Soliman, Mohamed and Avgeriou, Paris},
  journal={Journal of Software: Evolution and Process},
  volume={34},
  number={3},
  pages={e2423},
  year={2022},
  publisher={Wiley Online Library}
}

% On the evolution and impact of Architectural Smells--An industrial case study
@article{sas2022evolution,
  title={On the evolution and impact of Architectural Smells--An industrial case study},
  author={Sas, Darius and Avgeriou, Paris and Uyumaz, Umut},
  journal={arXiv preprint arXiv:2203.08702},
  year={2022}
}

% A method for monitoring the coupling evolution of microservice-based architectures
@article{apolinario2021method,
  title={A method for monitoring the coupling evolution of microservice-based architectures},
  author={Apolin{\'a}rio, Daniel RF and de Fran{\c{c}}a, Breno BN},
  journal={Journal of the Brazilian Computer Society},
  volume={27},
  number={1},
  pages={1--35},
  year={2021},
  publisher={Springer}
}

% A study on correlations between architectural smells and design patterns
@article{pigazzini2021study,
  title={A study on correlations between architectural smells and design patterns},
  author={Pigazzini, Ilaria and Fontana, Francesca Arcelli and Walter, Bartosz},
  journal={Journal of Systems and Software},
  volume={178},
  pages={110984},
  year={2021},
  publisher={Elsevier}
}

% On Microservice Analysis and Architecture Evolution: A Systematic Mapping Study
@article{bushong2021microservice,
  title={On Microservice Analysis and Architecture Evolution: A Systematic Mapping Study},
  author={Bushong, Vincent and Abdelfattah, Amr S and Maruf, Abdullah A and Das, Dipta and Lehman, Austin and Jaroszewski, Eric and Coffey, Michael and Cerny, Tomas and Frajtak, Karel and Tisnovsky, Pavel and others},
  journal={Applied Sciences},
  volume={11},
  number={17},
  pages={7856},
  year={2021},
  publisher={Multidisciplinary Digital Publishing Institute}
}

% Software Design and Artificial Intelligence: A Systematic Mapping Study
@inproceedings{robles2021software,
  title={Software Design and Artificial Intelligence: A Systematic Mapping Study},
  author={Robles-Aguilar, Alfonso and Ochar{\'a}n-Hern{\'a}ndez, Jorge Octavio and S{\'a}nchez-Garc{\'\i}a, {\'A}ngel J and Lim{\'o}n, Xavier},
  booktitle={2021 9th International Conference in Software Engineering Research and Innovation (CONISOFT)},
  pages={132--141},
  year={2021},
  organization={IEEE}
}

% The Existence and Co-Modifications of Code Clones within or across Microservices
@inproceedings{mo2021existence,
  title={The Existence and Co-Modifications of Code Clones within or across Microservices},
  author={Mo, Ran and Zhao, Yang and Feng, Qiong and Li, Zengyang},
  booktitle={Proceedings of the 15th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
  pages={1--11},
  year={2021}
}

%  REMEDY: ARCHITECTURAL CONFORMANCE CHECKING FOR ADAPTIVE SYSTEMS
@article{santibanez2021remedy,
  title={REMEDY: ARCHITECTURAL CONFORMANCE CHECKING FOR ADAPTIVE SYSTEMS},
  author={SANTIB{\'A}{\~N}EZ, DANIEL GUSTAVO SAN MART{\'I}N},
  year={2021}
}

% BARRIERS AND ENABLERS OF DIGITAL TRANSFORMATION: AN EXPLORATORY ANALYSIS OF DIGITAL DEBT AND DEVOPS
@article{oliveira2022barriers,
  title={BARRIERS AND ENABLERS OF DIGITAL TRANSFORMATION: AN EXPLORATORY ANALYSIS OF DIGITAL DEBT AND DEVOPS},
  author={Oliveira, Thiago Carlos de Sousa},
  year={2022}
}

% On the practitioners' understanding of coupling smells—A grey literature based Grounded-Theory study
@article{singjai2021practitioners,
  title={On the practitioners’ understanding of coupling smells—A grey literature based Grounded-Theory study},
  author={Singjai, Apitchaka and Simhandl, Georg and Zdun, Uwe},
  journal={Information and Software Technology},
  volume={134},
  pages={106539},
  year={2021},
  publisher={Elsevier}
}

% Agile elicitation of scalability requirements for open systems: A case study
@article{brataas2021agile,
  title={Agile elicitation of scalability requirements for open systems: A case study},
  author={Brataas, Gunnar and Martini, Antonio and Hanssen, Geir Kjetil and R{\ae}der, Georg},
  journal={Journal of Systems and Software},
  volume={182},
  pages={111064},
  year={2021},
  publisher={Elsevier}
}

% DepMiner: A Pipelineable Tool for Mining of Intra-Project Dependencies
@article{repinskiy2021depminer,
  title={DepMiner: A Pipelineable Tool for Mining of Intra-Project Dependencies},
  author={Repinskiy, Vladislav and Kovalenko, Vladimir},
  journal={arXiv preprint arXiv:2104.09473},
  year={2021}
}

% Mining energy-related practices in robotics software
@inproceedings{albonico2021mining,
  title={Mining energy-related practices in robotics software},
  author={Albonico, Michel and Malavolta, Ivano and Pinto, Gustavo and Guzman, Emitza and Chinnappan, Katerina and Lago, Patricia},
  booktitle={2021 IEEE/ACM 18th International Conference on Mining Software Repositories (MSR)},
  pages={483--494},
  year={2021},
  organization={IEEE}
}

% Relationships between software architecture and source code in practice: An exploratory survey and interview
@article{tian2022relationships,
  title={Relationships between software architecture and source code in practice: An exploratory survey and interview},
  author={Tian, Fangchao and Liang, Peng and Babar, Muhammad Ali},
  journal={Information and Software Technology},
  volume={141},
  pages={106705},
  year={2022},
  publisher={Elsevier}
}

% Multi-Programming-Language Commits in OSS: An Empirical Study on Apache Projects
@inproceedings{li2021multi,
  title={Multi-Programming-Language Commits in OSS: An Empirical Study on Apache Projects},
  author={Li, Zengyang and Qi, Xiaoxiao and Yu, Qinyi and Liang, Peng and Mo, Ran and Yang, Chen},
  booktitle={2021 IEEE/ACM 29th International Conference on Program Comprehension (ICPC)},
  pages={219--229},
  year={2021},
  organization={IEEE}
}

% Understanding Social Debt in Software Engineering
@phdthesis{caballero2021understanding,
  title={Understanding Social Debt in Software Engineering},
  author={Caballero Espinosa, Eduardo Anel},
  year={2021},
  school={University of Alabama Libraries}
}

% Architecture Style Selection using Statistics of Quality Attributes to Reduce Production Costs
@article{marzooni2021architecture,
  title={Architecture Style Selection using Statistics of Quality Attributes to Reduce Production Costs},
  author={Marzooni, Hamidreza Hasannejad and Motameni, Homayun and Ebrahimnejad, Ali},
  journal={INTERNATIONAL ARAB JOURNAL OF INFORMATION TECHNOLOGY},
  volume={18},
  number={4},
  pages={513--522},
  year={2021},
  publisher={ZARKA PRIVATE UNIV COLL COMPUTING \& INFORMATION SOC, PO BOX 132222, ZARQA~…}
}

% A Survey of Software Architectural Change Detection and Categorization Techniques
@article{mondal4021915survey,
  title={A Survey of Software Architectural Change Detection and Categorization Techniques},
  author={Mondal, Amit Kumar and Schneider, Kevin A and Roy, Banani and Roy, Chanchal K},
  year={0},
  journal={Available at SSRN 4021915}
}

% Identifying Domain-Based Cyclic Dependencies in Microservice APIs Using Source Code Detectors
@inproceedings{genfer2021identifying,
  title={Identifying Domain-Based Cyclic Dependencies in Microservice APIs Using Source Code Detectors},
  author={Genfer, Patric and Zdun, Uwe},
  booktitle={European Conference on Software Architecture},
  pages={207--222},
  year={2021},
  organization={Springer}
}

% Code Smells and Refactoring: A Tertiary Systematic Review of Challenges and Observations
@article{pimentacode,
  title={Code Smells and Refactoring: A Tertiary Systematic Review of Challenges and Observations},
  year={0},
  author={PImenta, Marcelo Soares and Lacerda, Guilherme}
}

% Architecture violations detection and visualization in the continuous integration pipeline
@article{mendoza2021architecture,
  title={Architecture violations detection and visualization in the continuous integration pipeline},
  author={Mendoza, Camilo and Bocanegra, Jos{\'e} and Garc{\'e}s, Kelly and Casallas, Rubby},
  journal={Software: Practice and Experience},
  volume={51},
  number={8},
  pages={1822--1845},
  year={2021},
  publisher={Wiley Online Library}
}

% A Qualitative Inquiry into the Benefits of Microservice Technological Agnosticism on Small Development Teams
@phdthesis{snyder2021qualitative,
  title={A Qualitative Inquiry into the Benefits of Microservice Technological Agnosticism on Small Development Teams},
  author={Snyder, Patrick R},
  year={2021},
  school={Colorado Technical University}
}

% One Step Further: Investigating Problematic Files of Architecture Anti-patterns
@inproceedings{liu2021one,
  title={One Step Further: Investigating Problematic Files of Architecture Anti-patterns},
  author={Liu, Jingwen and Jin, Wuxia and Feng, Qiong and Zhang, Xinyu and Dai, Yitong},
  booktitle={2021 IEEE 32nd International Symposium on Software Reliability Engineering (ISSRE)},
  pages={522--533},
  year={2021},
  organization={IEEE}
}

% Exploring architectural knowledge on microservice architecture
@phdthesis{baskaran2021exploring,
  title={Exploring architectural knowledge on microservice architecture},
  author={Baskaran, Siddharth},
  year={2021}
}

% SEMANTIC REVIEW ON SOFTWARE ARCHITECTURES FOR WEB-BASED APPLICATIONS
@article{mallidi2021semantic,
  title={SEMANTIC REVIEW ON SOFTWARE ARCHITECTURES FOR WEB-BASED APPLICATIONS},
  author={Mallidi, Ravi Kiran and Sharma, Manmohan and Vangala, Sreenivas Rao},
  year={2021}
}

% Quality assessment in systematic literature reviews: a software engineering perspective
@article{yang2021quality,
  title={Quality assessment in systematic literature reviews: a software engineering perspective},
  author={Yang, Lanxin and Zhang, He and Shen, Haifeng and Huang, Xin and Zhou, Xin and Rong, Guoping and Shao, Dong},
  journal={Information and Software Technology},
  volume={130},
  pages={106397},
  year={2021},
  publisher={Elsevier}
}

% A Marketplace for Industrial Case Studies in Software Engineering
@techreport{borowa2021marketplace,
  title={A Marketplace for Industrial Case Studies in Software Engineering},
  author={Borowa, Klara and Wiese, Marion and Tamzalit, Dalila and Allen, Claudine and Singjai, Apitchaka},
  year={2021},
  institution={The Institute of Control and Computation Engineering}
}

% Grey literature in software engineering: A critical review
@article{kamei2021grey,
  title={Grey literature in software engineering: A critical review},
  author={Kamei, Fernando and Wiese, Igor and Lima, Crescencio and Polato, Ivanilton and Nepomuceno, Vilmar and Ferreira, Waldemar and Ribeiro, M{\'a}rcio and Pena, Carolline and Cartaxo, Bruno and Pinto, Gustavo and others},
  journal={Information and Software Technology},
  volume={138},
  pages={106609},
  year={2021},
  publisher={Elsevier}
}

% Software product quality metrics: A systematic mapping study
@article{colakoglu2021software,
  title={Software product quality metrics: A systematic mapping study},
  author={Colakoglu, Fatima Nur and Yazici, Ali and Mishra, Alok},
  journal={IEEE Access},
  year={2021},
  publisher={IEEE}
}

% Theoretical framework to address the challenges in Microservice Architecture
@inproceedings{premarathna2021theoretical,
  title={Theoretical framework to address the challenges in Microservice Architecture},
  author={Premarathna, Dewmini and Pathirana, Asanka},
  booktitle={2021 International Research Conference on Smart Computing and Systems Engineering (SCSE)},
  volume={4},
  pages={195--202},
  year={2021},
  organization={IEEE}
}

% Refactoring Techniques for Improving Software Quality: Practitioners' Perspectives
@article{almogahed2021refactoring,
  title={Refactoring Techniques for Improving Software Quality: Practitioners’ Perspectives},
  author={Almogahed, Abdullah and Omar, Mazni},
  journal={Journal of Information and Communication Technology},
  volume={20},
  number={4},
  pages={511--539},
  year={2021}
}

% A triple bottom-line typology of technical debt: Supporting decision-making in cross-functional teams
@article{greville2022triple,
  title={A triple bottom-line typology of technical debt: Supporting decision-making in cross-functional teams},
  author={Greville, Mark and O'Raghallaigh, Paidi and McCarthy, Stephen},
  year={2022},
  publisher={University of Hawai'i at Manoa}
}

@Comment{jabref-meta: databaseType:bibtex;}

% eng mergepatdsp.bib

% sps.bib

@inproceedings{perez2019proposed,
  title={A proposed model-driven approach to manage architectural technical debt life cycle},
  author={P{\'e}rez, Boris and Correal, Dar{\'\i}o and Astudillo, Hern{\'a}n},
  booktitle={2019 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  pages={73--77},
  year={2019},
  organization={IEEE}
}

@article{martini2018semi,
  title={A semi-automated framework for the identification and estimation of architectural technical debt: A comparative case-study on the modularization of a software component},
  author={Martini, Antonio and Sikander, Erik and Madlani, Niel},
  journal={Information and Software Technology},
  volume={93},
  pages={264--279},
  year={2018},
  publisher={Elsevier}
}

@inproceedings{roveda2018towards,
  title={Towards an architectural debt index},
  author={Roveda, Riccardo and Fontana, Francesca Arcelli and Pigazzini, Ilaria and Zanoni, Marco},
  booktitle={2018 44th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
  pages={408--416},
  year={2018},
  organization={IEEE}
}

@inproceedings{snipes2018case,
  title={A Case Study of the Effects of Architecture Debt on Software Evolution Effort},
  author={Snipes, Will and Karlekar, Sunil and Mo, Ran},
  booktitle={2018 44th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
  pages={400--403},
  year={2018},
  organization={IEEE}
}

@inproceedings{nayebi2019longitudinal,
  title={A longitudinal study of identifying and paying down architecture debt},
  author={Nayebi, Maleknaz and Cai, Yuanfang and Kazman, Rick and Ruhe, Guenther and Feng, Qiong and Carlson, Chris and Chew, Francis},
  booktitle={2019 IEEE/ACM 41st International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP)},
  pages={171--180},
  year={2019},
  organization={IEEE}
}

@inproceedings{feng2019active,
  title={Active hotspot: an issue-oriented model to monitor software evolution and degradation},
  author={Feng, Qiong and Cai, Yuanfang and Kazman, Rick and Cui, Di and Liu, Ting and Fang, Hongzhou},
  booktitle={2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
  pages={986--997},
  year={2019},
  organization={IEEE}
}

@inproceedings{li2014empirical,
  title={An empirical investigation of modularity metrics for indicating architectural technical debt},
  author={Li, Zengyang and Liang, Peng and Avgeriou, Paris and Guelfi, Nicolas and Ampatzoglou, Apostolos},
  booktitle={Proceedings of the 10th international ACM Sigsoft conference on Quality of software architectures},
  pages={119--128},
  year={2014}
}

@inproceedings{martini2016empirically,
  title={An empirically developed method to aid decisions on architectural technical debt refactoring: AnaConDebt},
  author={Martini, Antonio and Bosch, Jan},
  booktitle={2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C)},
  pages={31--40},
  year={2016},
  organization={IEEE}
}

@inproceedings{xiao2016identifying,
  title={Identifying and quantifying architectural debt},
  author={Xiao, Lu and Cai, Yuanfang and Kazman, Rick and Mo, Ran and Feng, Qiong},
  booktitle={2016 IEEE/ACM 38th International Conference on Software Engineering (ICSE)},
  pages={488--498},
  year={2016},
  organization={IEEE}
}

@inproceedings{verdecchia2018identifying,
  title={Identifying architectural technical debt in android applications through automated compliance checking},
  author={Verdecchia, Roberto},
  booktitle={2018 IEEE/ACM 5th International Conference on Mobile Software Engineering and Systems (MOBILESoft)},
  pages={35--36},
  year={2018},
  organization={IEEE}
}

@inproceedings{von2019mitigating,
  title={Mitigating Technical and Architectural Debt with Sonargraph},
  author={von Zitzewitz, Alexander},
  booktitle={2019 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  pages={66--67},
  year={2019},
  organization={IEEE}
}

@article{martini2017interest,
  title={On the interest of architectural technical debt: Uncovering the contagious debt phenomenon},
  author={Martini, Antonio and Bosch, Jan},
  journal={Journal of Software: Evolution and Process},
  volume={29},
  number={10},
  pages={e1877},
  year={2017},
  publisher={Wiley Online Library}
}

@inproceedings{fontana2016tool,
  title={Tool support for evaluating architectural debt of an existing system: An experience report},
  author={Fontana, Francesca Arcelli and Roveda, Riccardo and Zanoni, Marco},
  booktitle={Proceedings of the 31st Annual ACM Symposium on Applied Computing},
  pages={1347--1349},
  year={2016}
}

@inproceedings{li2015architectural,
  title={Architectural technical debt identification based on architecture decisions and change scenarios},
  author={Li, Zengyang and Liang, Peng and Avgeriou, Paris},
  booktitle={2015 12th Working IEEE/IFIP Conference on Software Architecture},
  pages={65--74},
  year={2015},
  organization={IEEE}
}

@inproceedings{martini2014architecture,
  title={Architecture technical debt: Understanding causes and a qualitative model},
  author={Martini, Antonio and Bosch, Jan and Chaudron, Michel},
  booktitle={2014 40th EUROMICRO Conference on Software Engineering and Advanced Applications},
  pages={85--92},
  year={2014},
  organization={IEEE}
}

@inproceedings{martini2016estimating,
  title={Estimating and quantifying the benefits of refactoring to improve a component modularity: a case study},
  author={Martini, Antonio and Sikander, Erik and Medlani, Niel},
  booktitle={2016 42th Euromicro conference on software engineering and advanced applications (SEAA)},
  pages={92--99},
  year={2016},
  organization={IEEE}
}

@inproceedings{martini2018identifying,
  title={Identifying and prioritizing architectural debt through architectural smells: a case study in a large software company},
  author={Martini, Antonio and Fontana, Francesca Arcelli and Biaggi, Andrea and Roveda, Riccardo},
  booktitle={European Conference on Software Architecture},
  pages={320--335},
  year={2018},
  organization={Springer}
}

@inproceedings{cai2016software,
  title={Software architecture health monitor},
  author={Cai, Yuanfang and Kazman, Rick},
  booktitle={Proceedings of the 1st International Workshop on Bringing Architectural Design Thinking into Developers' Daily Activities},
  pages={18--21},
  year={2016}
}

@inproceedings{kazman2015case,
  title={A case study in locating the architectural roots of technical debt},
  author={Kazman, Rick and Cai, Yuanfang and Mo, Ran and Feng, Qiong and Xiao, Lu and Haziyev, Serge and Fedak, Volodymyr and Shapochka, Andriy},
  booktitle={2015 IEEE/ACM 37th IEEE International Conference on Software Engineering},
  volume={2},
  pages={179--188},
  year={2015},
  organization={IEEE}
}

@inproceedings{martini2015towards,
  title={Towards prioritizing architecture technical debt: information needs of architects and product owners},
  author={Martini, Antonio and Bosch, Jan},
  booktitle={2015 41St euromicro conference on software engineering and advanced applications},
  pages={422--429},
  year={2015},
  organization={IEEE}
}

@inproceedings{tommasel2019applying,
  title={Applying Social Network Analysis Techniques to Architectural Smell Prediction},
  author={Tommasel, Antonela},
  booktitle={2019 IEEE International Conference on Software Architecture Companion (ICSA-C)},
  pages={254--261},
  year={2019},
  organization={IEEE}
}

@inproceedings{nord2012search,
  title={In search of a metric for managing architectural technical debt},
  author={Nord, Robert L and Ozkaya, Ipek and Kruchten, Philippe and Gonzalez-Rojas, Marco},
  booktitle={2012 Joint Working IEEE/IFIP Conference on Software Architecture and European Conference on Software Architecture},
  pages={91--100},
  year={2012},
  organization={IEEE}
}

@inproceedings{cai2019dv8,
  title={DV8: automated architecture analysis tool suites},
  author={Cai, Yuanfang and Kazman, Rick},
  booktitle={2019 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  pages={53--54},
  year={2019},
  organization={IEEE}
}

@inproceedings{skiada2018exploring,
  title={Exploring the relationship between software modularity and technical debt},
  author={Skiada, Peggy and Ampatzoglou, Apostolos and Arvanitou, Elvira-Maria and Chatzigeorgiou, Alexander and Stamelos, Ioannis},
  booktitle={2018 44th Euromicro Conference on software engineering and advanced applications (SEAA)},
  pages={404--407},
  year={2018},
  organization={IEEE}
}

@inproceedings{eliasson2015identifying,
  title={Identifying and visualizing Architectural Debt and its efficiency interest in the automotive domain: A case study},
  author={Eliasson, Ulf and Martini, Antonio and Kaufmann, Robert and Odeh, Sam},
  booktitle={2015 IEEE 7th International Workshop on Managing Technical Debt (MTD)},
  pages={33--40},
  year={2015},
  organization={IEEE}
}

@inproceedings{fontana2016technical,
  title={Technical debt indexes provided by tools: a preliminary discussion},
  author={Fontana, Francesca Arcelli and Roveda, Riccardo and Zanoni, Marco},
  booktitle={2016 IEEE 8th International Workshop on Managing Technical Debt (MTD)},
  pages={28--31},
  year={2016},
  organization={IEEE}
}

@article{maccormack2016technical,
  title={Technical debt and system architecture: The impact of coupling on defect-related activity},
  author={MacCormack, Alan and Sturtevant, Daniel J},
  journal={Journal of Systems and Software},
  volume={120},
  pages={170--182},
  year={2016},
  publisher={Elsevier}
}

@inproceedings{sas2019investigating,
  title={Investigating instability architectural smells evolution: an exploratory case study},
  author={Sas, Darius and Avgeriou, Paris and Fontana, Francesca Arcelli},
  booktitle={2019 IEEE International Conference on software maintenance and evolution (ICSME)},
  pages={557--567},
  year={2019},
  organization={IEEE}
}

@inproceedings{fontana2019pagerank,
  title={Pagerank and criticality of architectural smells},
  author={Fontana, Francesca Arcelli and Pigazzini, Ilaria and Raibulet, Claudia and Basciano, Stefano and Roveda, Riccardo},
  booktitle={Proceedings of the 13th European Conference on Software Architecture-Volume 2},
  pages={197--204},
  year={2019}
}

@article{spinellis2019evolution,
  title={Evolution of the Unix system architecture: an exploratory case study},
  author={Spinellis, Diomidis and Avgeriou, Paris C},
  journal={IEEE Transactions on Software Engineering},
  year={2019},
  publisher={IEEE}
}

@inproceedings{izurieta2018position,
  title={A position study to investigate technical debt associated with security weaknesses},
  author={Izurieta, Clemente and Kimball, Kali and Rice, David and Valentien, Tessa},
  booktitle={2018 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  pages={138--142},
  year={2018},
  organization={IEEE}
}

@inproceedings{besker2017pricey,
  title={The pricey bill of technical debt: When and by whom will it be paid?},
  author={Besker, Terese and Martini, Antonio and Bosch, Jan},
  booktitle={2017 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
  pages={13--23},
  year={2017},
  organization={IEEE}
}

@inproceedings{ampatzoglou2016perception,
  title={The perception of technical debt in the embedded systems domain: an industrial case study},
  author={Ampatzoglou, Areti and Ampatzoglou, Apostolos and Chatzigeorgiou, Alexander and Avgeriou, Paris and Abrahamsson, Pekka and Martini, Antonio and Zdun, Uwe and Systa, Kari},
  booktitle={2016 IEEE 8th International Workshop on Managing Technical Debt (MTD)},
  pages={9--16},
  year={2016},
  organization={IEEE}
}

@inproceedings{martini2016introduction,
  title={The introduction of technical debt tracking in large companies},
  author={Martini, Antonio and Besker, Terese and Bosch, Jan},
  booktitle={2016 23rd Asia-Pacific Software Engineering Conference (APSEC)},
  pages={161--168},
  year={2016},
  organization={IEEE}
}

@inproceedings{aaramaa2017requirements,
  title={Requirements volatility in software architecture design: an exploratory case study},
  author={Aaramaa, Sanja and Dasanayake, Sandun and Oivo, Markku and Markkula, Jouni and Saukkonen, Samuli},
  booktitle={Proceedings of the 2017 International Conference on Software and System Process},
  pages={40--49},
  year={2017}
}

@article{martini2015investigating,
  title={Investigating Architectural Technical Debt accumulation and refactoring over time: A multiple-case study},
  author={Martini, Antonio and Bosch, Jan and Chaudron, Michel},
  journal={Information and Software Technology},
  volume={67},
  pages={237--253},
  year={2015},
  publisher={Elsevier}
}

@article{cai2018design,
  title={Design rule spaces: A new model for representing and analyzing software architecture},
  author={Cai, Yuanfang and Xiao, Lu and Kazman, Rick and Mo, Ran and Feng, Qiong},
  journal={IEEE Transactions on Software Engineering},
  volume={45},
  number={7},
  pages={657--682},
  year={2018},
  publisher={IEEE}
}

@inproceedings{bogner2019assuring,
  title={Assuring the evolvability of microservices: insights into industry practices and challenges},
  author={Bogner, Justus and Fritzsch, Jonas and Wagner, Stefan and Zimmermann, Alfred},
  booktitle={2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
  pages={546--556},
  year={2019},
  organization={IEEE}
}

@inproceedings{ludwig2017compiling,
  title={Compiling static software metrics for reliability and maintainability from GitHub repositories},
  author={Ludwig, Jeremy and Xu, Steven and Webber, Frederick},
  booktitle={2017 IEEE International Conference on Systems, Man, and Cybernetics (SMC)},
  pages={5--9},
  year={2017},
  organization={IEEE}
}

@article{curtis2012estimating,
  title={Estimating the principal of an application's technical debt},
  author={Curtis, Bill and Sappidi, Jay and Szynkarski, Alexandra},
  journal={IEEE software},
  volume={29},
  number={6},
  pages={34--42},
  year={2012},
  publisher={IEEE}
}

@incollection{kumar2018exploring,
  title={Exploring multilateral Cloud computing security architectural design debt in terms of technical debt},
  author={Kumar, M Manoj and Nandakumar, AN},
  booktitle={Smart Computing and Informatics},
  pages={567--579},
  year={2018},
  publisher={Springer}
}

@inproceedings{hanssen2019identifying,
  title={Identifying scalability debt in open systems},
  author={Hanssen, Geir Kjetil and Brataas, Gunnar and Martini, Antonio},
  booktitle={2019 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  pages={48--52},
  year={2019},
  organization={IEEE}
}

@inproceedings{sierra2019self,
  title={Is self-admitted technical debt a good indicator of architectural divergences?},
  author={Sierra, Giancarlo and Tahmid, Ahmad and Shihab, Emad and Tsantalis, Nikolaos},
  booktitle={2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
  pages={534--543},
  year={2019},
  organization={IEEE}
}

@inproceedings{bogner2018limiting,
  title={Limiting technical debt with maintainability assurance: an industry survey on used techniques and differences with service-and microservice-based systems},
  author={Bogner, Justus and Fritzsch, Jonas and Wagner, Stefan and Zimmermann, Alfred},
  booktitle={Proceedings of the 2018 International Conference on Technical Debt},
  pages={125--133},
  year={2018}
}

@inproceedings{zalewski2017risk,
  title={Risk Appetite in Architectural Decision-Making},
  author={Zalewski, Andrzej},
  booktitle={2017 IEEE International Conference on Software Architecture Workshops (ICSAW)},
  pages={149--152},
  year={2017},
  organization={IEEE}
}

@article{tamburri2019software,
  title={Software architecture social debt: managing the incommunicability factor},
  author={Tamburri, Damian A},
  journal={IEEE Transactions on Computational Social Systems},
  volume={6},
  number={1},
  pages={20--37},
  year={2019},
  publisher={IEEE}
}

@inproceedings{verdecchia2020architectural,
  title={Architectural Technical Debt: A Grounded Theory},
  author={Verdecchia, Roberto and Kruchten, Philippe and Lago, Patricia},
  booktitle={European Conference on Software Architecture},
  pages={202--219},
  year={2020},
  organization={Springer}
}

@inproceedings{pujols2020skuld,
  title={Skuld: a self-learning tool for impact-driven technical debt management},
  author={Pujols, Josep Burgaya and Bas, Pieter and Mart{\'\i}nez-Fernandez, Silverio and Martini, Antonio and Trendowicz, Adam},
  booktitle={Proceedings of the 3rd International Conference on Technical Debt},
  pages={113--114},
  year={2020}
}

@inproceedings{molnar2020long,
  title={Long-Term Evaluation of Technical Debt in Open-Source Software},
  author={Molnar, Arthur-Jozsef and Motogna, Simona},
  booktitle={Proceedings of the 14th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
  pages={1--9},
  year={2020}
}

@inproceedings{janes2020towards,
  title={Towards an Approach to Identify Obsolete Features based on Importance and Technical Debt},
  author={Janes, Andrea and Lenarduzzi, Valentina},
  booktitle={2020 46th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
  pages={389--393},
  year={2020},
  organization={IEEE}
}

@inproceedings{maikantis2020software,
  title={Software Architecture Reconstruction via a Genetic Algorithm: Applying the Move Class Refactoring},
  author={Maikantis, Theodoros and Tsintzira, Angeliki-Agathi and Ampatzoglou, Apostolos and Arvanitou, Elvira-Maria and Chatzigeorgiou, Alexander and Stamelos, Ioannis and Bibi, Stamatia and Deligiannis, Ignatios},
  booktitle={24th Pan-Hellenic Conference on Informatics},
  pages={135--139},
  year={2020}
}

@inproceedings{san2020characterizing,
  title={Characterizing Architectural Drifts of Adaptive Systems},
  author={San Mart{\'\i}n, Daniel and Siqueira, Bento and de Camargo, Valter Vieira and Ferrari, Fabiano},
  booktitle={2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
  pages={389--399},
  year={2020},
  organization={IEEE}
}

@inproceedings{de2020improving,
  title={Improving agility by managing shared libraries in microservices},
  author={de Toledo, Saulo S and Martini, Antonio and Sj{\o}berg, Dag IK},
  booktitle={International Conference on Agile Software Development},
  pages={195--202},
  year={2020},
  organization={Springer}
}

@incollection{rademacher2020modeling,
  title={A modeling method for systematic architecture reconstruction of microservice-based software systems},
  author={Rademacher, Florian and Sachweh, Sabine and Z{\"u}ndorf, Albert},
  booktitle={Enterprise, Business-Process and Information Systems Modeling},
  pages={311--326},
  year={2020},
  publisher={Springer}
}

@article{larrucea2020managing,
  title={Managing security debt across PLC phases in a VSE context},
  author={Larrucea, Xabier and Santamaria, Izaskun and Fernandez-Gauna, Borja},
  journal={Journal of Software: Evolution and Process},
  volume={32},
  number={3},
  pages={e2214},
  year={2020},
  publisher={Wiley Online Library}
}

@article{raibulet2020preliminary,
  title={A preliminary analysis of self-adaptive systems according to different issues},
  author={Raibulet, Claudia and Fontana, Francesca Arcelli and Carettoni, Simone},
  journal={Software Quality Journal},
  pages={1--31},
  year={2020},
  publisher={Springer}
}

@article{sharma2020empirical,
  title={An empirical investigation on the relationship between design and architecture smells},
  author={Sharma, Tushar and Singh, Paramvir and Spinellis, Diomidis},
  journal={Empirical Software Engineering},
  volume={25},
  number={5},
  pages={4020--4068},
  year={2020},
  publisher={Springer}
}

% end sps.bib