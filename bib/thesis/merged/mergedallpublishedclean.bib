@inproceedings{martini2014architecture,
  title={Architecture technical debt: Understanding causes and a qualitative model},
  author={Martini, Antonio and Bosch, Jan and Chaudron, Michel},
  booktitle={2014 40th EUROMICRO Conference on Software Engineering and Advanced Applications},
  pages={85--92},
  year={2014},
  organization={IEEE}
}

@mastersthesis{kaufmann2015addressing,
  title={Addressing efficiency interest in architectural technical debt-A measurement and visualization approach for embedded software},
  author={Kaufmann, Robert and Odeh, Sam},
  year={2015}
}

@article{martini2015investigating,
  title={Investigating architectural technical debt accumulation and refactoring over time: A multiple-case study},
  author={Martini, Antonio and Bosch, Jan and Chaudron, Michel},
  journal={Information and Software Technology},
  volume={67},
  pages={237--253},
  year={2015},
  publisher={Elsevier}
}

@inproceedings{vogel2015applicability,
  title={Applicability of technical debt as a concept to understand obstacles for evolution of automated production systems},
  author={Vogel-Heuser, Birgit and R{\"o}sch, Susanne},
  booktitle={2015 IEEE International Conference on Systems, Man, and Cybernetics},
  pages={127--132},
  year={2015},
  organization={IEEE}
}

@inproceedings{del2016identification,
  title={Identification of architectural technical debt: An analysis based on naming patterns},
  author={del Carpio, Paul Mendoza},
  booktitle={2016 8th Euro American Conference on Telematics and Information Systems (EATIS)},
  pages={1--8},
  year={2016},
  organization={IEEE}
}

@mastersthesis{dahl2017estimating,
  title={Estimating Architectural Technical Debt: A design research},
  author={Dahl, Gustav},
  year={2017}
}

@inproceedings{aaramaa2017requirements,
  title={Requirements volatility in software architecture design: an exploratory case study},
  author={Aaramaa, Sanja and Dasanayake, Sandun and Oivo, Markku and Markkula, Jouni and Saukkonen, Samuli},
  booktitle={Proceedings of the 2017 International Conference on Software and System Process},
  pages={40--49},
  year={2017}
}

@inproceedings{martini2017revealing,
  title={Revealing social debt with the CAFFEA framework: An antidote to architectural debt},
  author={Martini, Antonio and Bosch, Jan},
  booktitle={2017 IEEE International Conference on Software Architecture Workshops (ICSAW)},
  pages={179--181},
  year={2017},
  organization={IEEE}
}

@article{mendoza2017using,
  title={Using Naming Patterns for Identifying Architectural Technical Debt},
  author={Mendoza del Carpio, Paul},
  year={2017},
  publisher={Technology and Engineering Systems Journal}
}

@phdthesis{hsu2018investigating,
  title={Investigating the causes of software technical debt at the architectural level},
  author={Hsu, Jen Tsu},
  year={2018},
  school={University of British Columbia}
}

@article{martini2018semi,
  title={A semi-automated framework for the identification and estimation of architectural technical debt: A comparative case-study on the modularization of a software component},
  author={Martini, Antonio and Sikander, Erik and Madlani, Niel},
  journal={Information and Software Technology},
  volume={93},
  pages={264--279},
  year={2018},
  publisher={Elsevier}
}

@inproceedings{skiada2018exploring,
  title={Exploring the relationship between software modularity and technical debt},
  author={Skiada, Peggy and Ampatzoglou, Apostolos and Arvanitou, Elvira-Maria and Chatzigeorgiou, Alexander and Stamelos, Ioannis},
  booktitle={2018 44th Euromicro Conference on software engineering and advanced applications (SEAA)},
  pages={404--407},
  year={2018},
  organization={IEEE}
}

@inproceedings{hanssen2019identifying,
  title={Identifying scalability debt in open systems},
  author={Hanssen, Geir Kjetil and Brataas, Gunnar and Martini, Antonio},
  booktitle={2019 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  pages={48--52},
  year={2019},
  organization={IEEE}
}

@article{spinellis2019evolution,
  title={Evolution of the Unix system architecture: an exploratory case study},
  author={Spinellis, Diomidis and Avgeriou, Paris},
  journal={IEEE Transactions on Software Engineering},
  volume={47},
  number={6},
  pages={1134--1163},
  year={2019},
  publisher={IEEE}
}

@article{olsson2019measuring,
  title={Measuring affective states from architectural technical debt},
  author={OLSSON, JESPER and RISFELT, ERIK},
  year={2019}
}

@article{tamburri2019software,
  title={Software architecture social debt: Managing the incommunicability factor},
  author={Tamburri, Damian A},
  journal={IEEE Transactions on Computational Social Systems},
  volume={6},
  number={1},
  pages={20--37},
  year={2019},
  publisher={IEEE}
}

@article{martini2019architectural,
  title={Architectural technical debt in embedded systems},
  author={Martini, Antonio and Bosch, Jan},
  journal={Systems Engineering in the Fourth Industrial Revolution},
  pages={77--103},
  year={2019},
  publisher={Wiley Online Library}
}

@inproceedings{bogner2019assuring,
  title={Assuring the evolvability of microservices: insights into industry practices and challenges},
  author={Bogner, Justus and Fritzsch, Jonas and Wagner, Stefan and Zimmermann, Alfred},
  booktitle={2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
  pages={546--556},
  year={2019},
  organization={IEEE}
}

@inproceedings{perez2019proposed,
  title={A proposed model-driven approach to manage architectural technical debt life cycle},
  author={P{\'e}rez, Boris and Correal, Dar{\'\i}o and Astudillo, Hern{\'a}n},
  booktitle={2019 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  pages={73--77},
  year={2019},
  organization={IEEE}
}

@article{klimczyk2020technical,
  title={Technical debt aware estimations in software engineering: a systematic mapping study},
  author={Klimczyk, Pawe{\l} and Madeyski, Lech},
  journal={e-Informatica Software Engineering Journal},
  volume={14},
  number={1},
  year={2020}
}

@inproceedings{perez2020semiautomatic,
  title={A semiautomatic approach to identify architectural technical debt from heterogeneous artifacts},
  author={P{\'e}rez, Boris},
  booktitle={European Conference on Software Architecture},
  pages={5--16},
  year={2020},
  organization={Springer}
}

@inproceedings{toledo2020improving,
  title={Improving agility by managing shared libraries in microservices},
  author={Toledo, Saulo S de and Martini, Antonio and Sj{\o}berg, Dag IK},
  booktitle={International Conference on Agile Software Development},
  pages={195--202},
  year={2020},
  organization={Springer}
}

@inproceedings{borowa2021influence,
  title={The influence of cognitive biases on architectural technical debt},
  author={Borowa, Klara and Zalewski, Andrzej and Kijas, Szymon},
  booktitle={2021 IEEE 18th International Conference on Software Architecture (ICSA)},
  pages={115--125},
  year={2021},
  organization={IEEE}
}

@inproceedings{ospina2021atdx,
  title={ATDx: A tool for providing a data-driven overview of architectural technical debt in software-intensive systems},
  author={Ospina, Sebastian and Verdecchia, Roberto and Malavolta, Ivano and Lago, Patricia},
  booktitle={European Conference on Software Architecture (to appear)},
  year={2021}
}

@article{belle2021systematically,
  title={Systematically reviewing the layered architectural pattern principles and their use to reconstruct software architectures},
  author={Belle, Alvine B and Boussaidi, Ghizlane El and Lethbridge, Timothy C and Kpodjedo, Segla and Mili, Hafedh and Paz, Andres},
  journal={arXiv preprint arXiv:2112.01644},
  year={2021}
}

@article{de2021identifying,
  title={Identifying architectural technical debt, principal, and interest in microservices: A multiple-case study},
  author={de Toledo, Saulo S and Martini, Antonio and Sj{\o}berg, Dag IK},
  journal={Journal of Systems and Software},
  volume={177},
  pages={110968},
  year={2021},
  publisher={Elsevier}
}

@article{de2022accumulation,
  title={Accumulation and Prioritization of Architectural Debt in Three Companies Migrating to Microservices},
  author={De Toledo, Saulo Soares and Martini, Antonio and Nguyen, Phu H and Sj{\o}berg, Dag IK},
  journal={IEEE Access},
  volume={10},
  pages={37422--37445},
  year={2022},
  publisher={IEEE}
}

@article{sas2022relation,
  title={On the relation between architectural smells and source code changes},
  author={Sas, Darius and Avgeriou, Paris and Pigazzini, Ilaria and Arcelli Fontana, Francesca},
  journal={Journal of Software: Evolution and Process},
  volume={34},
  number={1},
  pages={e2398},
  year={2022},
  publisher={Wiley Online Library}
}

% end atd_concepts

% jss_si

@Article{Dirac1953888,
  author  = {P.A.M. Dirac},
  journal = {Physica},
  title   = {The lorentz transformation and absolute time},
  year    = {1953},
  number  = {1-–12},
  pages   = {888--896},
  volume  = {19},
  doi     = {10.1016/S0031-8914(53)80099-6},
}

@Article{Feynman1963118,
  author  = {R.P Feynman and F.L {Vernon Jr.}},
  journal = {Annals of Physics},
  title   = {The theory of a general quantum system interacting with a linear dissipative system},
  year    = {1963},
  pages   = {118--173},
  volume  = {24},
  doi     = {10.1016/0003-4916(63)90068-X},
}

@book{suryanarayana2014refactoring,
  title="Refactoring for software design smells: managing technical debt",
  author="Suryanarayana, Girish and Samarthyam, Ganesh and Sharma, Tushar",
  year="2014",
  publisher="Morgan Kaufmann"
}

@ARTICLE {Conchuir:2009,
    author     = "Conch\'{u}ir, E. and {\AA}gerfalk, P. J. and Holmstrom, H. and Fitzgerald, B.",
    title      = "Global Software Development: Where Are the Benefits?",
    journal    = "Communications of the ACM",
    year       = "2009",
    volume     = "52",
    number     = "8",
    pages      = "127--131",
    month      = "aug",
    numpages   = "5",
    acmid      = "1536648",
    publisher  = "ACM",
    address    = "New York, NY, USA"
}

@INPROCEEDINGS {Ramasubbu:2011,
    author    = "Ramasubbu, N. and Cataldo, M. and Balan, R. K. and Herbsleb, J. D.",
    title     = "Configuring Global Software Teams: A Multi-company Analysis of Project Productivity, Quality, and Profits",
    booktitle = "Proceedings of the 33rd International Conference on Software Engineering - ICSE'11",
    year      = "2011",
    pages     = "261--270",
    keywords  = "empirical analysis, globally distributed software development, quality management, software engineering economics",
    location  = "Waikiki, Honolulu, HI, USA"
}

@Article{Herbsleb:2003,
  author   = "Herbsleb, J. D. and Mockus, A.",
  journal  = "IEEE Transactions on Software Engineering",
  title    = "An empirical study of speed and communication in globally distributed software development",
  year     = "2003",
  month    = "June",
  number   = "6",
  pages    = "481-494",
  volume   = "29"
}

@Article {Bavani:2012,
    author   = "R. Bavani",
    title    = "Distributed Agile, Agile Testing, and Technical Debt",
    journal  = "IEEE Software",
    year     = "2012",
    volume   = "29",
    number   = "6",
    pages    = "28-33",
    month    = "Nov",
    keywords = "Ethics;Interviews;Investments;Software maintenance;Software measurements;Software quality;agile;agile software development;agile testing;distributed agile;technical debt",
    doi      = "10.1109/MS.2012.155",
    issn     = "0740-7459"
}

@book{wohlin2012experimentation,
  title={Experimentation in software engineering},
  author={Wohlin, Claes and Runeson, Per and H{\"o}st, Martin and Ohlsson, Magnus C and Regnell, Bj{\"o}rn and Wessl{\'e}n, Anders},
  year={2012},
  publisher={Springer Science \& Business Media}
}

@inproceedings{antinyan2014identifying,
  title={Identifying risky areas of software code in Agile/Lean software development: An industrial experience report},
  author={Antinyan, Vard and Staron, Miroslaw and Meding, Wilhelm and {\"O}sterstr{\"o}m, Per and Wikstrom, Erik and Wranker, Johan and Henriksson, Anders and Hansson, J{\"o}rgen},
  booktitle={2014 Software Evolution Week-IEEE Conference on Software Maintenance, Reengineering, and Reverse Engineering (CSMR-WCRE)},
  pages={154--163},
  year={2014},
  organization={IEEE}
}

@inproceedings{fontana2016automatic,
  title={Automatic detection of instability architectural smells},
  author={Fontana, Francesca Arcelli and Pigazzini, Ilaria and Roveda, Riccardo and Zanoni, Marco},
  booktitle={2016 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
  pages={433--437},
  year={2016},
  organization={IEEE}
}

@article{sas2021perception,
  title={The perception of Architectural Smells in industrial practice},
  author={Sas, Darius and Pigazzini, Ilaria and Avgeriou, Paris and Fontana, Francesca Arcelli},
  journal={Ieee software},
  volume={38},
  number={6},
  pages={35--41},
  year={2021},
  publisher={IEEE}
}

@article{lees2010theoretical,
  title="Theoretical maximum capacity as benchmark for empty vehicle redistribution in personal rapid transit",
  author="Lees-Miller, John and Hammersley, John and Wilson, R",
  journal="Transportation Research Record: Journal of the Transportation Research Board",
  number="2146",
  pages="76--83",
  year="2010",
  publisher="Transportation Research Board of the National Academies"
}

@article{kitchenham2007guidelines,
  title="Guidelines for performing systematic literature reviews in software engineering",
  author="Kitchenham, Barbara and Charters, Stuart",
  year="2007",
  publisher="Citeseer"
}

@inproceedings{petersen2008systematic,
  title="Systematic mapping studies in software engineering",
  author="Petersen, Kai and Feldt, Robert and Mujtaba, Shahid and Mattsson, Michael",
  booktitle="12th International Conference on Evaluation and Assessment in Software Engineering (EASE) 12",
  pages="1--10",
  year="2008"
}

@book{fleiss2013statistical,
  title="Statistical methods for rates and proportions",
  author="Fleiss, Joseph L and Levin, Bruce and Paik, Myunghee Cho",
  year="2013",
  publisher="john wiley \& sons"
}

@article{usman2017taxonomies,
  title="Taxonomies in software engineering: A systematic mapping study and a revised taxonomy development method",
  author="Usman, Muhammad and Britto, Ricardo and B{\"o}rstler, J{\"u}rgen and Mendes, Emilia",
  journal="Information and Software Technology",
  volume="85",
  pages="43--59",
  year="2017",
  publisher="Elsevier"
}

@article{pai2004systematic,
  title="Systematic reviews and meta-analyses: an illustrated, step-by-step guide.",
  author="Pai, Madhukar and McCulloch, Michael and Gorman, Jennifer D and Pai, Nitika and Enanoria, Wayne and Kennedy, Gail and Tharyan, Prathap and Colford, Jr JM",
  journal="The National medical journal of India",
  volume="17",
  number="2",
  pages="86--95",
  year="2004"
}

@article{wieringa2006requirements,
  title="Requirements engineering paper classification and evaluation criteria: a proposal and a discussion",
  author="Wieringa, Roel and Maiden, Neil and Mead, Nancy and Rolland, Colette",
  journal="Requirements engineering",
  volume="11",
  number="1",
  pages="102--107",
  year="2006",
  publisher="Springer"
}

@inproceedings{brown2010managing,
  title="Managing technical debt in software-reliant systems",
  author="Brown, Nanette and Cai, Yuanfang and Guo, Yuepu and Kazman, Rick and Kim, Miryung and Kruchten, Philippe and Lim, Erin and MacCormack, Alan and Nord, Robert and Ozkaya, Ipek and others",
  booktitle="Proceedings of the FSE/SDP workshop on Future of software engineering research",
  pages="47--52",
  year="2010"
}

@article{tom2013exploration,
  title="An exploration of technical debt",
  author="Tom, Edith and Aurum, Ayb{\"u}Ke and Vidgen, Richard",
  journal="Journal of Systems and Software",
  volume="86",
  number="6",
  pages="1498--1516",
  year="2013",
  publisher="Elsevier"
}

@article{michael2010transformation,
  title="Transformation patterns for curing the human causes of technical debt",
  author="Michael Golden, Jonathon",
  journal="Cutter IT Journal",
  volume="23",
  number="10",
  pages="30",
  year="2010"
}

@inproceedings{potdar2014exploratory,
  title="An exploratory study on self-admitted technical debt",
  author="Potdar, Aniket and Shihab, Emad",
  booktitle="2014 IEEE International Conference on Software Maintenance and Evolution",
  pages="91--100",
  year="2014",
  organization="IEEE"
}

% Comformance checking
@inproceedings{knodel2006static,
  title="Static evaluation of software architectures",
  author="Knodel, Jens and Lindvall, Mikael and Muthig, Dirk and Naab, Matthias",
  booktitle="Conference on Software Maintenance and Reengineering (CSMR'06)",
  pages="10--pp",
  year="2006",
  organization="IEEE"
}

@article{brooks1974mythical,
  title="The mythical man-month",
  author="Brooks, Frederick P",
  journal="Datamation",
  volume="20",
  number="12",
  pages="44--52",
  year="1974"
}

@inproceedings{xiao2014titan,
  title="Titan: A toolset that connects software architecture with quality analysis",
  author="Xiao, Lu and Cai, Yuanfang and Kazman, Rick",
  booktitle="Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering",
  pages="763--766",
  year="2014"
}

@article{li2015systematic,
  title="A systematic mapping study on technical debt and its management",
  author="Li, Zengyang and Avgeriou, Paris and Liang, Peng",
  journal="Journal of Systems and Software",
  volume="101",
  pages="193--220",
  year="2015",
  publisher="Elsevier"
}

@article{perry1992foundations,
  title="Foundations for the study of software architecture",
  author="Perry, Dewayne E and Wolf, Alexander L",
  journal="ACM SIGSOFT Software engineering notes",
  volume="17",
  number="4",
  pages="40--52",
  year="1992",
  publisher="ACM New York, NY, USA"
}

@book{bass2003software,
  title="Software architecture in practice",
  author="Bass, Len and Clements, Paul and Kazman, Rick",
  year="2003",
  publisher="Addison-Wesley Professional"
}

@book{taylor2009software,
  title="Software architecture: foundations, theory, and practice",
  author="Taylor, Richard N and Medvidovic, Nenad and Dashofy, Eric",
  year="2009",
  publisher="John Wiley \& Sons"
}

@article{besker2018managing,
  title="Managing architectural technical debt: A unified model and systematic literature review",
  author="Besker, Terese and Martini, Antonio and Bosch, Jan",
  journal="Journal of Systems and Software",
  volume="135",
  pages="1--16",
  year="2018",
  publisher="Elsevier"
}

@inproceedings{martini2015danger,
  title="The danger of architectural technical debt: Contagious debt and vicious circles",
  author="Martini, Antonio and Bosch, Jan",
  booktitle="2015 12th Working IEEE/IFIP Conference on Software Architecture",
  pages="1--10",
  year="2015",
  organization="IEEE"
}

@inproceedings{nord2012search,
  title="In search of a metric for managing architectural technical debt",
  author="Nord, Robert L and Ozkaya, Ipek and Kruchten, Philippe and Gonzalez-Rojas, Marco",
  booktitle="2012 Joint Working IEEE/IFIP Conference on Software Architecture and European Conference on Software Architecture",
  pages="91--100",
  year="2012",
  organization="IEEE"
}

@inproceedings{hassan2008road,
  title="The road ahead for mining software repositories",
  author="Hassan, Ahmed E",
  booktitle="2008 Frontiers of Software Maintenance",
  pages="48--57",
  year="2008",
  organization="IEEE"
}

@inproceedings{robles2010replicating,
  title="Replicating msr: A study of the potential replicability of papers published in the mining software repositories proceedings",
  author="Robles, Gregorio",
  booktitle="2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010)",
  pages="171--180",
  year="2010",
  organization="IEEE"
}

@inproceedings{zhang2014towards,
  title="Towards building a universal defect prediction model",
  author="Zhang, Feng and Mockus, Audris and Keivanloo, Iman and Zou, Ying",
  booktitle="Proceedings of the 11th Working Conference on Mining Software Repositories",
  pages="182--191",
  year="2014"
}

@inproceedings{steidl2014incremental,
  title="Incremental origin analysis of source code files",
  author="Steidl, Daniela and Hummel, Benjamin and Juergens, Elmar",
  booktitle="Proceedings of the 11th Working Conference on Mining Software Repositories",
  pages="42--51",
  year="2014"
}

@inproceedings{gil2012empirical,
  title="An empirical investigation of changes in some software properties over time",
  author="Gil, Joseph and Goldstein, Maayan and Moshkovich, Dany",
  booktitle="2012 9th IEEE Working Conference on Mining Software Repositories (MSR)",
  pages="227--236",
  year="2012",
  organization="IEEE"
}

@inproceedings{hemmati2013msr,
  title="The msr cookbook: Mining a decade of research",
  author="Hemmati, Hadi and Nadi, Sarah and Baysal, Olga and Kononenko, Oleksii and Wang, Wei and Holmes, Reid and Godfrey, Michael W",
  booktitle="2013 10th Working Conference on Mining Software Repositories (MSR)",
  pages="343--352",
  year="2013",
  organization="IEEE"
}

@book{kruchten2019managing,
  title="Managing Technical Debt: Reducing Friction in Software Development",
  author="Kruchten, Philippe and Nord, Robert and Ozkaya, Ipek",
  year="2019",
  publisher="Addison-Wesley Professional"
}

@article{chidamber1994metrics,
  title="A metrics suite for object oriented design",
  author="Chidamber, Shyam R and Kemerer, Chris F",
  journal="IEEE Transactions on software engineering",
  volume="20",
  number="6",
  pages="476--493",
  year="1994",
  publisher="IEEE"
}

@inproceedings{azadi2019architectural,
  title="Architectural smells detected by tools: a catalogue proposal",
  author="Azadi, Umberto and Fontana, Francesca Arcelli and Taibi, Davide",
  booktitle="2019 IEEE/ACM International Conference on Technical Debt (TechDebt)",
  pages="88--97",
  year="2019",
  organization="IEEE"
}

@inproceedings{xiao2016identifying,
  title="Identifying and quantifying architectural debt",
  author="Xiao, Lu and Cai, Yuanfang and Kazman, Rick and Mo, Ran and Feng, Qiong",
  booktitle="2016 IEEE/ACM 38th International Conference on Software Engineering (ICSE)",
  pages="488--498",
  year="2016",
  organization="IEEE"
}

@inproceedings{martini2018identifying,
  title="Identifying and prioritizing architectural debt through architectural smells: a case study in a large software company",
  author="Martini, Antonio and Fontana, Francesca Arcelli and Biaggi, Andrea and Roveda, Riccardo",
  booktitle="European Conference on Software Architecture",
  pages="320--335",
  year="2018",
  organization="Springer"
}

@article{sharma2020empirical,
  title="An empirical investigation on the relationship between design and architecture smells",
  author="Sharma, Tushar and Singh, Paramvir and Spinellis, Diomidis",
  journal="Empirical Software Engineering",
  volume="25",
  number="5",
  pages="4020--4068",
  year="2020",
  publisher="Springer"
}

@inproceedings{fontana2016tool,
  title="Tool support for evaluating architectural debt of an existing system: An experience report",
  author="Fontana, Francesca Arcelli and Roveda, Riccardo and Zanoni, Marco",
  booktitle="Proceedings of the 31st Annual ACM Symposium on Applied Computing",
  pages="1347--1349",
  year="2016"
}

@inproceedings{roveda2018towards,
  title="Towards an architectural debt index",
  author="Roveda, Riccardo and Fontana, Francesca Arcelli and Pigazzini, Ilaria and Zanoni, Marco",
  booktitle="2018 44th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)",
  pages="408--416",
  year="2018",
  organization="IEEE"
}

@inproceedings{ludwig2017compiling,
  title="Compiling static software metrics for reliability and maintainability from GitHub repositories",
  author="Ludwig, Jeremy and Xu, Steven and Webber, Frederick",
  booktitle="2017 IEEE International Conference on Systems, Man, and Cybernetics (SMC)",
  pages="5--9",
  year="2017",
  organization="IEEE"
}

@inproceedings{von2019mitigating,
  title="Mitigating Technical and Architectural Debt with Sonargraph",
  author="von Zitzewitz, Alexander",
  booktitle="2019 IEEE/ACM International Conference on Technical Debt (TechDebt)",
  pages="66--67",
  year="2019",
  organization="IEEE"
}

@inproceedings{canfora2007identifying,
  title="Identifying changed source code lines from version repositories",
  author="Canfora, Gerardo and Cerulo, Luigi and Di Penta, Massimiliano",
  booktitle="Fourth International Workshop on Mining Software Repositories (MSR'07: ICSE Workshops 2007)",
  pages="14--14",
  year="2007",
  organization="IEEE"
}

@article{aniche2018code,
  title="Code smells for model-view-controller architectures",
  author="Aniche, Mauricio and Bavota, Gabriele and Treude, Christoph and Gerosa, Marco Aurelio and van Deursen, Arie",
  journal="Empirical Software Engineering",
  volume="23",
  number="4",
  pages="2121--2157",
  year="2018",
  publisher="Springer"
}

@inproceedings{fontana2017arcan,
  title="Arcan: A tool for architectural smells detection",
  author="Fontana, Francesca Arcelli and Pigazzini, Ilaria and Roveda, Riccardo and Tamburri, Damian and Zanoni, Marco and Di Nitto, Elisabetta",
  booktitle="2017 IEEE International Conference on Software Architecture Workshops (ICSAW)",
  pages="282--285",
  year="2017",
  organization="IEEE"
}

@inproceedings{sas2019investigating,
  title="Investigating instability architectural smells evolution: an exploratory case study",
  author="Sas, Darius and Avgeriou, Paris and Fontana, Francesca Arcelli",
  booktitle="2019 IEEE International Conference on software maintenance and evolution (ICSME)",
  pages="557--567",
  year="2019",
  organization="IEEE"
}

@inproceedings{hassan2004predicting,
  title="Predicting change propagation in software systems",
  author="Hassan, Ahmed E and Holt, Richard C",
  booktitle="20th IEEE International Conference on Software Maintenance, 2004. Proceedings.",
  pages="284--293",
  year="2004",
  organization="IEEE"
}

% Identifying architectural technical debt in android applications through automated compliance checking
@InProceedings{verdecchia2018identifying,
  author       = "Verdecchia, Roberto",
  booktitle    = "2018 IEEE/ACM 5th International Conference on Mobile Software Engineering and Systems (MOBILESoft)",
  title        = "Identifying architectural technical debt in android applications through automated compliance checking",
  year         = "2018",
  organization = "IEEE",
  pages        = "35--36",
  abstract     = "By considering the fast pace at which mobile applications need to evolve, Architectural Technical Debt results to be a crucial yet implicit factor of success. In this research we present an approach to automatically identify Architectural Technical Debt in Android applications. The approach takes advantage of architectural guidelines extraction and modeling, architecture reverse engineering, and compliance checking. As future work, we plan to fully automate the process and empirically evaluate it via large-scale experiments.",
}

% Architectural technical debt: A grounded theory
@InProceedings{verdecchia2020architectural,
  author       = "Verdecchia, Roberto and Kruchten, Philippe and Lago, Patricia",
  booktitle    = "European Conference on Software Architecture",
  title        = "Architectural technical debt: A grounded theory",
  year         = "2020",
  organization = "Springer",
  pages        = "202--219",
  abstract     = "Architectural technical debt in a software-intensive system is driven by design decisions about its structure, frameworks, technologies, languages, etc. Unlike code-level technical debt, which can be readily detected by static analysers, and can often be refactored with minimal efforts, architectural debt is hard to detect, and its remediation is wide-ranging, daunting, and often avoided. The objective of this study is to develop a better understanding of how software development organisations conceptualize their architectural debt, and how they deal with it, if at all. We used a grounded theory method, eliciting qualitative data from software architects and senior technical staff from a wide range of software development organizations. The result of the study, i.e., the theory emerging from the collected data, constitutes an encompassing conceptual theory of architectural debt, identifying and relating concepts such as symptoms, causes, consequences, and management strategies. By grounding the findings in empirical data, the theory provides researchers and practitioners with evidence of which crucial factors of architectural technical debt are experienced in industrial contexts.",
}

% Reducing Incidents in Microservices by Repaying Architectural Technical Debt
@InProceedings{de2021reducing,
  author       = "de Toledo, Saulo S and Martini, Antonio and Sjoberg, Dag IK and Przybyszewska, Agata and Frandsen, Johannes Skov",
  booktitle    = "2021 47th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)",
  title        = "Reducing Incidents in Microservices by Repaying Architectural Technical Debt",
  year         = "2021",
  organization = "IEEE",
  pages        = "196--205",
  abstract     = "Architectural technical debt (ATD) may create a substantial extra effort in software development, which is called interest. There is little evidence about whether repaying ATD in microservices reduces such interest. Objectives: We wanted to conduct a first study on investigating the effect of removing ATD on the occurrence of incidents in a microservices architecture. Method: We conducted a quantitative and qualitative case study of a project with approximately 1000 microservices in a large, international financing services company. We measured and compared the number of software incidents of different categories before and after repaying ATD. Results: The total number of incidents was reduced by 84\%, and the numbers of critical- and high-priority incidents were both reduced by approximately 90\% after the architectural refactoring. The number of incidents in the architecture with the ATD was mainly constant over time, but we observed a slight increase of low priority incidents related to inaccessibility and the environment in the architecture without the ATD. Conclusion: This study shows evidence that refactoring ATDs, such as lack of communication standards, poor management of dead-letter queues, and the use of inadequate technologies in microservices, reduces the number of critical- and high-priority incidents and, thus, part of its interest, although some low priority incidents may increase.",
}

@inproceedings{agrawal2018ruffle,
  title="Ruffle: Extracting co-change information from software project repositories",
  author="Agrawal, Anushree and Singh, RK",
  booktitle="2018 International Conference on Smart Systems and Inventive Technology (ICSSIT)",
  pages="88--91",
  year="2018",
  organization="IEEE"
}

@inproceedings{agrawal2020identification,
  title="Identification of co-change patterns in software evolution",
  author="Agrawal, Anushree and Singh, RK",
  booktitle="2020 8th International Conference on Reliability, Infocom Technologies and Optimization (Trends and Future Directions)(ICRITO)",
  pages="781--785",
  year="2020",
  organization="IEEE"
}

@inproceedings{feng2019active,
  title="Active hotspot: An issue-oriented model to monitor software evolution and degradation",
  author="Feng, Qiong and Cai, Yuanfang and Kazman, Rick and Cui, Di and Liu, Ting and Fang, Hongzhou",
  booktitle="2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)",
  pages="986--997",
  year="2019",
  organization="IEEE"
}

@article{curtis2012estimating,
  title="Estimating the principal of an application's technical debt",
  author="Curtis, Bill and Sappidi, Jay and Szynkarski, Alexandra",
  journal="IEEE software",
  volume="29",
  number="6",
  pages="34--42",
  year="2012",
  publisher="IEEE"
}

@incollection{bruls:00,
  title={Squarified treemaps},
  author={Bruls, Mark and Huizing, Kees and Wijk, Jarke J van},
  booktitle={Data visualization 2000},
  pages={33--42},
  year={2000},
  publisher={Springer}
}

@inproceedings{cervantes:20,
  title={Software archinaut: a tool to understand architecture, identify technical debt hotspots and manage evolution},
  author={Cervantes, Humberto and Kazman, Rick},
  booktitle={Proceedings of the 3rd International Conference on Technical Debt},
  pages={115--119},
  year={2020}
}

@inproceedings{de:16,
  title={A systematic mapping study on mining software repositories},
  author={de F. Farias, M{\'a}rio Andr{\'e} and Novais, Renato and J{\'u}nior, Methanias Cola{\c{c}}o and da Silva Carvalho, Lu{\'\i}s Paulo and Mendon{\c{c}}a, Manoel and Sp{\'\i}nola, Rodrigo Oliveira},
  booktitle={Proceedings of the 31st Annual ACM Symposium on Applied Computing},
  pages={1472--1479},
  year={2016}
}

@article{johnson:99,
  title={Tree-maps: A space-filling approach to the visualization of hierarchical},
  author={Johnson, Brian and Shneiderman, Ben},
  journal={Readings in information visualization: Using vision to think},
  pages={152--159},
  year={1999}
}

@article{kwan:11,
  title={A survey of techniques in software repository mining},
  author={Kwan, Irwin and Damian, Daniela},
  journal={University of Victoria Technical Report DCS-340-IR},
  year={2011}
}

@article{olatunji:10,
  title={Mining software repositories--a comparative analysis},
  author={Olatunji, Sunday O and Idrees, Syed U and Al-Ghamdi, Yasser S and Al-Ghamdi, Jarallah Saleh Ali},
  journal={International Journal of Computer Science and Network Security},
  volume={10},
  number={8},
  pages={161--174},
  year={2010},
  publisher={Citeseer}
}

@article{shahin:14,
  title={A systematic review of software architecture visualization techniques},
  author={Shahin, Mojtaba and Liang, Peng and Babar, Muhammad Ali},
  journal={Journal of Systems and Software},
  volume={94},
  pages={161--185},
  year={2014},
  publisher={Elsevier}
}

@article{ebert:16,
  title={Cyclomatic complexity},
  author={Ebert, Christof and Cain, James and Antoniol, Giuliano and Counsell, Steve and Laplante, Phillip},
  journal={IEEE software},
  volume={33},
  number={6},
  pages={27--29},
  year={2016},
  publisher={IEEE}
}

@article{tornhill:2019,
  title={Your code as a crime scene},
  author={Tornhill, Adam},
  year={2019},
  publisher={The Pragmatic Bookshelf,}
}

@mastersthesis{umemura:17,
  title={Uma ferramenta para monitoramento da entropia de mudan{\c{c}}a e sua rela{\c{c}}{\~a}o com m{\'e}tricas de software},
  author={Umemura, Tiago Kenji},
  type={{B.S.} thesis},
  year={2017},
  school={Universidade Tecnol{\'o}gica Federal do Paran{\'a}}
}

@article{avancini:21,
  title={Uma ferramenta de visualiza{\c{c}}{\~a}o de software para avalia{\c{c}}{\~a}o de uso de API no contexto de ecossistemas de software},
  author={Avancini, Rodrigo},
  year={2021},
  publisher={Universidade Federal de S{\~a}o Paulo}
}

@article{standardieee:90,
  title={IEEE Standard Glossary of Software Engineering Terminology (IEEE Std 610.12-1990)},
  author={Standard 90 Standards Coordinating Committee and others},
  journal={New York, NY: The Institute of Electrical and Electronics Engineers},
  year={1990}
}

@article{szHoke:17,
  title={Empirical study on refactoring large-scale industrial systems and its effects on maintainability},
  author={Sz{\H{o}}ke, G{\'a}bor and Antal, G{\'a}bor and Nagy, Csaba and Ferenc, Rudolf and Gyim{\'o}thy, Tibor},
  journal={Journal of Systems and Software},
  volume={129},
  pages={107--126},
  year={2017},
  publisher={Elsevier}
}

@inproceedings{tornhill2018assessing,
  title={Assessing technical debt in automated tests with CodeScene},
  author={Tornhill, Adam},
  booktitle={2018 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)},
  pages={122--125},
  year={2018},
  organization={IEEE}
}

@techreport{johnson1998tree,
  title={Tree-maps: A space filling approach to the visualization of hierarchical information structures},
  author={Johnson, Brian and Shneiderman, Ben},
  year={1998}
}

@INPROCEEDINGS {holvitie2014technical,
    author       = "Holvitie, Johannes and Leppanen, Ville and Hyrynsalmi, Sami",
    title        = "Technical debt and the effect of agile software development practices on it-an industry practitioner survey",
    booktitle    = "2014 Sixth International Workshop on Managing Technical Debt",
    year         = "2014",
    pages        = "35--42",
    organization = "IEEE"
}

@BOOK {ebert2012global,
    author    = "Ebert, Christof",
    title     = "Global Software and IT",
    publisher = "Wiley Online Library",
    year      = "2012"
}

@ARTICLE {ebert2015global,
    author    = "Ebert, Christof and Kuhrmann, Marco and Prikladnicki, Rafael",
    title     = "Global software engineering: An industry perspective",
    journal   = "IEEE Software",
    year      = "2015",
    volume    = "33",
    number    = "1",
    pages     = "105--108",
    publisher = "IEEE"
}

@INPROCEEDINGS {aoyama1995management,
    author       = "Aoyama, Mikio",
    title        = "Management of distributed concurrent development for large scale software systems",
    booktitle    = "Proceedings 1995 Asia Pacific Software Engineering Conference",
    year         = "1995",
    pages        = "158--167",
    organization = "IEEE"
}

@ARTICLE {alves2016identification,
    author    = "Alves, Nicolli SR and Mendes, Thiago S and de Mendon{\c{c}}a, Manoel G and Sp{\'\i}nola, Rodrigo O and Shull, Forrest and Seaman, Carolyn",
    title     = "Identification and management of technical debt: A systematic mapping study",
    journal   = "Information and Software Technology",
    year      = "2016",
    volume    = "70",
    pages     = "100--121",
    publisher = "Elsevier"
}

@ARTICLE {usman2018effort,
    author    = "Usman, Muhammad and Britto, Ricardo and Damm, Lars-Ola and Borstler, Jurgen",
    title     = "Effort estimation in large-scale software development: An industrial case study",
    journal   = "Information and Software technology",
    year      = "2018",
    volume    = "99",
    pages     = "21--40",
    publisher = "Elsevier"
}

@INPROCEEDINGS {Casey2006URW,
    author    = "Casey, Valentine and Richardson, Ita",
    title     = "Uncovering the Reality Within Virtual Software Teams",
    booktitle = "Proceedings of the 2006 International Workshop on Global Software Development for the Practitioner",
    year      = "2006",
    series    = "GSD '06",
    pages     = "66--72",
    address   = "New York, NY, USA",
    publisher = "ACM",
    isbn      = "1-59593-404-9",
    location  = "Shanghai, China",
    numpages  = "7",
    acmid     = "1138523",
    keywords  = "GSD, communication tools, global software development, knowledge transfer, motivational issues, process re-engineering, project management, technical ability, virtual teams"
}

@InProceedings{Kazman_2015,
  author    = {Rick Kazman and Yuanfang Cai and Ran Mo and Qiong Feng and Lu Xiao and Serge Haziyev and Volodymyr Fedak and Andriy Shapochka},
  booktitle = {2015 {IEEE}/{ACM} 37th {IEEE} International Conference on Software Engineering},
  title     = {A Case Study in Locating the Architectural Roots of Technical Debt},
  year      = {2015},
  month     = {may},
  publisher = {{IEEE}},
  abstract  = {Our recent research has shown that, in large-scale software systems, defective files seldom exist alone. They are usually architecturally connected, and their architectural structures exhibit significant design flaws which propagate bugginess among files. We call these flawed structures the architecture roots, a type of technical debt that incurs high maintenance penalties. Removing the architecture roots of bugginess requires refactoring, but the benefits of refactoring have historically been difficult for architects to quantify or justify. In this paper, we present a case study of identifying and quantifying such architecture debts in a large-scale industrial software project. Our approach is to model and analyze software architecture as a set of design rule spaces (DRSpaces). Using data extracted from the project's development artifacts, we were able to identify the files implicated in architecture flaws and suggest refactorings based on removing these flaws. Then we built economic models of the before and (predicted) after states, which gave the organization confidence that doing the refactorings made business sense, in terms of a handsome return on investment.},
  doi       = {10.1109/icse.2015.146},
  ranking   = {rank4},
}

@Article{Heikkilae2017,
  author      = {Heikkila, V.T. and Paasivaara, M. and Lasssenius, C. and Damian, D. and Engblom, C.},
  journal     = {Empirical Software Engineering},
  title       = {Managing the requirements flow from strategy to release in large-scale agile development: a case study at Ericsson},
  year        = {2017},
  issn        = {13823256},
  note        = {cited By 1},
  number      = {6},
  pages       = {2892-2936},
  volume      = {22},
  abstract    = {In a large organization, informal communication and simple backlogs are not sufficient for the management of requirements and development work. Many large organizations are struggling to successfully adopt agile methods, but there is still little scientific knowledge on requirements management in large-scale agile development organizations. We present an in-depth study of an Ericsson telecommunications node development organization which employs a large scale agile method to develop telecommunications system software. We describe how the requirements flow from strategy to release, and related benefits and problems. Data was collected by 43 interviews, which were analyzed qualitatively. The requirements management was done in three different processes, each of which had a different process model, purpose and planning horizon. The release project management process was plan-driven, feature development process was continuous and implementation management process was agile. The perceived benefits included reduced development lead time, increased flexibility, increased planning efficiency, increased developer motivation and improved communication effectiveness. The recognized problems included difficulties in balancing planning effort, overcommitment, insufficient understanding of the development team autonomy, defining the product owner role, balancing team specialization, organizing system-level work and growing technical debt. The study indicates that agile development methods can be successfully employed in organizations where the higher level planning processes are not agile. Combining agile methods with a flexible feature development process can bring many benefits, but large-scale software development seems to require specialist roles and significant coordination effort. © 2016, The Author(s).},
  affiliation = {Aalto University, PO Box 15400, Aalto, Finland; University of Victoria, PO Box 1700, STN CSC, Victoria, BC, Canada; Oy LM Ericsson AB, Kirkkonummi, Finland},
  coden       = {ESENF},
  doi         = {10.1007/s10664-016-9491-z},
  keywords    = {Agile manufacturing systems; Project management; Requirements engineering; Societies and institutions; Software engineering, Agile development organization; Agile software development; Communication effectiveness; Implementation managements; Large project; Project management process; Requirements management; Scrum, Software design},
  language    = {English},
  publisher   = {Springer New York LLC},
  ranking     = {rank4},
  source      = {Scopus},
}

@ARTICLE {Harter:2000,
    author     = "Harter, Donald E. and Krishnan, Mayuram S. and Slaughter, Sandra A.",
    title      = "Effects of Process Maturity on Quality, Cycle Time, and Effort in Software Product Development",
    journal    = "Manage. Sci.",
    year       = "2000",
    volume     = "46",
    number     = "4",
    pages      = "451--466",
    month      = "apr",
    issn       = "0025-1909",
    numpages   = "16",
    doi        = "10.1287/mnsc.46.4.451.12056",
    acmid      = "970247",
    publisher  = "INFORMS",
    address    = "Institute for Operations Research and the Management Sciences (INFORMS), Linthicum, Maryland, USA",
    keywords   = "Capability maturity model, Software costs, Software cycle time, Software economics, Software process improvement, Software productivity, Software quality"
}

@Article{Rios2018b,
  author    = {Nicolli Rios and Manoel Gomes de Mendon{\c{c}}a Neto and Rodrigo Oliveira Sp{\'{\i}}nola},
  journal   = {Information and Software Technology},
  title     = {A tertiary study on technical debt: Types, management strategies, research trends, and base information for practitioners},
  year      = {2018},
  month     = {oct},
  pages     = {117--145},
  volume    = {102},
  abstract  = {AbstractLarge software companies need to support continuous and fast delivery of customer value both in the short and long term. However, this can be hindered if both the evolution and maintenance of existing systems are hampered by Technical Debt. Although a lot of theoretical work on Technical Debt has been produced recently, its practical management lacks empirical studies. In this paper, we investigate the state of practice in several companies to understand what the cost of managing TD is, what tools are used to track TD, and how a tracking process is introduced in practice. We combined two phases: a survey involving 226 respondents from 15 organizations and an in-depth multiple case study in three organizations including 13 interviews and 79 Technical Debt issues. We selected the organizations where Technical Debt was better tracked in order to distill best practices. We found that the development time dedicated to managing Technical Debt is substantial (an average of 25 of the overall development), but mostly not systematic: only a few participants (26) use a tool, and only 7.2 methodically track Technical Debt. We found that the most used and effective tools are currently backlogs and static analyzers. By studying the approaches in the companies participating in the case study, we report how companies start tracking Technical Debt and what the initial benefits and challenges are. Finally, we propose a Strategic Adoption Model for the introduction of tracking Technical Debt in software organizations.},
  doi       = {10.1016/j.infsof.2018.05.010},
  groups    = {armandosoaressousa:4},
  publisher = {Elsevier {BV}},
  ranking   = {rank5},
}

@INPROCEEDINGS {Alzaghoul:2014,
    author    = "E. Alzaghoul and R. Bahsoon",
    title     = "Evaluating Technical Debt in Cloud-Based Architectures Using Real Options",
    booktitle = "2014 23rd Australian Software Engineering Conference",
    year      = "2014",
    pages     = "1-10",
    month     = "April",
    doi       = "10.1109/ASWEC.2014.27",
    issn      = "1530-0803"
}

@Conference{Ampatzoglou2016,
  author              = "Ampatzoglou, A. and Ampatzoglou, A. and Chatzigeorgiou, A. and Avgeriou, P. and Abrahamsson, P. and Martini, A. and Zdun, U. and Systa, K.",
  booktitle           = "2016 IEEE 8th International Workshop on Managing Technical Debt (MTD)",
  title               = "The Perception of Technical Debt in the Embedded Systems Domain: An Industrial Case Study",
  year                = "2016",
  month               = "Oct",
  note                = "cited By 2",
  pages               = "9-16",
  publisher           = "Institute of Electrical and Electronics Engineers Inc.",
  abstract            = "Technical Debt Management (TDM) has drawn the attention of software industries during the last years, including embedded systems. However, we currently lack an overview of how practitioners from this application domain perceive technical debt. To this end, we conducted a multiple case study in the embedded systems industry, to investigate: (a) the expected life-time of components that have TD, (b) the most frequently occurring types of TD in them, and (c) the significance of TD against run-time quality attributes. The case study was performed on seven embedded systems industries (telecommunications, printing, smart manufacturing, sensors, etc.) from five countries (Greece, Netherlands, Sweden, Austria, and Finland). The results of the case study suggest that: (a) maintainability is more seriously considered when the expected lifetime of components is larger than ten years, (b) the most frequent types of debt are test, architectural, and code debt, and (c) in embedded systems the run-time qualities are prioritized compared to design-time qualities that are usually associated with TD. The obtained results can be useful for both researchers and practitioners: the former can focus their research on the most industrially-relevant aspects of TD, whereas the latter can be informed about the most common types of TD and how to focus their TDM processes. © 2016 IEEE.",
  doi                 = "10.1109/MTD.2016.8",
  groups              = "armandosoaressousa:6",
  isbn                = "9781509038541",
  journal             = "Proceedings - 2016 IEEE 8th International Workshop on Managing Technical Debt, MTD 2016",
  language            = "English"
}

@INPROCEEDINGS {Das:2007:UDV:1234772.1234790,
    author    = "Das, Sumita and Lutters, Wayne G. and Seaman, Carolyn B.",
    title     = "Understanding Documentation Value in Software Maintenance",
    booktitle = "Proceedings of the 2007 Symposium on Computer Human Interaction for the Management of Information Technology",
    year      = "2007",
    series    = "CHIMIT '07",
    address   = "New York, NY, USA",
    publisher = "ACM",
    isbn      = "978-1-59593-635-6",
    location  = "Cambridge, Massachusetts",
    articleno = "2",
    acmid     = "1234790",
    keywords  = "documentation, software maintenance"
}

@Article{Guo2016,
  author      = {Guo, Y. and Spinola, R.O. and Seaman, C.},
  journal     = {Empirical Software Engineering},
  title       = {Exploring the costs of technical debt management – a case study},
  year        = {2016},
  issn        = {13823256},
  note        = {cited By 7},
  number      = {1},
  pages       = {159-182},
  volume      = {21},
  abstract    = {Technical debt is a metaphor for delayed software maintenance tasks. Incurring technical debt may bring short-term benefits to a project, but such benefits are often achieved at the cost of extra work in future, analogous to paying interest on the debt. Currently technical debt is managed implicitly, if at all. However, on large systems, it is too easy to lose track of delayed tasks or to misunderstand their impact. Therefore, we have proposed a new approach to managing technical debt, which we believe to be helpful for software managers to make informed decisions. In this study we explored the costs of the new approach by tracking the technical debt management activities in an on-going software project. The results from the study provided insights into the impact of technical debt management on software projects. In particular, we found that there is a significant start-up cost when beginning to track and monitor technical debt, but the cost of ongoing management soon declines to very reasonable levels. © 2014, Springer Science+Business Media New York.},
  affiliation = {Department of Information Systems, University of Maryland Baltimore County, Baltimore, MD, United States; Department of Systems and Computing, University of Salvador, Salvador, Bahia, Brazil; Fraunhofer Project Center for Software and System Engineering at Federal University of Bahia, Salvador, Bahia, Brazil},
  coden       = {ESENF},
  doi         = {10.1007/s10664-014-9351-7},
  keywords    = {Decision making, Informed decision; Management activities; New approaches; Software managers; Software project; Software-maintenance tasks; Start-up costs; Technical debts, Costs},
  language    = {English},
  publisher   = {Springer New York LLC},
  ranking     = {rank4},
  source      = {Scopus},
}

@InCollection{Yli-Huumo2016a,
  author    = {Jesse Yli-Huumo and Andrey Maglyas and Kari Smolander and Johan Haller and Hannu Törnroos},
  booktitle = {Product-Focused Software Process Improvement},
  publisher = {Springer International Publishing},
  title     = {Developing Processes to Increase Technical Debt Visibility and Manageability {\textendash} An Action Research Study in Industry},
  year      = {2016},
  pages     = {368--378},
  abstract  = {The knowledge about technical debt and its management has increased in recent years. The interest of academia and industry has generated many viewpoints on technical debt. Technical debt management consists of technical and organizational aspects, which make it a challenge in software development. To increase technical debt visibility and manageability, new processes must be developed and thoroughly empirically tested for their applicability. In this paper, we use the action research methodology to design processes for identification, documentation, and prioritization of technical debt. Our partner in this research is a large Nordic IT company Tieto, currently in a need for new ways to improve their technical debt management. The results include a set of processes and templates that were successfully used to identify and document technical debt. The identified technical debt items were later prioritized based on evaluation by Tieto employees. Tieto was able to create a prioritized technical debt backlog, which is now used for reduction activities to create a healthy and sustainable product for the future.},
  doi       = {10.1007/978-3-319-49094-6_24},
  ranking   = {rank3},
}

@InProceedings{Klinger2011,
  author    = {Klinger, Tim and Tarr, Peri and Wagstrom, Patrick and Williams, Clay},
  booktitle = {Proceedings of the 2Nd Workshop on Managing Technical Debt},
  title     = {An Enterprise Perspective on Technical Debt},
  year      = {2011},
  address   = {New York, NY, USA},
  pages     = {35--38},
  publisher = {ACM},
  series    = {MTD '11},
  acmid     = {1985371},
  doi       = {10.1145/1985362.1985371},
  isbn      = {978-1-4503-0586-0},
  keywords  = {extended stakeholders, leverage, technical debt},
  location  = {Waikiki, Honolulu, HI, USA},
  numpages  = {4},
  ranking   = {rank5},
}

@InProceedings{Codabux2013,
  author    = {Codabux, Zadia and Williams, Byron},
  booktitle = {Proceedings of the 4th International Workshop on Managing Technical Debt},
  title     = {Managing Technical Debt: An Industrial Case Study},
  year      = {2013},
  address   = {Piscataway, NJ, USA},
  month     = {May},
  pages     = {8--15},
  publisher = {IEEE Press},
  series    = {MTD '13},
  abstract  = {Technical debt is the consequence of trade-offs made during software development to ensure speedy releases. The research community lacks rigorously evaluated guidelines to help practitioners characterize, manage and prioritize debt. This paper describes a study conducted with an industrial partner during their implementation of Agile development practices for a large software development division within the company. The report contains our initial findings based on ethnographic observations and semi-structured interviews. The goal is to identify the best practices regarding managing technical debt so that the researchers and the practitioners can further evaluate these practices to extend their knowledge of the technical debt metaphor. We determined that the developers considered their own taxonomy of technical debt based on the type of work they were assigned and their personal understanding of the term. Despite management's high-level categories, the developers mostly considered design debt, testing debt and defect debt. In addition to developers having their own taxonomy, assigning dedicated teams for technical debt reduction and allowing other teams about 20% of time per sprint for debt reduction are good initiatives towards lowering technical debt. While technical debt has become a well-regarded concept in the Agile community, further empirical evaluation is needed to assess how to properly apply the concept for various development organizations.},
  acmid     = {2663299},
  doi       = {10.1109/MTD.2013.6608672},
  isbn      = {978-1-4673-6443-0},
  keywords  = {agile methods, industrial case study, scrum, semi-structure interviews, technical debt},
  location  = {San Francisco, California},
  numpages  = {8},
  ranking   = {rank5},
}

@ARTICLE {mendes2019visminertd,
    author    = "Mendes, Thiago S and Gomes, Felipe GS and Gon{\c{c}}alves, David P and Mendon{\c{c}}a, Manoel G and Novais, Renato L and Sp{\'\i}nola, Rodrigo O",
    title     = "VisminerTD: a tool for automatic identification and interactive monitoring of the evolution of technical debt items",
    journal   = "Journal of the Brazilian Computer Society",
    year      = "2019",
    volume    = "25",
    number    = "1",
    pages     = "2",
    publisher = "Springer"
}

@ARTICLE {clay2010infrastructure,
    author  = "Clay Shafer, Andrew",
    title   = "Infrastructure Debt: Revisiting the Foundation",
    journal = "Cutter IT Journal",
    year    = "2010",
    volume  = "23",
    number  = "10",
    pages   = "36"
}

@InProceedings{Digkas_2018,
  author    = {Georgios Digkas and Mircea Lungu and Paris Avgeriou and Alexander Chatzigeorgiou and Apostolos Ampatzoglou},
  booktitle = {2018 {IEEE} 25th International Conference on Software Analysis, Evolution and Reengineering ({SANER})},
  title     = {How do developers fix issues and pay back technical debt in the Apache ecosystem?},
  year      = {2018},
  month     = {mar},
  publisher = {{IEEE}},
  abstract  = {During software evolution technical debt (TD) follows a constant ebb and flow, being incurred and paid back, sometimes in the same day and sometimes ten years later. There have been several studies in the literature investigating how technical debt in source code accumulates during time and the consequences of this accumulation for software maintenance. However, to the best of our knowledge there are no large scale studies that focus on the types of issues that are fixed and the amount of TD that is paid back during software evolution. In this paper we present the results of a case study, in which we analyzed the evolution of fifty-seven Java open-source software projects by the Apache Software Foundation at the temporal granularity level of weekly snapshots. In particular, we focus on the amount of technical debt that is paid back and the types of issues that are fixed. The findings reveal that a small subset of all issue types is responsible for the largest percentage of TD repayment and thus, targeting particular violations the development team can achieve higher benefits.},
  comment   = {repayment},
  doi       = {10.1109/saner.2018.8330205},
  groups    = {armandosoaressousa:4},
  ranking   = {rank5},
}

@BOOK {campbell2013sonarqube,
    author    = "Campbell, G and Papapetrou, Patroklos P",
    title     = "SonarQube in action",
    publisher = "Manning Publications Co.",
    year      = "2013"
}

@ARTICLE {britto2016software,
    author    = "Britto, Ricardo and Smite, Darja and Damm, Lars-Ola",
    title     = "Software architects in large-scale distributed projects: An Ericsson case study",
    journal   = "IEEE Software",
    year      = "2016",
    volume    = "33",
    number    = "6",
    pages     = "48--55",
    publisher = "IEEE"
}

@INPROCEEDINGS {avritzer2015extending,
    author       = "Avritzer, Alberto and Beecham, Sarah and Britto, Ricardo and Kroll, Josiane and Menasche, Daniel Sadoc and Noll, John and Paasivaara, Maria",
    title        = "Extending survivability models for global software development with media synchronicity theory",
    booktitle    = "Global Software Engineering (ICGSE), 2015 IEEE 10th International Conference on",
    year         = "2015",
    pages        = "23--32",
    organization = "IEEE"
}

@INPROCEEDINGS {britto2016experiences,
    author       = "Britto, Ricardo and {\v{S}}mite, Darja and Damm, Lars-Ola",
    title        = "Experiences from measuring learning and performance in large-scale distributed software development",
    booktitle    = "Proceedings of the 10th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement",
    year         = "2016",
    pages        = "17",
    organization = "ACM"
}

@ARTICLE {mayring2014qualitative,
title="Qualitative content analysis: theoretical foundation, basic procedures and software solution",
  author="Mayring, Philipp",
  year="2014",
  publisher="AUT"
}

@ARTICLE {cavanagh1997content,
    author  = "Cavanagh, Stephen",
    title   = "Content analysis: concepts, methods and applications.",
    journal = "Nurse researcher",
    year    = "1997",
    volume  = "4",
    number  = "3",
    pages   = "5--16"
}

@BOOK {ho2013handbook,
    author    = "Ho, Robert",
    title     = "Handbook of univariate and multivariate data analysis with IBM SPSS",
    publisher = "Chapman and Hall/CRC",
    year      = "2013"
}

@ARTICLE {elo2008qualitative,
    author    = "Elo, Satu and Kyngas, Helvi",
    title     = "The qualitative content analysis process",
    journal   = "Journal of advanced nursing",
    year      = "2008",
    volume    = "62",
    number    = "1",
    pages     = "107--115",
    publisher = "Wiley Online Library"
}

@BOOK {Runeson:2012,
    author    = "Runeson, P. and Host, M. and Rainer, A. and Regnell, B.",
    title     = "{Case Study Research in Software Engineering: Guidelines and Examples}",
    publisher = "John Wiley Sons",
    year      = "2012",
    isbn      = "978-1118104354"
}

@BOOK {Trochim:2015,
    author    = "Trochim, W. and Donnelly, J. P. and Arora, K.",
    title     = "Research Methods: The Essential Knowledge Base",
    publisher = "Cengage",
    year      = "2015",
    isbn      = "978-1133954774"
}

@ARTICLE {chatterjee1986influential,
    author    = "Chatterjee, Samprit and Hadi, Ali S",
    title     = "Influential observations, high leverage points, and outliers in linear regression",
    journal   = "Statistical Science",
    year      = "1986",
    pages     = "379--393",
    publisher = "JSTOR"
}

@BOOK {fox2015applied,
    author    = "Fox, John",
    title     = "Applied regression analysis and generalized linear models",
    publisher = "Sage Publications",
    year      = "2015"
}

@ARTICLE {koenker1982robust,
    author    = "Koenker, Roger and Bassett Jr, Gilbert",
    title     = "Robust tests for heteroscedasticity based on regression quantiles",
    journal   = "Econometrica: Journal of the Econometric Society",
    year      = "1982",
    pages     = "43--61",
    publisher = "JSTOR"
}

@ARTICLE {alin2010multicollinearity,
    author    = "Alin, Aylin",
    title     = "Multicollinearity",
    journal   = "Wiley Interdisciplinary Reviews: Computational Statistics",
    year      = "2010",
    volume    = "2",
    number    = "3",
    pages     = "370--374",
    publisher = "Wiley Online Library"
}

@article{Li:2015,
 author = "Li, Zengyang and Avgeriou, Paris and Liang, Peng",
 title = "A Systematic Mapping Study on Technical Debt and Its Management",
 journal = "J. Syst. Softw.",
 volume = "101",
 number = "C",
 month = "mar",
 year = "2015",
 issn = "0164-1212",
 pages = "193--220",
 numpages = "28",
 doi = "10.1016/j.jss.2014.12.027",
 acmid = "2741488",
 publisher = "Elsevier Science Inc.",
 address = "New York, NY, USA",
 keywords = "Systematic mapping study, Technical debt, Technical debt management"
}

@Article{Carmel:2001,
  Title                    = "Tactical Approaches for Alleviating Distance in Global Software Development",
  Author                   = "Carmel, E. and Agarwal, R.",
  Journal                  = "IEEE Software",
  Year                     = "2001",
  Number                   = "2",
  Pages                    = "22--29",
  Volume                   = "18",
  Acmid                    = "626245",
  Address                  = "Los Alamitos, CA, USA",
  Numpages                 = "8",
  Publisher                = "IEEE Computer Society Press"
}

@inproceedings{tamburri2013social,
  title= "What is social debt in software engineering?",
  author= "Tamburri, Damian A and Kruchten, Philippe and Lago, Patricia and van Vliet, Hans",
  booktitle= "2013 6th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE)",
  pages= "93--96",
  year= "2013",
  organization= "IEEE"
}

@incollection{Seaman:2011,
 title="Measuring and monitoring technical debt",
  author="Seaman, Carolyn and Guo, Yuepu",
  booktitle="Advances in Computers",
  volume="82",
  pages="25--46",
  year="2011",
  publisher="Elsevier"
  }

@article{lehtola2006suitability,
  title="Suitability of requirements prioritization methods for market-driven software product development",
  author="Lehtola, Laura and Kauppinen, Marjo",
  journal="Software Process: Improvement and Practice",
  volume="11",
  number="1",
  pages="7--19",
  year="2006",
  publisher="Wiley Online Library"
}

@inproceedings{davis2013driving,
  title="Driving quality improvement and reducing technical debt with the definition of done",
  author="Davis, Noopur",
  booktitle="Agile Conference (AGILE), 2013",
  pages="164--168",
  year="2013",
  organization="IEEE"
}

@article{lim2012balancing,
  title="A balancing act: what software practitioners have to say about technical debt",
  author="Lim, Erin and Taksande, Nitin and Seaman, Carolyn",
  journal="IEEE software",
  volume="29",
  number="6",
  pages="22--27",
  year="2012",
  publisher="IEEE"
}

@article{kruchten2012technical,
  title="Technical debt: From metaphor to theory and practice",
  author="Kruchten, Philippe and Nord, Robert L and Ozkaya, Ipek",
  journal="Ieee software",
  volume="29",
  number="6",
  pages="18--21",
  year="2012",
  publisher="IEEE"
}

@inproceedings{guo2011portfolio,
  title="A portfolio approach to technical debt management",
  author="Guo, Yuepu and Seaman, Carolyn",
  booktitle="Proceedings of the 2nd Workshop on Managing Technical Debt",
  pages="31--34",
  year="2011",
  organization="ACM"
}

@inproceedings{besker2019technical,
  title="Technical debt triage in backlog management",
  author="Besker, Terese and Martini, Antonio and Bosch, Jan",
  booktitle="2019 IEEE/ACM International Conference on Technical Debt (TechDebt)",
  pages="13--22",
  year="2019",
  organization="IEEE"
}

@InProceedings{li2014empirical,
  author    = {Li, Zengyang and Liang, Peng and Avgeriou, Paris and Guelfi, Nicolas and Ampatzoglou, Apostolos},
  booktitle = {Proceedings of the 10th international ACM Sigsoft conference on Quality of software architectures},
  title     = {An empirical investigation of modularity metrics for indicating architectural technical debt},
  year      = {2014},
  pages     = {119--128},
  abstract  = {Architectural technical debt (ATD) is incurred by design decisions that consciously or unconsciously compromise system-wide quality attributes, particularly maintainability and evolvability. ATD needs to be identified and measured, so that it can be monitored and eventually repaid, when appropriate. In practice, ATD is difficult to identify and measure, since ATD does not yield observable behaviors to end users. One indicator of ATD, is the average number of modified components per commit (ANMCC): a higher ANMCC indicates more ATD in a software system. However, it is difficult and sometimes impossible to calculate ANMCC, because the data (i.e., the log of commits) are not always available. In this work, we propose to use software modularity metrics, which can be directly calculated based on source code, as a substitute of ANMCC to indicate ATD. We validate the correlation between ANMCC and modularity metrics through a holistic multiple case study on thirteen open source software projects. The results of this study suggest that two modularity metrics, namely Index of Package Changing Impact (IPCI) and Index of Package Goal Focus (IPGF), have significant correlation with ANMCC, and therefore can be used as alternative ATD indicators.},
}

@InCollection{li2014architectural,
  author    = {Li, Zengyang and Liang, Peng and Avgeriou, Paris},
  booktitle = {Economics-Driven Software Architecture},
  publisher = {Elsevier},
  title     = {Architectural debt management in value-oriented architecting},
  year      = {2014},
  pages     = {183--204},
}

@InProceedings{li2015architectural,
  author       = {Li, Zengyang and Liang, Peng and Avgeriou, Paris},
  booktitle    = {2015 12th Working IEEE/IFIP Conference on Software Architecture},
  title        = {Architectural technical debt identification based on architecture decisions and change scenarios},
  year         = {2015},
  organization = {IEEE},
  pages        = {65--74},
}

@InProceedings{martini2015towards,
  author       = {Martini, Antonio and Bosch, Jan},
  booktitle    = {2015 41St euromicro conference on software engineering and advanced applications},
  title        = {Towards prioritizing architecture technical debt: information needs of architects and product owners},
  year         = {2015},
  organization = {IEEE},
  pages        = {422--429},
  abstract     = {Architectural Technical Debt is a metaphor for representing sub-optimal architectural solutions that might cause an interest, in terms of effort or quality, to be paid by the organization in the long run. Such metaphor has been regarded as useful for communicating risks of suboptimal solutions between technical and non-technical stakeholders. However, it's fundamental to understand the information needs of the involved stakeholders in order to produce technical debt measurements that would allow proper communication and informed prioritization. We have investigated, through a combination of interviews, observations and a survey, what key information is needed by agile product owners and software architects in order to prioritize the refactoring of risky architectural technical debt items with respect to feature development.},
}

@InProceedings{martini2016empirically,
  author       = {Martini, Antonio and Bosch, Jan},
  booktitle    = {2016 IEEE/ACM 38th international conference on software engineering companion (ICSE-C)},
  title        = {An empirically developed method to aid decisions on architectural technical debt refactoring: AnaConDebt},
  year         = {2016},
  organization = {IEEE},
  pages        = {31--40},
  abstract     = {Architectural Technical Debt is regarded as sub-optimal architectural solutions that need to be refactored in order to avoid the payment of a costly interest in the future. However, decisions on if and when to refactor architecture are extremely important and difficult to take, since changing software at the architectural level is quite expensive. Therefore it is important, for software organizations, to have methods and tools that aid architects and managers to understand if Architecture Technical Debt will generate a costly and growing interest to be paid or not. Current knowledge, especially empirically developed and evaluated, is quite scarce. In this paper we developed and evaluated a method, AnaConDebt, by analyzing, together with several practitioners, 12 existing cases of Architecture Debt in 6 companies. The method has been refined several times in order to be useful and effective in practice. We also report the evaluation of the method with a final case, for which we present anonymized results and subsequent refactoring decisions. The method consists of several components that need to be analyzed, combining the theoretical Technical Debt framework and the practical experience of the practitioners, in order to identify the key factors involved in the growth of interest. The output of the method shows summarized indicators that visualizes the factors in a useful way for the stakeholders. This analysis aids the practitioners in deciding on if and when to refactor Architectural Technical Debt items. The method has been evaluated and has been proven useful to support the architects into systematically analyze and decide upon a case.},
  ranking      = {rank5},
}

@InProceedings{martini2016estimating,
  author       = {Martini, Antonio and Sikander, Erik and Medlani, Niel},
  booktitle    = {2016 42th Euromicro conference on software engineering and advanced applications (SEAA)},
  title        = {Estimating and quantifying the benefits of refactoring to improve a component modularity: a case study},
  year         = {2016},
  organization = {IEEE},
  pages        = {92--99},
  abstract     = {In recent years, research and industry's attention has been focused on maintaining a system that would both decrease time to market in the short term and assure a sustainable feature output and smooth maintenance operations in the long run. A related phenomenon has been identified in Architectural Technical Debt: if the system architecture is sub-optimal for long-term business goals, it needs to be refactored. A key property of the system assuring long-term goals consists on modularity, or else the ability to decouple different components: such property allows the product to be evolved without costly changes pervading the whole system. However, understanding the business benefits of refactoring to achieve modularity is not trivial, especially for large refactorings involving substantial architectural changes. We have conducted a case study in a large company, analyzing a case of refactoring a component to achieve modularity. We report a comparative study of a refactored against a non-refactored component. We found that the modularization would be repaid in several months of development and maintenance. We present a method to calculate the effort saved by the modularization and an equation for calculating and quantifying the development and maintenance benefits of refactoring.},
}

@InCollection{li2016architecture,
  author    = {Li, Zengyang and Liang, Peng and Avgeriou, Paris},
  booktitle = {Software Quality Assurance},
  publisher = {Elsevier},
  title     = {Architecture viewpoints for documenting architectural technical debt},
  year      = {2016},
  pages     = {85--132},
  abstract  = {Technical debt (TD) has attracted an increasing interest from researchers and practitioners in the software engineering domain. Currently, most approaches to managing TD focus on dealing with TD at source code level, while few methods deal with TD at architecture level. If architectural technical debt (ATD) is not effectively managed in the architecting process, the knowledge about ATD is not made available to involved stakeholders and the impact of ATD is not considered during architecture decision-making. Thus, the system’s maintainability and evolvability can be intentionally or unintentionally compromised. As a result, architectures are costly to maintain and new features are difficult to introduce. To facilitate the management of ATD, it needs to be documented so that it becomes explicit to stakeholders. To this end, we propose a set of architecture viewpoints related to ATD (ATD viewpoints in short). Each viewpoint frames a number of concerns related to ATD. These ATD viewpoints together help to get a comprehensive understanding of ATD in a software system, thereby providing support for architecture decision-making. To evaluate the effectiveness of the ATD viewpoints in documenting ATD, we conducted a case study in a large telecommunications company. The results of this case study show that the documented ATD views can effectively facilitate the documentation of ATD. Specifically, the ATD viewpoints are relatively easy to understand; it takes an acceptable amount of effort to document ATD using the ATD viewpoints; and the documented ATD views are useful for stakeholders to understand the ATD in the software project.},
}

@Article{martini2017interest,
  author    = {Martini, Antonio and Bosch, Jan},
  journal   = {Journal of Software: Evolution and Process},
  title     = {On the interest of architectural technical debt: Uncovering the contagious debt phenomenon},
  year      = {2017},
  number    = {10},
  pages     = {e1877},
  volume    = {29},
  abstract  = {A known problem in large software companies is to balance the prioritization of short-term and long-term business goals. As an example, architecture suboptimality (Architectural Technical Debt), incurred to deliver fast, might hinder future feature development. However, some technical debt generates more interest to be paid than other. We conducted a multi-phase, multiple-case embedded case study comprehending 9 sites at 6 large international software companies. We have investigated which architectural technical debt items generate more interest , how the interest occurs during software development and which costly extra-activities are triggered as a result. We presented a taxonomy of the most dangerous items identified during the qualitative investigation and a model of their effects that can be used for prioritization, for further investigation and as a quality model for extracting more precise and context-specific metrics. We found that some architectural technical debt items are contagious, causing the interest to be not only fixed, but potentially compound, which leads to the hidden growth of interest (possibly exponential). We found important factors to be monitored to refactor the debt before it becomes too costly. Instances of these phenomena need to be identified and stopped before the development reaches a crises.},
  publisher = {Wiley Online Library},
}

@InProceedings{besker2017impact,
  author       = {Besker, Terese and Martini, Antonio and Bosch, Jan},
  booktitle    = {2017 43rd Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
  title        = {Impact of architectural technical debt on daily software development work—a survey of software practitioners},
  year         = {2017},
  organization = {IEEE},
  pages        = {278--287},
  abstract     = {The negative consequences of Technical Debt is an area of increasing interest, and more specifically the Architectural aspects of it have received increased attention in the last few years. Besides the negative effects of Architectural Technical Debt on the overall software product quality in terms of hindering evolution and causing high maintenance costs, Architectural Technical Debt also has a significant negative impact on software practitioners' daily work. Although a great deal of theoretical work on Architectural Technical Debt has been undertaken, there is a lack of empirical studies that examine the negative effects of Architectural Technical Debt during the software development lifecycle. The aim of this study is to investigate how practitioners perceive and estimate the impact of Architectural Technical Debt during the software development process. This paper reports the results of an online web survey providing quantitative data from 258 participants. The contribution of this paper is threefold: First, it shows that practitioners experience that the Architectural type of Technical Debt has the highest negative impact on daily software development work. Secondly, we provide evidence that does not support the commonly held belief that Architectural Technical Debt increases with the age of the software. Thirdly, we show that despite different responsibilities and working tasks of software professionals, Architectural Technical Debt negatively affects all roles without any significant difference between the roles.},
}

@InProceedings{biaggi2018architectural,
  author       = {Biaggi, Andrea and Fontana, Francesca Arcelli and Roveda, Riccardo},
  booktitle    = {2018 44th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
  title        = {An architectural smells detection tool for c and c++ projects},
  year         = {2018},
  organization = {IEEE},
  pages        = {417--420},
}

@InProceedings{verdecchia2020atdx,
  author    = {Verdecchia, Roberto and Lago, Patricia and Malavolta, Ivano and Ozkaya, Ipek},
  booktitle = {ENASE},
  title     = {ATDx: Building an Architectural Technical Debt Index.},
  year      = {2020},
  pages     = {531--539},
  abstract  = {Architectural technical debt (ATD) in software-intensive systems refers to the architecture design decisions
which work as expedient in the short term, but later negatively impact system evolvability and maintainability.
Over the years numerous approaches have been proposed to detect particular types of ATD at a refined level
of granularity via source code analysis. Nevertheless, how to gain an encompassing overview of the ATD
present in a software-intensive system is still an open question. In this study, we present a multi-step approach
designed to build an ATD index (ATDx), which provides insights into a set of ATD dimensions building
upon existing architectural rules by leveraging statistical analysis. The ATDx approach can be adopted by
researchers and practitioners alike in order to gain a better understanding of the nature of the ATD present in
software-intensive systems, and provides a systematic framework to implement concrete instances of ATDx
according to specific project and organizational needs},
}

@Article{verdecchia2021building,
  author    = {Verdecchia, Roberto and Kruchten, Philippe and Lago, Patricia and Malavolta, Ivano},
  journal   = {Journal of Systems and Software},
  title     = {Building and evaluating a theory of architectural technical debt in software-intensive systems},
  year      = {2021},
  pages     = {110925},
  volume    = {176},
  abstract  = {Architectural technical debt in software-intensive systems is a metaphor used to describe the “big” design decisions (e.g., choices regarding structure, frameworks, technologies, languages, etc.) that, while being suitable or even optimal when made, significantly hinder progress in the future. While other types of debt, such as code-level technical debt, can be readily detected by static analyzers, and often be refactored with minimal or only incremental efforts, architectural debt is hard to be identified, of wide-ranging remediation cost, daunting, and often avoided.
In this study, we aim at developing a better understanding of how software development organizations conceptualize architectural debt, and how they deal with it. In order to do so, in this investigation we apply a mixed empirical method, constituted by a grounded theory study followed by focus groups. With the grounded theory method we construct a theory on architectural technical debt by eliciting qualitative data from software architects and senior technical staff from a wide range of heterogeneous software development organizations. We applied the focus group method to evaluate the emerging theory and refine it according to the new data collected.
The result of the study, i.e., a theory emerging from the gathered data, constitutes an encompassing conceptual model of architectural technical debt, identifying and relating concepts such as its symptoms, causes, consequences, management strategies, and communication problems. From the conducted focus groups, we assessed that the theory adheres to the four evaluation criteria of classic grounded theory, i.e., the theory fits its underlying data, is able to work, has relevance, and is modifiable as new data appears.
By grounding the findings in empirical evidence, the theory provides researchers and practitioners with novel knowledge on the crucial factors of architectural technical debt experienced in industrial contexts.},
  publisher = {Elsevier},
}

@Article{xiao2021detecting,
  author    = {Xiao, Lu and Cai, Yuanfang and Kazman, Rick and Mo, Ran and Feng, Qiong},
  journal   = {IEEE Transactions on Software Engineering},
  title     = {Detecting the Locations and Predicting the Costs of Compound Architectural Debts},
  year      = {2021},
  abstract  = {Architectural Technical Debt (ATD) refers to sub-optimal architectural design in a software system that incurs high maintenance interest over time. Previous research revealed that ATD has significant negative impact on daily development. This paper contributes an approach to enable an architect to precisely locate ATDs, as well as capture the trajectory of maintenance cost on each debt, based on which, predict the cost of the debt in a future release. The ATDs are expressed in four typical patterns, which entail the core of each debt. Furthermore, we aggregate compound ATDs to capture the complicated relationship among multiple ATD instances, which should be examined together for effective refactoring solutions. We evaluate our approach on 18 real-world projects. We identified ATDs that persistently incur significant (up to 95% of) maintenance costs in most projects. The maintenance costs on the majority of debts fit into a linear regression model---indicating stable interest rate. In five projects, 12.1% to 27.6% of debts fit into an exponential model, indicating increasing interest rate, which deserve higher priority from architects. The regression models can accurately predict the costs of the majority of (82% to 100%) debts in the next release of a system. By aggregating related ATDs, architects can focus on a small number of cost-effective compound debts, which contain a relatively small number of source files, but account for a large portion of maintenance costs in their projects. With these capabilities, our approach can help architects make informed decisions regarding whether, where, and how to refactor for eliminating ATDs in their systems.},
  publisher = {IEEE},
}

@Article{verdecchia2022empirical,
  author    = {Verdecchia, Roberto and Malavolta, Ivano and Lago, Patricia and Ozkaya, Ipek},
  journal   = {PeerJ Computer Science},
  title     = {Empirical evaluation of an architectural technical debt index in the context of the Apache and ONAP ecosystems},
  year      = {2022},
  pages     = {e833},
  volume    = {8},
  abstract  = {Background
Architectural Technical Debt (ATD) in a software-intensive system denotes architectural design choices which, while being suitable or even optimal when adopted, lower the maintainability and evolvability of the system in the long term, hindering future development activities. Despite the growing research interest in ATD, how to gain an informative and encompassing viewpoint of the ATD present in a software-intensive system is still an open problem.
Objective
In this study, we evaluate ATDx, a data-driven approach providing an overview of the ATD present in a software-intensive system. The approach, based on the analysis of a software portfolio, calculates severity levels of architectural rule violations via a clustering algorithm, and aggregates results into different ATD dimensions.
Method
To evaluate ATDx, we implement an instance of the approach based on SonarQube, and run the analysis on the Apache and ONAP ecosystems. The analysis results are then shared with the portfolio contributors, who are invited to participate in an online survey designed to evaluate the representativeness and actionability of the approach.
Results
The survey results confirm the representativeness of the ATDx, in terms of both the ATDx analysis results and the used architectural technical debt dimensions. Results also showed the actionability of the approach, although to a lower extent when compared to the ATDx representativeness, with usage scenarios including refactoring, code review, communication, and ATD evolution analysis.
Conclusions
With ATDx, we strive for the establishment of a sound, comprehensive, and intuitive architectural view of the ATD identifiable via source code analysis. The collected results are promising, and display both the representativeness and actionability of the approach. As future work, we plan to consolidate the approach via further empirical experimentation, by considering other development contexts (e.g., proprietary portfolios and other source code analysis tools), and enhancing the ATDx report capabilities.},
  publisher = {PeerJ Inc.},
}

@InProceedings{Espinosa:2007,
  author    = {Espinosa, J. A. and Nan, N. and Carmel, E.},
  booktitle = {Second IEEE International Conference on Global Software Engineering - ICGSE'07.},
  title     = {Do Gradations of Time Zone Separation Make a Difference in Performance? A First Laboratory Study},
  year      = {2007},
  month     = {Aug},
  pages     = {12-22},
}

@InProceedings{Cunningham:1992,
  author    = {Cunningham, Ward},
  booktitle = {Addendum to the Proceedings on Object-oriented Programming Systems, Languages, and Applications (Addendum)},
  title     = {The WyCash Portfolio Management System},
  year      = {1992},
  address   = {New York, NY, USA},
  pages     = {29--30},
  publisher = {ACM},
  series    = {OOPSLA '92},
  acmid     = {157715},
  doi       = {10.1145/157709.157715},
  isbn      = {0-89791-610-7},
  location  = {Vancouver, British Columbia, Canada},
  numpages  = {2},
}

@InProceedings{ebert2016global,
  author       = {Ebert, Christof and Kuhrmann, Marco and Prikladnicki, Rafael},
  booktitle    = {2016 IEEE 11th International Conference on Global Software Engineering (ICGSE)},
  title        = {Global software engineering: Evolution and trends},
  year         = {2016},
  organization = {IEEE},
  pages        = {144--153},
}

@Article{Yli-Huumo2016195,
  author      = {Yli-Huumo, J. and Maglyas, A. and Smolander, K.},
  journal     = {Journal of Systems and Software},
  title       = {How do software development teams manage technical debt? An empirical study},
  year        = {2016},
  issn        = {01641212},
  note        = {cited By 6},
  pages       = {195-218},
  volume      = {120},
  abstract    = {Technical debt (TD) is a metaphor for taking shortcuts or workarounds in technical decisions to gain short-term benefit in time-to-market and earlier software release. In this study, one large software development organization is investigated to gather empirical evidence related to the concept of technical debt management (TDM). We used the exploratory case study method to collect and analyze empirical data in the case organization by interviewing a total of 25 persons in eight software development teams. We were able to identify teams where the current strategy for TDM was only to fix TD when necessary, when it started to cause too much trouble for development. We also identified teams where the management had a systematic strategy to identify, measure and monitor TD during the development process. It seems that TDM can be associated with a similar maturity concept as software development in general. Development teams may raise their maturity by increasing their awareness and applying more advanced processes, techniques and tools in TDM. TDM is an essential part of sustainable software development, and companies have to find right approaches to deal with TD to produce healthy software that can be developed and maintained in the future. © 2016 The Authors},
  affiliation = {Lappeenranta University of Technology, School of Business and Management, Department of Innovation and Software, PO Box 20, Skinnarilankatu 34, Lappeenranta, Finland; Aalto University, School of Science, Department of Computer Science, P.O.Box 15400, Aalto, Finland},
  coden       = {JSSOD},
  doi         = {10.1016/j.jss.2016.05.018},
  keywords    = {Human resource management; Planning; Software engineering, Development process; Exploratory case studies; Software development organizations; Software development teams; Sustainable softwares; Technical debts; Technical decision; Techniques and tools, Software design},
  language    = {English},
  publisher   = {Elsevier Inc.},
  ranking     = {rank5},
  source      = {Scopus},
}

@Article{Ampatzoglou_2015,
  author    = {Areti Ampatzoglou and Apostolos Ampatzoglou and Alexander Chatzigeorgiou and Paris Avgeriou},
  journal   = {Information and Software Technology},
  title     = {The financial aspect of managing technical debt: A systematic literature review},
  year      = {2015},
  month     = {aug},
  pages     = {52--73},
  volume    = {64},
  abstract  = {ContextTechnical debt is a software engineering metaphor, referring to the eventual financial consequences of trade-offs between shrinking product time to market and poorly specifying, or implementing a software product, throughout all development phases. Based on its inter-disciplinary nature, i.e. software engineering and economics, research on managing technical debt should be balanced between software engineering and economic theories.ObjectiveThe aim of this study is to analyze research efforts on technical debt, by focusing on their financial aspect. Specifically, the analysis is carried out with respect to: (a) how financial aspects are defined in the context of technical debt and (b) how they relate to the underlying software engineering concepts.MethodIn order to achieve the abovementioned goals, we employed a standard method for SLRs and applied it on studies retrieved from seven general-scope digital libraries. In total we selected 69 studies relevant to the financial aspect of technical debt.ResultsThe most common financial terms that are used in technical debt research are principal and interest, whereas the financial approaches that have been more frequently applied for managing technical debt are real options, portfolio management, cost/benefit analysis and value-based analysis. However, the application of such approaches lacks consistency, i.e., the same approach is differently applied in different studies, and in some cases lacks a clear mapping between financial and software engineering concepts.ConclusionThe results are expected to prove beneficial for the communication between technical managers and project managers, in the sense that they will provide a common vocabulary, and will help in setting up quality-related goals, during software development. To achieve this we introduce: (a) a glossary of terms and (b) a classification scheme for financial approaches used for managing technical debt. Based on these, we have been able to underline interesting implications for researchers and practitioners.},
  doi       = {10.1016/j.infsof.2015.04.001},
  publisher = {Elsevier {BV}},
  ranking   = {rank5},
}

@InProceedings{Fernandez_Sanchez_2017,
  author    = {Carlos Fernandez-Sanchez and Hector Humanes and Juan Garbajosa and Jessica Diaz},
  booktitle = {2017 43rd Euromicro Conference on Software Engineering and Advanced Applications ({SEAA})},
  title     = {An Open Tool for Assisting in Technical Debt Management},
  year      = {2017},
  month     = {aug},
  publisher = {IEEE},
}

@InProceedings{Besker2017a,
  author       = {T. Besker and A. Martini and J. Bosch},
  booktitle    = {2017 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
  title        = {The Pricey Bill of Technical Debt: When and by Whom will it be Paid?},
  year         = {2017},
  month        = {Sept},
  organization = {IEEE},
  pages        = {13-23},
  abstract     = {Software companies need to support continuous and fast delivery of customer value both in short and a long-term perspective. However, this can be hindered by evolution limitations and high maintenance efforts due to internal software quality issues by what is described as Technical Debt. Although significant theoretical work has been undertaken to describe the negative effects of Technical Debt, these studies tend to have a weak empirical basis and often lack quantitative data. The aim of this study is to estimate wasted time, caused by the Technical Debt interest during the software life-cycle. This study also investigates how practitioners perceive and estimate the impact of the negative consequences due to Technical Debt during the software development process. This paper reports the results of both an online web-survey provided quantitative data from 258 participants and follow-up interviews with 32 industrial software practitioners. The importance and originality of this study contributes and provides novel insights into the research on Technical Debt by quantifying the perceived interest and the negative effects it has on the software development life-cycle. The findings show that on average, 36 percent of all development time is estimated to be wasted due to Technical Debt; Complex Architectural Design and Requirement Technical Debt generates most negative effect; and that most time is wasted on understanding and/or measuring the Technical Debt. Moreover, the analysis of the professional roles and the age of the software system in the survey revealed that different roles are affected differently and that the consequences of Technical Debt are also influenced by the age of the software system.},
  doi          = {10.1109/ICSME.2017.42},
  groups       = {armandosoaressousa:6},
}

@Article{nunez2017source,
  author    = {Nu{\~n}ez-Varela, Alberto S and P{\'e}rez-Gonzalez, H{\'e}ctor G and Mart{\'\i}nez-Perez, Francisco E and Soubervielle-Montalvo, Carlos},
  journal   = {Journal of Systems and Software},
  title     = {Source code metrics: A systematic mapping study},
  year      = {2017},
  pages     = {164--197},
  volume    = {128},
  publisher = {Elsevier},
}

@InProceedings{shneiderman2001ordered,
  author       = {Shneiderman, Ben and Wattenberg, Martin},
  booktitle    = {IEEE Symposium on Information Visualization, 2001. INFOVIS 2001.},
  title        = {Ordered treemap layouts},
  year         = {2001},
  organization = {IEEE},
  pages        = {73--78},
}

@Article{graylin2009cyclomatic,
  author    = {Graylin, Jay and Hale, Joanne E and Smith, Randy K and David, Hale and Kraft, Nicholas A and Charles, WARD and others},
  journal   = {Journal of Software Engineering and Applications},
  title     = {Cyclomatic complexity and lines of code: empirical evidence of a stable linear relationship},
  year      = {2009},
  number    = {03},
  pages     = {137},
  volume    = {2},
  publisher = {Scientific Research Publishing},
}

@Article{elish2013suite,
  author    = {Elish, Mahmoud O and Al-Rahman Al-Khiaty, Mojeeb},
  journal   = {Journal of Software: Evolution and Process},
  title     = {A suite of metrics for quantifying historical changes to predict future change-prone classes in object-oriented software},
  year      = {2013},
  number    = {5},
  pages     = {407--437},
  volume    = {25},
  publisher = {Wiley Online Library},
}

@InProceedings{Spadini2018,
  author    = {Spadini, Davide and Aniche, Mauricio and Bacchelli, Alberto},
  booktitle = {Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering - ESEC/FSE 2018},
  title     = {PyDriller: Python framework for mining software repositories},
  year      = {2018},
  address   = {New York, New York, USA},
  pages     = {908--911},
  publisher = {ACM Press},
  doi       = {10.1145/3236024.3264598},
  isbn      = {9781450355735},
  keywords  = {2018, acm reference format, and alberto bacchelli, davide spadini, git, gitpython, mauricio aniche, mining software repositories, pydriller, python},
  url       = {http://dl.acm.org/citation.cfm?doid=3236024.3264598},
}

@Article{mccabe1976complexity,
  author    = {McCabe, Thomas J},
  journal   = {IEEE Transactions on software Engineering},
  title     = {A complexity measure},
  year      = {1976},
  number    = {4},
  pages     = {308--320},
  publisher = {IEEE},
}

@InProceedings{verdecchia2018architectural,
  author       = {Verdecchia, Roberto and Malavolta, Ivano and Lago, Patricia},
  booktitle    = {2018 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  title        = {Architectural technical debt identification: The research landscape},
  year         = {2018},
  organization = {IEEE},
  pages        = {11--20},
  abstract     = {Architectural Technical Debt (ATD) regards sub-optimal design decisions that bring short-term benefits to the cost of long-term gradual deterioration of the quality of the architecture of a software system. The identification of ATD strongly in uences the technical and economic sustainability of software systems and is attracting growing interest in the scientific community. During the years several approaches for ATD identification have been conceived, each of them addressing ATD from diferent perspectives and with heterogeneous characteristics. In this paper we apply the systematic mapping study methodology for identifying, classifying, and evaluating the state of the art on ATD identification from the following three perspectives: publication trends, characteristics, and potential for industrial adoption. Specically, starting from a set of 509 potentially relevant studies, we systematically selected 47 primary studies and analyzed them according to a rigorously-de ned classification framework. The analysis of the obtained results supports both researchers and practitioners by providing (i) an assessment of current research trends and gaps in ATD identification, (ii) a solid foundation for understanding existing (and future) research on ATD identification, and (iii) a rigorous evaluation of its potential for industrial adoption.},
  ranking      = {rank5},
}

@InProceedings{eliasson2015identifying,
  author       = {Eliasson, Ulf and Martini, Antonio and Kaufmann, Robert and Odeh, Sam},
  booktitle    = {2015 IEEE 7th International Workshop on Managing Technical Debt (MTD)},
  title        = {Identifying and visualizing Architectural Debt and its efficiency interest in the automotive domain: A case study},
  year         = {2015},
  organization = {IEEE},
  pages        = {33--40},
  abstract     = {Architectural Technical Debt has recently received the attention of the scientific community, as a suitable metaphor for describing sub-optimal architectural solutions having short- term benefits but causing a long-term negative impact. We study such phenomenon in the context of Volvo Car Group, where the development of modern cars includes complex systems with mechanical components, electronics and software working together in a complicated network to perform an increasing number of functions and meet the demands of many customers. This puts high requirements on having an architecture and design that can handle these demands. Therefore, it is of utmost importance to manage Architecture Technical Debt, in order to make sure that the advantages of sub-optimal solutions do not lead to the payment of a large interest. We conducted a case study at Volvo Car Group and we discovered that architectural violations in the detailed design had an impact on the efficiency of the communication between components, which is an essential quality in cars and other embedded systems. Such interest is not studied in literature, which usually focuses on the maintainability aspects of Technical Debt. To explore how this Architectural Technical Debt and its interest could be communicated to stakeholders, we developed a visual tool. We found that not only was the Architectural Debt highly interesting for the architects and other stakeholders at VCG, but the proposed visualization was useful in increasing the awareness of the impact that Architectural Technical Debt had on efficiency.},
  ranking      = {rank4},
}

@Article{lawson:56,
  author    = {Lawson, Ray},
  journal   = {Canadian Medical Association Journal},
  title     = {Implications of surface temperatures in the diagnosis of breast cancer},
  year      = {1956},
  number    = {4},
  pages     = {309},
  volume    = {75},
  publisher = {Canadian Medical Association},
}

@InProceedings{wettel:08,
  author    = {Wettel, Richard and Lanza, Michele},
  booktitle = {Companion of the 30th international conference on Software engineering},
  title     = {Codecity: 3d visualization of large-scale software},
  year      = {2008},
  pages     = {921--922},
}

@Article{Herbsleb2001,
  author    = {Herbsleb, J. and Moitra, D.},
  journal   = {IEEE Software},
  title     = {Global software development},
  year      = {2001},
  number    = {2},
  pages     = {16--20},
  volume    = {18},
  publisher = {IEEE},
}

@Article{Dikert:2016,
  author    = {Dikert, K. and Paasivaara, M. and Lassenius, C.},
  journal   = {Journal of Systems and Software},
  title     = {Challenges and success factors for large-scale agile transformations: A systematic literature review},
  year      = {2016},
  pages     = {87--108},
  volume    = {119},
  abstract  = {Agile methods have become an appealing alternative for companies striving to improve their performance, but the methods were originally designed for small and individual teams. This creates unique challenges when introducing agile at scale, when development teams must synchronize their activities, and there might be a need to interface with other organizational units. In this paper we present a systematic literature review on how agile methods and lean software development has been adopted at scale, focusing on reported challenges and success factors in the transformation. We conducted a systematic literature review of industrial large-scale agile transformations. Our keyword search found 1875 papers. We included 52 publications describing 42 industrial cases presenting the process of taking large-scale agile development into use. Almost 90{\%} of the included papers were experience reports, indicating a lack of sound academic research on the topic. We identified 35 reported challenges grouped into nine categories, and 29 success factors, grouped into eleven categories. The most salient success factor categories were management support, choosing and customizing the agile model, training and coaching, and mindset and alignment.},
  keywords  = {Adopting agile software development, Agile software development, Challenges, Large-scale agile, Organizational transformation, Success factors, Systematic literature review},
  publisher = {Elsevier Inc.},
}

@InProceedings{yao2010structural,
  author       = {Yao, Yi and Huang, Song and Jie, Li and Liu, Xiao-ming},
  booktitle    = {2010 2nd International Conference on Computer Engineering and Technology},
  title        = {Structural characteristic of large-scale software development network},
  year         = {2010},
  organization = {IEEE},
  pages        = {V3--214},
  publisher    = {{IEEE}},
  volume       = {3},
}

@InProceedings{Ernst_2015,
  author       = {Neil A. Ernst and Stephany Bellomo and Ipek Ozkaya and Robert L. Nord and Ian Gorton},
  booktitle    = {Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering - {ESEC}/{FSE} 2015},
  title        = {Measure it? Manage it? Ignore it? software practitioners and technical debt},
  year         = {2015},
  organization = {ACM},
  pages        = {50--60},
  publisher    = {{ACM} Press},
  abstract     = {The technical debt metaphor is widely used to encapsulate numerous software quality problems. The metaphor is attractive to practitioners as it communicates to both technical and nontechnical audiences that if quality problems are not addressed, things may get worse. However, it is unclear whether there are practices that move this metaphor beyond a mere communication mechanism. Existing studies of technical debt have largely focused on code metrics and small surveys of developers. In this paper, we report on our survey of 1,831 participants, primarily software engineers and architects working in long-lived, software-intensive projects from three large organizations, and follow-up interviews of seven software engineers. We analyzed our data using both nonparametric statistics and qualitative text analysis. We found that architectural decisions are the most important source of technical debt. Furthermore, while respondents believe the metaphor is itself important for communication, existing tools are not currently helpful in managing the details. We use our results to motivate a technical debt timeline to focus management and tooling approaches.},
  comment      = {Task complexity},
  doi          = {10.1145/2786805.2786848},
  ranking      = {rank4},
}

@Comment{jabref-meta: databaseType:bibtex;}

% end tdm
