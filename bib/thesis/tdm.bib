% Encoding: UTF-8
@ARTICLE {Herbsleb2001,
    author        = "Herbsleb, J. and Moitra, D.",
    title         = "Global software development",
    journal       = "IEEE Software",
    year          = "2001",
    volume        = "18",
    number        = "2",
    pages         = "16--20",
}

@ARTICLE {Conchuir:2009,
    author     = "Conch\'{u}ir, E. and {\AA}gerfalk, P. J. and Holmstrom, H. and Fitzgerald, B.",
    title      = "Global Software Development: Where Are the Benefits?",
    journal    = "Communications of the ACM",
    year       = "2009",
    volume     = "52",
    number     = "8",
    pages      = "127--131",
    month      = "aug",
    numpages   = "5",
    acmid      = "1536648",
    publisher  = "ACM",
    address    = "New York, NY, USA"
}

@INPROCEEDINGS {Ramasubbu:2011,
    author    = "Ramasubbu, N. and Cataldo, M. and Balan, R. K. and Herbsleb, J. D.",
    title     = "Configuring Global Software Teams: A Multi-company Analysis of Project Productivity, Quality, and Profits",
    booktitle = "Proceedings of the 33rd International Conference on Software Engineering - ICSE'11",
    year      = "2011",
    pages     = "261--270",
    keywords  = "empirical analysis, globally distributed software development, quality management, software engineering economics",
    location  = "Waikiki, Honolulu, HI, USA"
}

@ARTICLE {herbsleb2001global,
    author    = "Herbsleb, James D and Moitra, Deependra",
    title     = "Global software development",
    journal   = "IEEE software",
    year      = "2001",
    volume    = "18",
    number    = "2",
    pages     = "16--20",
    publisher = "IEEE"
}

@ARTICLE {Dikert:2016,
    author    = "Dikert, K. and Paasivaara, M. and Lassenius, C.",
    title     = "Challenges and success factors for large-scale agile transformations: A systematic literature review",
    journal   = "Journal of Systems and Software",
    year      = "2016",
    volume    = "119",
    pages     = "87--108",
    abstract  = "Agile methods have become an appealing alternative for companies striving to improve their performance, but the methods were originally designed for small and individual teams. This creates unique challenges when introducing agile at scale, when development teams must synchronize their activities, and there might be a need to interface with other organizational units. In this paper we present a systematic literature review on how agile methods and lean software development has been adopted at scale, focusing on reported challenges and success factors in the transformation. We conducted a systematic literature review of industrial large-scale agile transformations. Our keyword search found 1875 papers. We included 52 publications describing 42 industrial cases presenting the process of taking large-scale agile development into use. Almost 90{\%} of the included papers were experience reports, indicating a lack of sound academic research on the topic. We identified 35 reported challenges grouped into nine categories, and 29 success factors, grouped into eleven categories. The most salient success factor categories were management support, choosing and customizing the agile model, training and coaching, and mindset and alignment.",
    keywords  = "Adopting agile software development,Agile software development,Challenges,Large-scale agile,Organizational transformation,Success factors,Systematic literature review",
    publisher = "Elsevier Inc."
}

@InProceedings{Espinosa:2007,
  author    = "Espinosa, J. A. and Nan, N. and Carmel, E.",
  booktitle = "Second IEEE International Conference on Global Software Engineering - ICGSE'07.",
  title     = "Do Gradations of Time Zone Separation Make a Difference in Performance? A First Laboratory Study",
  year      = "2007",
  month     = "Aug",
  pages     = "12-22"
}

@Article{Herbsleb:2003,
  author   = "Herbsleb, J. D. and Mockus, A.",
  journal  = "IEEE Transactions on Software Engineering",
  title    = "An empirical study of speed and communication in globally distributed software development",
  year     = "2003",
  month    = "June",
  number   = "6",
  pages    = "481-494",
  volume   = "29"
}

@Article {Bavani:2012,
    author   = "R. Bavani",
    title    = "Distributed Agile, Agile Testing, and Technical Debt",
    journal  = "IEEE Software",
    year     = "2012",
    volume   = "29",
    number   = "6",
    pages    = "28-33",
    month    = "Nov",
    keywords = "Ethics;Interviews;Investments;Software maintenance;Software measurements;Software quality;agile;agile software development;agile testing;distributed agile;technical debt",
    doi      = "10.1109/MS.2012.155",
    issn     = "0740-7459"
}

@InProceedings {Cunningham:1992,
    author    = "Cunningham, Ward",
    title     = "The WyCash Portfolio Management System",
    booktitle = "Addendum to the Proceedings on Object-oriented Programming Systems, Languages, and Applications (Addendum)",
    year      = "1992",
    series    = "OOPSLA '92",
    pages     = "29--30",
    address   = "New York, NY, USA",
    publisher = "ACM",
    isbn      = "0-89791-610-7",
    location  = "Vancouver, British Columbia, Canada",
    numpages  = "2",
    doi       = "10.1145/157709.157715",
    acmid     = "157715"
}

@INPROCEEDINGS {holvitie2014technical,
    author       = "Holvitie, Johannes and Leppanen, Ville and Hyrynsalmi, Sami",
    title        = "Technical debt and the effect of agile software development practices on it-an industry practitioner survey",
    booktitle    = "2014 Sixth International Workshop on Managing Technical Debt",
    year         = "2014",
    pages        = "35--42",
    organization = "IEEE"
}

@INPROCEEDINGS {ebert2016global,
    author       = "Ebert, Christof and Kuhrmann, Marco and Prikladnicki, Rafael",
    title        = "Global software engineering: Evolution and trends",
    booktitle    = "2016 IEEE 11th International Conference on Global Software Engineering (ICGSE)",
    year         = "2016",
    pages        = "144--153",
    organization = "IEEE"
}

@BOOK {ebert2012global,
    author    = "Ebert, Christof",
    title     = "Global Software and IT",
    publisher = "Wiley Online Library",
    year      = "2012"
}

@ARTICLE {ebert2015global,
    author    = "Ebert, Christof and Kuhrmann, Marco and Prikladnicki, Rafael",
    title     = "Global software engineering: An industry perspective",
    journal   = "IEEE Software",
    year      = "2015",
    volume    = "33",
    number    = "1",
    pages     = "105--108",
    publisher = "IEEE"
}

@INPROCEEDINGS {yao2010structural,
    author       = "Yao, Yi and Huang, Song and Jie, Li and Liu, Xiao-ming",
    title        = "Structural characteristic of large-scale software development network",
    booktitle    = "2010 2nd International Conference on Computer Engineering and Technology",
    year         = "2010",
    volume       = "3",
    pages        = "V3--214",
    organization = "IEEE"
}

@ARTICLE {dikert2016challenges,
    author    = "Dikert, Kim and Paasivaara, Maria and Lassenius, Casper",
    title     = "Challenges and success factors for large-scale agile transformations: A systematic literature review",
    journal   = "Journal of Systems and Software",
    year      = "2016",
    volume    = "119",
    pages     = "87--108",
    publisher = "Elsevier"
}

@INPROCEEDINGS {aoyama1995management,
    author       = "Aoyama, Mikio",
    title        = "Management of distributed concurrent development for large scale software systems",
    booktitle    = "Proceedings 1995 Asia Pacific Software Engineering Conference",
    year         = "1995",
    pages        = "158--167",
    organization = "IEEE"
}
@ARTICLE {alves2016identification,
    author    = "Alves, Nicolli SR and Mendes, Thiago S and de Mendon{\c{c}}a, Manoel G and Sp{\'\i}nola, Rodrigo O and Shull, Forrest and Seaman, Carolyn",
    title     = "Identification and management of technical debt: A systematic mapping study",
    journal   = "Information and Software Technology",
    year      = "2016",
    volume    = "70",
    pages     = "100--121",
    publisher = "Elsevier"
}

@ARTICLE {usman2018effort,
    author    = "Usman, Muhammad and Britto, Ricardo and Damm, Lars-Ola and Borstler, Jurgen",
    title     = "Effort estimation in large-scale software development: An industrial case study",
    journal   = "Information and Software technology",
    year      = "2018",
    volume    = "99",
    pages     = "21--40",
    publisher = "Elsevier"
}
@INPROCEEDINGS {Yao2010,
    author    = "Yi Yao and Song Huang and Li Jie and Xiao-ming Liu",
    title     = "Structural characteristic of large-scale software development network",
    booktitle = "2010 2nd International Conference on Computer Engineering and Technology",
    year      = "2010",
    publisher = "{IEEE}",
}
@INPROCEEDINGS {Casey2006URW,
    author    = "Casey, Valentine and Richardson, Ita",
    title     = "Uncovering the Reality Within Virtual Software Teams",
    booktitle = "Proceedings of the 2006 International Workshop on Global Software Development for the Practitioner",
    year      = "2006",
    series    = "GSD '06",
    pages     = "66--72",
    address   = "New York, NY, USA",
    publisher = "ACM",
    isbn      = "1-59593-404-9",
    location  = "Shanghai, China",
    numpages  = "7",
    acmid     = "1138523",
    keywords  = "GSD, communication tools, global software development, knowledge transfer, motivational issues, process re-engineering, project management, technical ability, virtual teams"
}
@INPROCEEDINGS {Kazman_2015,
    author    = "Rick Kazman and Yuanfang Cai and Ran Mo and Qiong Feng and Lu Xiao and Serge Haziyev and Volodymyr Fedak and Andriy Shapochka",
    title     = "A Case Study in Locating the Architectural Roots of Technical Debt",
    booktitle = "2015 {IEEE}/{ACM} 37th {IEEE} International Conference on Software Engineering",
    year      = "2015",
    month     = "may",
    publisher = "{IEEE}",
    abstract  = "Our recent research has shown that, in large-scale software systems, defective files seldom exist alone. They are usually architecturally connected, and their architectural structures exhibit significant design flaws which propagate bugginess among files. We call these flawed structures the architecture roots, a type of technical debt that incurs high maintenance penalties. Removing the architecture roots of bugginess requires refactoring, but the benefits of refactoring have historically been difficult for architects to quantify or justify. In this paper, we present a case study of identifying and quantifying such architecture debts in a large-scale industrial software project. Our approach is to model and analyze software architecture as a set of design rule spaces (DRSpaces). Using data extracted from the project's development artifacts, we were able to identify the files implicated in architecture flaws and suggest refactorings based on removing these flaws. Then we built economic models of the before and (predicted) after states, which gave the organization confidence that doing the refactorings made business sense, in terms of a handsome return on investment.",
    doi       = "10.1109/icse.2015.146",
    keywords  = "rank4",
    ranking   = "rank4"
}
@ARTICLE {Heikkilae2017,
    author                  = "Heikkila, V.T. and Paasivaara, M. and Lasssenius, C. and Damian, D. and Engblom, C.",
    title                   = "Managing the requirements flow from strategy to release in large-scale agile development: a case study at Ericsson",
    journal                 = "Empirical Software Engineering",
    year                    = "2017",
    volume                  = "22",
    number                  = "6",
    pages                   = "2892-2936",
    note                    = "cited By 1",
    issn                    = "13823256",
    abstract                = "In a large organization, informal communication and simple backlogs are not sufficient for the management of requirements and development work. Many large organizations are struggling to successfully adopt agile methods, but there is still little scientific knowledge on requirements management in large-scale agile development organizations. We present an in-depth study of an Ericsson telecommunications node development organization which employs a large scale agile method to develop telecommunications system software. We describe how the requirements flow from strategy to release, and related benefits and problems. Data was collected by 43 interviews, which were analyzed qualitatively. The requirements management was done in three different processes, each of which had a different process model, purpose and planning horizon. The release project management process was plan-driven, feature development process was continuous and implementation management process was agile. The perceived benefits included reduced development lead time, increased flexibility, increased planning efficiency, increased developer motivation and improved communication effectiveness. The recognized problems included difficulties in balancing planning effort, overcommitment, insufficient understanding of the development team autonomy, defining the product owner role, balancing team specialization, organizing system-level work and growing technical debt. The study indicates that agile development methods can be successfully employed in organizations where the higher level planning processes are not agile. Combining agile methods with a flexible feature development process can bring many benefits, but large-scale software development seems to require specialist roles and significant coordination effort. © 2016, The Author(s).",
    affiliation             = "Aalto University, PO Box 15400, Aalto, Finland; University of Victoria, PO Box 1700, STN CSC, Victoria, BC, Canada; Oy LM Ericsson AB, Kirkkonummi, Finland",
    coden                   = "ESENF",
    doi                     = "10.1007/s10664-016-9491-z",
    keywords                = "Agile manufacturing systems; Project management; Requirements engineering; Societies and institutions; Software engineering, Agile development organization; Agile software development; Communication effectiveness; Implementation managements; Large project; Project management process; Requirements management; Scrum, Software design, rank4",
    language                = "English",
    publisher               = "Springer New York LLC",
    source                  = "Scopus"
}

@INPROCEEDINGS {Falessi:2013,
    author    = "Falessi, Davide and Shaw, Michele A. and Shull, Forrest and Mullen, Kathleen and Stein, Mark",
    title     = "Practical Considerations, Challenges, and Requirements of Tool-support for Managing Technical Debt",
    booktitle = "Proceedings of the 4th International Workshop on Managing Technical Debt",
    year      = "2013",
    series    = "MTD '13",
    pages     = "16--19",
    address   = "Piscataway, NJ, USA",
    publisher = "IEEE Press",
    isbn      = "978-1-4673-6443-0",
    location  = "San Francisco, California",
    numpages  = "4",
    acmid     = "2663300",
    keywords  = "CMMI, decision-making, technical debt"
}
@ARTICLE {Harter:2000,
    author     = "Harter, Donald E. and Krishnan, Mayuram S. and Slaughter, Sandra A.",
    title      = "Effects of Process Maturity on Quality, Cycle Time, and Effort in Software Product Development",
    journal    = "Manage. Sci.",
    year       = "2000",
    volume     = "46",
    number     = "4",
    pages      = "451--466",
    month      = "apr",
    issn       = "0025-1909",
    numpages   = "16",
    doi        = "10.1287/mnsc.46.4.451.12056",
    acmid      = "970247",
    publisher  = "INFORMS",
    address    = "Institute for Operations Research and the Management Sciences (INFORMS), Linthicum, Maryland, USA",
    keywords   = "Capability maturity model, Software costs, Software cycle time, Software economics, Software process improvement, Software productivity, Software quality"
}

@ARTICLE {Yli-Huumo2016195,
    author                  = "Yli-Huumo, J. and Maglyas, A. and Smolander, K.",
    title                   = "How do software development teams manage technical debt? An empirical study",
    journal                 = "Journal of Systems and Software",
    year                    = "2016",
    volume                  = "120",
    pages                   = "195-218",
    note                    = "cited By 6",
    issn                    = "01641212",
    abstract                = "Technical debt (TD) is a metaphor for taking shortcuts or workarounds in technical decisions to gain short-term benefit in time-to-market and earlier software release. In this study, one large software development organization is investigated to gather empirical evidence related to the concept of technical debt management (TDM). We used the exploratory case study method to collect and analyze empirical data in the case organization by interviewing a total of 25 persons in eight software development teams. We were able to identify teams where the current strategy for TDM was only to fix TD when necessary, when it started to cause too much trouble for development. We also identified teams where the management had a systematic strategy to identify, measure and monitor TD during the development process. It seems that TDM can be associated with a similar maturity concept as software development in general. Development teams may raise their maturity by increasing their awareness and applying more advanced processes, techniques and tools in TDM. TDM is an essential part of sustainable software development, and companies have to find right approaches to deal with TD to produce healthy software that can be developed and maintained in the future. © 2016 The Authors",
    affiliation             = "Lappeenranta University of Technology, School of Business and Management, Department of Innovation and Software, PO Box 20, Skinnarilankatu 34, Lappeenranta, Finland; Aalto University, School of Science, Department of Computer Science, P.O.Box 15400, Aalto, Finland",
    coden                   = "JSSOD",
    doi                     = "10.1016/j.jss.2016.05.018",
    keywords                = "Human resource management; Planning; Software engineering, Development process; Exploratory case studies; Software development organizations; Software development teams; Sustainable softwares; Technical debts; Technical decision; Techniques and tools, Software design, rank5",
    language                = "English",
    publisher               = "Elsevier Inc.",
    source                  = "Scopus"
}

@ARTICLE {Rios2018b,
    author    = "Nicolli Rios and Manoel Gomes de Mendon{\c{c}}a Neto and Rodrigo Oliveira Sp{\'{\i}}nola",
    title     = "A tertiary study on technical debt: Types, management strategies, research trends, and base information for practitioners",
    journal   = "Information and Software Technology",
    year      = "2018",
    volume    = "102",
    pages     = "117--145",
    month     = "oct",
    abstract  = "AbstractLarge software companies need to support continuous and fast delivery of customer value both in the short and long term. However, this can be hindered if both the evolution and maintenance of existing systems are hampered by Technical Debt. Although a lot of theoretical work on Technical Debt has been produced recently, its practical management lacks empirical studies. In this paper, we investigate the state of practice in several companies to understand what the cost of managing TD is, what tools are used to track TD, and how a tracking process is introduced in practice. We combined two phases: a survey involving 226 respondents from 15 organizations and an in-depth multiple case study in three organizations including 13 interviews and 79 Technical Debt issues. We selected the organizations where Technical Debt was better tracked in order to distill best practices. We found that the development time dedicated to managing Technical Debt is substantial (an average of 25 of the overall development), but mostly not systematic: only a few participants (26) use a tool, and only 7.2 methodically track Technical Debt. We found that the most used and effective tools are currently backlogs and static analyzers. By studying the approaches in the companies participating in the case study, we report how companies start tracking Technical Debt and what the initial benefits and challenges are. Finally, we propose a Strategic Adoption Model for the introduction of tracking Technical Debt in software organizations.",
    doi       = "10.1016/j.infsof.2018.05.010",
    groups    = "armandosoaressousa:4",
    keywords  = "rank5",
    publisher = "Elsevier {BV}",
    ranking   = "rank5"
}
@INPROCEEDINGS {Alzaghoul:2014,
    author    = "E. Alzaghoul and R. Bahsoon",
    title     = "Evaluating Technical Debt in Cloud-Based Architectures Using Real Options",
    booktitle = "2014 23rd Australian Software Engineering Conference",
    year      = "2014",
    pages     = "1-10",
    month     = "April",
    doi       = "10.1109/ASWEC.2014.27",
    issn      = "1530-0803"
}

@Conference{Ampatzoglou2016,
  author              = "Ampatzoglou, A. and Ampatzoglou, A. and Chatzigeorgiou, A. and Avgeriou, P. and Abrahamsson, P. and Martini, A. and Zdun, U. and Systa, K.",
  booktitle           = "2016 IEEE 8th International Workshop on Managing Technical Debt (MTD)",
  title               = "The Perception of Technical Debt in the Embedded Systems Domain: An Industrial Case Study",
  year                = "2016",
  month               = "Oct",
  note                = "cited By 2",
  pages               = "9-16",
  publisher           = "Institute of Electrical and Electronics Engineers Inc.",
  abstract            = "Technical Debt Management (TDM) has drawn the attention of software industries during the last years, including embedded systems. However, we currently lack an overview of how practitioners from this application domain perceive technical debt. To this end, we conducted a multiple case study in the embedded systems industry, to investigate: (a) the expected life-time of components that have TD, (b) the most frequently occurring types of TD in them, and (c) the significance of TD against run-time quality attributes. The case study was performed on seven embedded systems industries (telecommunications, printing, smart manufacturing, sensors, etc.) from five countries (Greece, Netherlands, Sweden, Austria, and Finland). The results of the case study suggest that: (a) maintainability is more seriously considered when the expected lifetime of components is larger than ten years, (b) the most frequent types of debt are test, architectural, and code debt, and (c) in embedded systems the run-time qualities are prioritized compared to design-time qualities that are usually associated with TD. The obtained results can be useful for both researchers and practitioners: the former can focus their research on the most industrially-relevant aspects of TD, whereas the latter can be informed about the most common types of TD and how to focus their TDM processes. © 2016 IEEE.",
  doi                 = "10.1109/MTD.2016.8",
  groups              = "armandosoaressousa:6",
  isbn                = "9781509038541",
  journal             = "Proceedings - 2016 IEEE 8th International Workshop on Managing Technical Debt, MTD 2016",
  language            = "English"
}
@INPROCEEDINGS {Ernst_2015,
    author    = "Neil A. Ernst and Stephany Bellomo and Ipek Ozkaya and Robert L. Nord and Ian Gorton",
    title     = "Measure it? Manage it? Ignore it? software practitioners and technical debt",
    booktitle = "Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering - {ESEC}/{FSE} 2015",
    year      = "2015",
    publisher = "{ACM} Press",
    abstract  = "The technical debt metaphor is widely used to encapsulate numerous software quality problems. The metaphor is attractive to practitioners as it communicates to both technical and nontechnical audiences that if quality problems are not addressed, things may get worse. However, it is unclear whether there are practices that move this metaphor beyond a mere communication mechanism. Existing studies of technical debt have largely focused on code metrics and small surveys of developers. In this paper, we report on our survey of 1,831 participants, primarily software engineers and architects working in long-lived, software-intensive projects from three large organizations, and follow-up interviews of seven software engineers. We analyzed our data using both nonparametric statistics and qualitative text analysis. We found that architectural decisions are the most important source of technical debt. Furthermore, while respondents believe the metaphor is itself important for communication, existing tools are not currently helpful in managing the details. We use our results to motivate a technical debt timeline to focus management and tooling approaches.",
    comment   = "Task complexity",
    doi       = "10.1145/2786805.2786848",
    keywords  = "rank4",
    ranking   = "rank4"
}

@INPROCEEDINGS {Das:2007:UDV:1234772.1234790,
    author    = "Das, Sumita and Lutters, Wayne G. and Seaman, Carolyn B.",
    title     = "Understanding Documentation Value in Software Maintenance",
    booktitle = "Proceedings of the 2007 Symposium on Computer Human Interaction for the Management of Information Technology",
    year      = "2007",
    series    = "CHIMIT '07",
    address   = "New York, NY, USA",
    publisher = "ACM",
    isbn      = "978-1-59593-635-6",
    location  = "Cambridge, Massachusetts",
    articleno = "2",
    acmid     = "1234790",
    keywords  = "documentation, software maintenance"
}
@ARTICLE {Guo2016,
    author                  = "Guo, Y. and Spinola, R.O. and Seaman, C.",
    title                   = "Exploring the costs of technical debt management – a case study",
    journal                 = "Empirical Software Engineering",
    year                    = "2016",
    volume                  = "21",
    number                  = "1",
    pages                   = "159-182",
    note                    = "cited By 7",
    issn                    = "13823256",
    abstract                = "Technical debt is a metaphor for delayed software maintenance tasks. Incurring technical debt may bring short-term benefits to a project, but such benefits are often achieved at the cost of extra work in future, analogous to paying interest on the debt. Currently technical debt is managed implicitly, if at all. However, on large systems, it is too easy to lose track of delayed tasks or to misunderstand their impact. Therefore, we have proposed a new approach to managing technical debt, which we believe to be helpful for software managers to make informed decisions. In this study we explored the costs of the new approach by tracking the technical debt management activities in an on-going software project. The results from the study provided insights into the impact of technical debt management on software projects. In particular, we found that there is a significant start-up cost when beginning to track and monitor technical debt, but the cost of ongoing management soon declines to very reasonable levels. © 2014, Springer Science+Business Media New York.",
    affiliation             = "Department of Information Systems, University of Maryland Baltimore County, Baltimore, MD, United States; Department of Systems and Computing, University of Salvador, Salvador, Bahia, Brazil; Fraunhofer Project Center for Software and System Engineering at Federal University of Bahia, Salvador, Bahia, Brazil",
    coden                   = "ESENF",
    doi                     = "10.1007/s10664-014-9351-7",
    keywords                = "Decision making, Informed decision; Management activities; New approaches; Software managers; Software project; Software-maintenance tasks; Start-up costs; Technical debts, Costs, rank4",
    language                = "English",
    publisher               = "Springer New York LLC",
    source                  = "Scopus",
}

@INCOLLECTION {Yli-Huumo2016a,
    author    = "Jesse Yli-Huumo and Andrey Maglyas and Kari Smolander and Johan Haller and Hannu Törnroos",
    title     = "Developing Processes to Increase Technical Debt Visibility and Manageability {\textendash} An Action Research Study in Industry",
    booktitle = "Product-Focused Software Process Improvement",
    publisher = "Springer International Publishing",
    year      = "2016",
    pages     = "368--378",
    abstract  = "The knowledge about technical debt and its management has increased in recent years. The interest of academia and industry has generated many viewpoints on technical debt. Technical debt management consists of technical and organizational aspects, which make it a challenge in software development. To increase technical debt visibility and manageability, new processes must be developed and thoroughly empirically tested for their applicability. In this paper, we use the action research methodology to design processes for identification, documentation, and prioritization of technical debt. Our partner in this research is a large Nordic IT company Tieto, currently in a need for new ways to improve their technical debt management. The results include a set of processes and templates that were successfully used to identify and document technical debt. The identified technical debt items were later prioritized based on evaluation by Tieto employees. Tieto was able to create a prioritized technical debt backlog, which is now used for reduction activities to create a healthy and sustainable product for the future.",
    doi       = "10.1007/978-3-319-49094-6_24",
    keywords  = "rank3",
    ranking   = "rank3"
}

@INPROCEEDINGS {Klinger2011,
    author    = "Klinger, Tim and Tarr, Peri and Wagstrom, Patrick and Williams, Clay",
    title     = "An Enterprise Perspective on Technical Debt",
    booktitle = "Proceedings of the 2Nd Workshop on Managing Technical Debt",
    year      = "2011",
    series    = "MTD '11",
    pages     = "35--38",
    address   = "New York, NY, USA",
    publisher = "ACM",
    acmid     = "1985371",
    doi       = "10.1145/1985362.1985371",
    isbn      = "978-1-4503-0586-0",
    keywords  = "extended stakeholders, leverage, technical debt, rank5",
    location  = "Waikiki, Honolulu, HI, USA",
    numpages  = "4"
}
@INPROCEEDINGS {Codabux2013,
    author    = "Codabux, Zadia and Williams, Byron",
    title     = "Managing Technical Debt: An Industrial Case Study",
    booktitle = "Proceedings of the 4th International Workshop on Managing Technical Debt",
    year      = "2013",
    series    = "MTD '13",
    pages     = "8--15",
    address   = "Piscataway, NJ, USA",
    month     = "May",
    publisher = "IEEE Press",
    abstract  = "Technical debt is the consequence of trade-offs made during software development to ensure speedy releases. The research community lacks rigorously evaluated guidelines to help practitioners characterize, manage and prioritize debt. This paper describes a study conducted with an industrial partner during their implementation of Agile development practices for a large software development division within the company. The report contains our initial findings based on ethnographic observations and semi-structured interviews. The goal is to identify the best practices regarding managing technical debt so that the researchers and the practitioners can further evaluate these practices to extend their knowledge of the technical debt metaphor. We determined that the developers considered their own taxonomy of technical debt based on the type of work they were assigned and their personal understanding of the term. Despite management's high-level categories, the developers mostly considered design debt, testing debt and defect debt. In addition to developers having their own taxonomy, assigning dedicated teams for technical debt reduction and allowing other teams about 20% of time per sprint for debt reduction are good initiatives towards lowering technical debt. While technical debt has become a well-regarded concept in the Agile community, further empirical evaluation is needed to assess how to properly apply the concept for various development organizations.",
    acmid     = "2663299",
    doi       = "10.1109/MTD.2013.6608672",
    isbn      = "978-1-4673-6443-0",
    keywords  = "agile methods, industrial case study, scrum, semi-structure interviews, technical debt, rank5",
    location  = "San Francisco, California",
    numpages  = "8"
}
@ARTICLE {Ampatzoglou_2015,
    author    = "Areti Ampatzoglou and Apostolos Ampatzoglou and Alexander Chatzigeorgiou and Paris Avgeriou",
    title     = "The financial aspect of managing technical debt: A systematic literature review",
    journal   = "Information and Software Technology",
    year      = "2015",
    volume    = "64",
    pages     = "52--73",
    month     = "aug",
    abstract  = "ContextTechnical debt is a software engineering metaphor, referring to the eventual financial consequences of trade-offs between shrinking product time to market and poorly specifying, or implementing a software product, throughout all development phases. Based on its inter-disciplinary nature, i.e. software engineering and economics, research on managing technical debt should be balanced between software engineering and economic theories.ObjectiveThe aim of this study is to analyze research efforts on technical debt, by focusing on their financial aspect. Specifically, the analysis is carried out with respect to: (a) how financial aspects are defined in the context of technical debt and (b) how they relate to the underlying software engineering concepts.MethodIn order to achieve the abovementioned goals, we employed a standard method for SLRs and applied it on studies retrieved from seven general-scope digital libraries. In total we selected 69 studies relevant to the financial aspect of technical debt.ResultsThe most common financial terms that are used in technical debt research are principal and interest, whereas the financial approaches that have been more frequently applied for managing technical debt are real options, portfolio management, cost/benefit analysis and value-based analysis. However, the application of such approaches lacks consistency, i.e., the same approach is differently applied in different studies, and in some cases lacks a clear mapping between financial and software engineering concepts.ConclusionThe results are expected to prove beneficial for the communication between technical managers and project managers, in the sense that they will provide a common vocabulary, and will help in setting up quality-related goals, during software development. To achieve this we introduce: (a) a glossary of terms and (b) a classification scheme for financial approaches used for managing technical debt. Based on these, we have been able to underline interesting implications for researchers and practitioners.",
    doi       = "10.1016/j.infsof.2015.04.001",
    keywords  = "rank5",
    publisher = "Elsevier {BV}",
    ranking   = "rank5"
}

@INPROCEEDINGS {Fernandez_Sanchez_2017,
    author    = "Carlos Fernandez-Sanchez and Hector Humanes and Juan Garbajosa and Jessica Diaz",
    title     = "An Open Tool for Assisting in Technical Debt Management",
    booktitle = "2017 43rd Euromicro Conference on Software Engineering and Advanced Applications ({SEAA})",
    year      = "2017",
    month     = "aug",
    publisher = "IEEE"
}
@ARTICLE {mendes2019visminertd,
    author    = "Mendes, Thiago S and Gomes, Felipe GS and Gon{\c{c}}alves, David P and Mendon{\c{c}}a, Manoel G and Novais, Renato L and Sp{\'\i}nola, Rodrigo O",
    title     = "VisminerTD: a tool for automatic identification and interactive monitoring of the evolution of technical debt items",
    journal   = "Journal of the Brazilian Computer Society",
    year      = "2019",
    volume    = "25",
    number    = "1",
    pages     = "2",
    publisher = "Springer"
}
@ARTICLE {clay2010infrastructure,
    author  = "Clay Shafer, Andrew",
    title   = "Infrastructure Debt: Revisiting the Foundation",
    journal = "Cutter IT Journal",
    year    = "2010",
    volume  = "23",
    number  = "10",
    pages   = "36"
}

@InProceedings{Besker2017a,
  author    = "T. Besker and A. Martini and J. Bosch",
  booktitle = "2017 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
  title     = "The Pricey Bill of Technical Debt: When and by Whom will it be Paid?",
  year      = "2017",
  month     = "Sept",
  pages     = "13-23",
  abstract  = "Software companies need to support continuous and fast delivery of customer value both in short and a long-term perspective. However, this can be hindered by evolution limitations and high maintenance efforts due to internal software quality issues by what is described as Technical Debt. Although significant theoretical work has been undertaken to describe the negative effects of Technical Debt, these studies tend to have a weak empirical basis and often lack quantitative data. The aim of this study is to estimate wasted time, caused by the Technical Debt interest during the software life-cycle. This study also investigates how practitioners perceive and estimate the impact of the negative consequences due to Technical Debt during the software development process. This paper reports the results of both an online web-survey provided quantitative data from 258 participants and follow-up interviews with 32 industrial software practitioners. The importance and originality of this study contributes and provides novel insights into the research on Technical Debt by quantifying the perceived interest and the negative effects it has on the software development life-cycle. The findings show that on average, 36 percent of all development time is estimated to be wasted due to Technical Debt; Complex Architectural Design and Requirement Technical Debt generates most negative effect; and that most time is wasted on understanding and/or measuring the Technical Debt. Moreover, the analysis of the professional roles and the age of the software system in the survey revealed that different roles are affected differently and that the consequences of Technical Debt are also influenced by the age of the software system.",
  doi       = "10.1109/ICSME.2017.42",
  groups    = "armandosoaressousa:6",
}
@INPROCEEDINGS {Digkas_2018,
    author    = "Georgios Digkas and Mircea Lungu and Paris Avgeriou and Alexander Chatzigeorgiou and Apostolos Ampatzoglou",
    title     = "How do developers fix issues and pay back technical debt in the Apache ecosystem?",
    booktitle = "2018 {IEEE} 25th International Conference on Software Analysis, Evolution and Reengineering ({SANER})",
    year      = "2018",
    month     = "mar",
    publisher = "{IEEE}",
    abstract  = "During software evolution technical debt (TD) follows a constant ebb and flow, being incurred and paid back, sometimes in the same day and sometimes ten years later. There have been several studies in the literature investigating how technical debt in source code accumulates during time and the consequences of this accumulation for software maintenance. However, to the best of our knowledge there are no large scale studies that focus on the types of issues that are fixed and the amount of TD that is paid back during software evolution. In this paper we present the results of a case study, in which we analyzed the evolution of fifty-seven Java open-source software projects by the Apache Software Foundation at the temporal granularity level of weekly snapshots. In particular, we focus on the amount of technical debt that is paid back and the types of issues that are fixed. The findings reveal that a small subset of all issue types is responsible for the largest percentage of TD repayment and thus, targeting particular violations the development team can achieve higher benefits.",
    comment   = "repayment",
    doi       = "10.1109/saner.2018.8330205",
    groups    = "armandosoaressousa:4",
    keywords  = "rank5",
    ranking   = "rank5"
}
@BOOK {campbell2013sonarqube,
    author    = "Campbell, G and Papapetrou, Patroklos P",
    title     = "SonarQube in action",
    publisher = "Manning Publications Co.",
    year      = "2013"
}
@ARTICLE {britto2016software,
    author    = "Britto, Ricardo and Smite, Darja and Damm, Lars-Ola",
    title     = "Software architects in large-scale distributed projects: An Ericsson case study",
    journal   = "IEEE Software",
    year      = "2016",
    volume    = "33",
    number    = "6",
    pages     = "48--55",
    publisher = "IEEE"
}
@INPROCEEDINGS {avritzer2015extending,
    author       = "Avritzer, Alberto and Beecham, Sarah and Britto, Ricardo and Kroll, Josiane and Menasche, Daniel Sadoc and Noll, John and Paasivaara, Maria",
    title        = "Extending survivability models for global software development with media synchronicity theory",
    booktitle    = "Global Software Engineering (ICGSE), 2015 IEEE 10th International Conference on",
    year         = "2015",
    pages        = "23--32",
    organization = "IEEE"
}

@INPROCEEDINGS {britto2016experiences,
    author       = "Britto, Ricardo and {\v{S}}mite, Darja and Damm, Lars-Ola",
    title        = "Experiences from measuring learning and performance in large-scale distributed software development",
    booktitle    = "Proceedings of the 10th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement",
    year         = "2016",
    pages        = "17",
    organization = "ACM"
}

@ARTICLE {mayring2014qualitative,
title="Qualitative content analysis: theoretical foundation, basic procedures and software solution",
  author="Mayring, Philipp",
  year="2014",
  publisher="AUT"
}

@ARTICLE {cavanagh1997content,
    author  = "Cavanagh, Stephen",
    title   = "Content analysis: concepts, methods and applications.",
    journal = "Nurse researcher",
    year    = "1997",
    volume  = "4",
    number  = "3",
    pages   = "5--16"
}
@BOOK {ho2013handbook,
    author    = "Ho, Robert",
    title     = "Handbook of univariate and multivariate data analysis with IBM SPSS",
    publisher = "Chapman and Hall/CRC",
    year      = "2013"
}
@ARTICLE {elo2008qualitative,
    author    = "Elo, Satu and Kyngas, Helvi",
    title     = "The qualitative content analysis process",
    journal   = "Journal of advanced nursing",
    year      = "2008",
    volume    = "62",
    number    = "1",
    pages     = "107--115",
    publisher = "Wiley Online Library"
}
@BOOK {Runeson:2012,
    author    = "Runeson, P. and Host, M. and Rainer, A. and Regnell, B.",
    title     = "{Case Study Research in Software Engineering: Guidelines and Examples}",
    publisher = "John Wiley Sons",
    year      = "2012",
    isbn      = "978-1118104354"
}
@BOOK {Trochim:2015,
    author    = "Trochim, W. and Donnelly, J. P. and Arora, K.",
    title     = "Research Methods: The Essential Knowledge Base",
    publisher = "Cengage",
    year      = "2015",
    isbn      = "978-1133954774"
}
@ARTICLE {chatterjee1986influential,
    author    = "Chatterjee, Samprit and Hadi, Ali S",
    title     = "Influential observations, high leverage points, and outliers in linear regression",
    journal   = "Statistical Science",
    year      = "1986",
    pages     = "379--393",
    publisher = "JSTOR"
}
@BOOK {fox2015applied,
    author    = "Fox, John",
    title     = "Applied regression analysis and generalized linear models",
    publisher = "Sage Publications",
    year      = "2015"
}

@ARTICLE {koenker1982robust,
    author    = "Koenker, Roger and Bassett Jr, Gilbert",
    title     = "Robust tests for heteroscedasticity based on regression quantiles",
    journal   = "Econometrica: Journal of the Econometric Society",
    year      = "1982",
    pages     = "43--61",
    publisher = "JSTOR"
}
@ARTICLE {alin2010multicollinearity,
    author    = "Alin, Aylin",
    title     = "Multicollinearity",
    journal   = "Wiley Interdisciplinary Reviews: Computational Statistics",
    year      = "2010",
    volume    = "2",
    number    = "3",
    pages     = "370--374",
    publisher = "Wiley Online Library"
}

@article{Li:2015,
 author = "Li, Zengyang and Avgeriou, Paris and Liang, Peng",
 title = "A Systematic Mapping Study on Technical Debt and Its Management",
 journal = "J. Syst. Softw.",
 volume = "101",
 number = "C",
 month = "mar",
 year = "2015",
 issn = "0164-1212",
 pages = "193--220",
 numpages = "28",
 doi = "10.1016/j.jss.2014.12.027",
 acmid = "2741488",
 publisher = "Elsevier Science Inc.",
 address = "New York, NY, USA",
 keywords = "Systematic mapping study, Technical debt, Technical debt management"
}

@Article{Carmel:2001,
  Title                    = "Tactical Approaches for Alleviating Distance in Global Software Development",
  Author                   = "Carmel, E. and Agarwal, R.",
  Journal                  = "IEEE Software",
  Year                     = "2001",
  Number                   = "2",
  Pages                    = "22--29",
  Volume                   = "18",
  Acmid                    = "626245",
  Address                  = "Los Alamitos, CA, USA",
  Numpages                 = "8",
  Publisher                = "IEEE Computer Society Press"
}

@inproceedings{tamburri2013social,
  title= "What is social debt in software engineering?",
  author= "Tamburri, Damian A and Kruchten, Philippe and Lago, Patricia and van Vliet, Hans",
  booktitle= "2013 6th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE)",
  pages= "93--96",
  year= "2013",
  organization= "IEEE"
}

@incollection{Seaman:2011,
 title="Measuring and monitoring technical debt",
  author="Seaman, Carolyn and Guo, Yuepu",
  booktitle="Advances in Computers",
  volume="82",
  pages="25--46",
  year="2011",
  publisher="Elsevier"
  }

@article{lehtola2006suitability,
  title="Suitability of requirements prioritization methods for market-driven software product development",
  author="Lehtola, Laura and Kauppinen, Marjo",
  journal="Software Process: Improvement and Practice",
  volume="11",
  number="1",
  pages="7--19",
  year="2006",
  publisher="Wiley Online Library"
}

@inproceedings{davis2013driving,
  title="Driving quality improvement and reducing technical debt with the definition of done",
  author="Davis, Noopur",
  booktitle="Agile Conference (AGILE), 2013",
  pages="164--168",
  year="2013",
  organization="IEEE"
}

@article{lim2012balancing,
  title="A balancing act: what software practitioners have to say about technical debt",
  author="Lim, Erin and Taksande, Nitin and Seaman, Carolyn",
  journal="IEEE software",
  volume="29",
  number="6",
  pages="22--27",
  year="2012",
  publisher="IEEE"
}

@article{kruchten2012technical,
  title="Technical debt: From metaphor to theory and practice",
  author="Kruchten, Philippe and Nord, Robert L and Ozkaya, Ipek",
  journal="Ieee software",
  volume="29",
  number="6",
  pages="18--21",
  year="2012",
  publisher="IEEE"
}

@inproceedings{guo2011portfolio,
  title="A portfolio approach to technical debt management",
  author="Guo, Yuepu and Seaman, Carolyn",
  booktitle="Proceedings of the 2nd Workshop on Managing Technical Debt",
  pages="31--34",
  year="2011",
  organization="ACM"
}

@inproceedings{ernst2015measure,
  title="Measure it? manage it? ignore it? software practitioners and technical debt",
  author="Ernst, Neil A and Bellomo, Stephany and Ozkaya, Ipek and Nord, Robert L and Gorton, Ian",
  booktitle="Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering",
  pages="50--60",
  year="2015",
  organization="ACM"
}

@inproceedings{besker2019technical,
  title="Technical debt triage in backlog management",
  author="Besker, Terese and Martini, Antonio and Bosch, Jan",
  booktitle="2019 IEEE/ACM International Conference on Technical Debt (TechDebt)",
  pages="13--22",
  year="2019",
  organization="IEEE"
}